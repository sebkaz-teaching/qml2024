[
  {
    "objectID": "check/grover.html",
    "href": "check/grover.html",
    "title": "Klasyfikacja z wykorzystaniem Algorytmu Grovera",
    "section": "",
    "text": "# dane testowe\n\ndef generate_data():\n    data = {'A': [(0.2, 0.5), (0.1, 0.4), (0.4, 0.8)],\n            'B': [(0.7, 0.2), (0.6, 0.3), (0.8, 0.1)]}\n    return data\n\n\ngenerate_data()\n\n\nfrom qiskit import QuantumCircuit, assemble, transpile\nfrom qiskit.visualization import plot_histogram\n\n# Tworzenie obwodu kwantowego dla algorytmu Grovera\ndef grover_circuit():\n\n    qc = QuantumCircuit(2, 2)\n\n    # Inicjalizacja superpozycji równomiernej\n    qc.h([0, 1])\n    qc.barrier()\n    # Faza odwracająca dla klasyfikacji\n    qc.cz(0, 1)\n\n    # Inwersja przez odbicie średniej\n    qc.h([0, 1])\n    qc.z([0, 1])\n    qc.cz(0, 1)\n    qc.h([0, 1])\n\n    return qc\n\nW algorytmie Grovera chodzi o przyspieszenie wyszukiwania w niesortowanym zbiorze danych przy użyciu kwantowego mechanizmu wzmacniania amplitud. W kontekście klasyfikacji, można użyć algorytmu Grovera do znalezienia punktu w przestrzeni danych, który spełnia określone warunki, co pozwoli na przypisanie go do jednej z klas.\nW przykładzie klasyfikacji z algorytmem Grovera:\n\nInicjalizacja superpozycji: Pierwszy krok to stworzenie superpozycji stanów kwantowych, co jest osiągane przez zastosowanie bramki Hadamarda (qc.h()) do wszystkich kubitów.\nFaza odwracająca: Następnie używamy bramki fazowej (w tym przypadku bramki cz) do odwrócenia fazy amplitudy stanu reprezentującego poprawne odpowiedzi.\nInwersja przez odbicie średniej: Kolejnym krokiem jest inwersja amplitudy stanu, co jest osiągane przez zastosowanie bramek Hadamarda, bramek fazowych i bramek cz.\nPomiar wyników: Na końcu dokonujemy pomiaru wszystkich kubitów, co skutkuje otrzymaniem pewnego wyniku, który odpowiada jednemu z możliwych stanów kubitów.\n\nW kontekście klasyfikacji, możemy użyć informacji z wyników pomiarów, aby przyporządkować punkt danych do jednej z klas. Na przykład, w tym przypadku, gdy wynik to ‘00’, punkt jest przypisany do klasy A, a w przeciwnym razie do klasy B.\nW implementacji, funkcja grover_circuit tworzy kwantowy obwód realizujący opisane kroki algorytmu Grovera. W funkcji classify_data, dla każdego punktu danych z danego zbioru, jest on wprowadzany do obwodu kwantowego, a wyniki pomiaru są analizowane w celu przypisania punktu do odpowiedniej klasy.\nWarto zauważyć, że implementacja jest w pełni symulacyjna, a prawdziwe korzyści z algorytmu Grovera można uzyskać na prawdziwym komputerze kwantowym, zwłaszcza w przypadku większych zbiorów danych.\n\n# Klasyfikacja danych przy użyciu algorytmu Grovera\ndef classify_data(data, quantum_circuit):\n    classified_points = {'A': [], 'B': []}\n\n    for category, points in data.items():\n        print(points)\n        for point in points:\n            print(f\"wyniki dla point:  {point}\")\n            # Przygotowanie obwodu kwantowego dla każdego punktu danych\n            qc = QuantumCircuit(2, 2)\n\n            # Wprowadzenie danych do obwodu\n            for idx, coord in enumerate(point):\n                theta = 2 * coord * 3.14159\n                print(f\"theta: {theta} dla coord: {coord}\")\n                qc.u(theta, 0, 0, idx)\n                \n            qc.compose(grover_circuit(), qubits=[0, 1], inplace=True)\n            # Pomiar wyników\n            qc.measure([0, 1], [0, 1])\n            display(qc.draw('mpl'))\n            # Symulacja obwodu\n            backend = Aer.get_backend('qasm_simulator')\n            result = backend.run(qc, shots=1000).result()\n            counts = result.get_counts(qc)\n   \n            # Klasyfikacja wyniku\n            most_frequent_result = max(counts, key=counts.get)\n            if most_frequent_result == '00':\n                classified_points[category].append(point)\n            else:\n                classified_points[category].append(point)\n\n\n    return classified_points\n\n\ndata = generate_data()\nclassified_points = classify_data(data, grover_circuit)"
  },
  {
    "objectID": "check/qaoa.html",
    "href": "check/qaoa.html",
    "title": "QUBO",
    "section": "",
    "text": "Bramki kwantowe realizowane są w modelu bramkowym przez operatory unitarne reprezentowane przez macierze.\n\\[\nU U^{\\dagger} = U^{\\dagger} U = I\n\\]\nKazda macierz unitarna moze być przedstawiona jako:\n\\[\nU(H,t) = e^{-i H t}\n\\] gdzie \\(H\\) to macierz Hermitowska (\\(H=H^{\\dagger}\\))\nW ogólności, implementacja obwodu kwantowego, który dokładnie realizuje macierz unitarną dla zadanego Hamiltonianiu jest bardzo trudnym zadaniem. Hamiltonian taki zazwyczaj składa się z sumy wielu niekomutujących części.\n\\[\nH = H_1 + H_2 + \\dots + H_n\n\\]\nMozemy wykorzystać wzór Trotter'a-Suzuki który przybliza dowolną sumę macierzy \\[\ne^{A + B} \\approx \\left( e^{A/n} e^{B/n} \\right)^n\n\\]\ndlatego dla \\(H=\\sum_k H_k\\) otrzymujemy \\[ U(H,t,n) = \\prod_{j=1}^n \\prod_k e^{-i H_k t/n} \\]\n\nQUBO\nKombinatoryczne problemy opytmalizacyjne realizowane są na wielu płaszczyznach naukowych i aplikacyjnych:\n\nlogistyka,\nplanowanie,\noptymalizacja portfolio,\n…\n\nCombinatorial optimization problems are problems involving a large number of yes/no decisions with each set of decisions yielding a corresponding objective function value, like a cost or profit value.\nBecause of the combinatorial explosion of the solution space with the number of variables, finding good solutions is extremely difficult.\nThe QUBO model unifies a rich variety of NP-hard combinatorial optimization problems:\n\nQuadratic Assignment Problems\nCapital Budgeting Problems\nTask allocation Problems\nMaximum–Cut Problems\n\nQUBO objective function:\n\\[\nF(q) = \\sum_a v_a q_a + \\sum_{a &lt; b} \\omega_{a b} q_a q_b\n\\] gdzie \\(q_a \\in \\{0,1\\}\\), \\(v_a\\) oraz \\(\\omega_a\\) to rzeczywiste współczynniki dla liniowej i kwadratowej części.\nThe QUBO objective function is NP-hard in nature.\nWprowadzmy zamianę zmiennych: \\[\nz_a = 2q_a-1\n\\] gdzie \\(z \\in {-1,1}\\)\n\\[\nF(z) = \\sum_a h_a z_a + \\sum_{a &lt; b} J_{a b} z_a z_b\n\\]\nOne popular method of encoding an optimization problem to be solved using QAOA, is to first formulate the problem as an Ising Objective function. The Ising model is a popular statistical mechanics model, associated primarily with ferromagnetism. Because it has been shown to be NP-Complete in nature, the objective function associated with it can be used to represent hard problems.\n\nMax-Cut\nMax-Cut is an NP-complete problem, with applications in clustering, network science, and statistical physics.\nGiven a graph \\(G(V,E)\\), we seek partition of \\(V\\) into two subsets with maximum cut.\nIn short, we have to color every node either blue or red and we score a point whenever an edge connects two nodes with different colors. We then would like to find the solution with the highest score.\n\nAgain, the problem in this specific graph coloring problem is that there are \\(2^N\\) possible solutions for \\(N\\) nodes (an exponential explosion in possibilities), making it impossible to enumerate all possible candidates for relevant system sizes.\nThe solution of Max-Cut, even if approximate, has practical application in machine scheduling, image recognition or for the layout of electronic circuits.\nWe can encode the Maximum Cut problem as a minimization problem of an Ising Hamiltonian, where the (classical) cost function reads: \\[ H_C = \\sum_{a &lt; b} J_{a b} z_a z_b \\]\nIsing matrix \\(J\\) encoding the weights of the edges.\nIn short, the cost Hamiltonian assigns a number to every bitstring \\(z=(z_1,z_2,\\dots,z_n)\\) , and we would like to find the lowest number possible. This will be the optimal assignment and solution to our problem.\nIt is important to note here that we still don’t know if quantum computing can help solve NP-Complete problems efficiently. Our hope for quantum algorithms, at the very least, is to be able to compete with classical heuristics when it comes to certain classes of hard problems.\nThe quantum Ising Hamiltonian, which naturally maps the Ising objective to qubits:\n\\[\\hat{C} = \\sum_{a &lt; b} J_{a b} \\hat{\\sigma}_a^z \\hat{\\sigma}_b^z \\] which can be written as a matrix of size \\((2^N, 2^N)\\) with diagonal elements only corresponding to all possible classical values for the cost function \\(\\hat{C}\\).\nBecause qubits are 2-dim vectors \\(\\sigma_a^z\\) correspond to 2x2 matrix with two eigenvalue \\(\\{1,-1\\}\\) and two eigenvectors \\[|0&gt; = \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\\] \\[|1&gt; = \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}\\]\nSo\n\\[ \\sigma^z = \\begin{pmatrix} 1 & 0 \\\\ 0 & -1 \\end{pmatrix}\\]\nand\n\\[ \\sigma^z_a = \\left( \\otimes_{i=1}^{a-1} I \\right) \\otimes \\left( \\sigma^z \\right) \\otimes \\left(\\otimes_{i=a+1}^{n} I \\right)\\]\nThe other type of Hamiltonian in the QAOA process is a summation of individual Pauli X operators for each qubit involved in the process, which intuitively represents \\[\\hat{B}=\\sum_a \\sigma^x_a\\] transverse field in the Ising model \\[ \\sigma^x = \\begin{pmatrix} 0 & 1 \\\\ 1 & 0 \\end{pmatrix}\\]\n\\[ \\sigma^x_a = \\left( \\otimes_{i=1}^{a-1} I \\right) \\otimes \\left( \\sigma^x \\right) \\otimes \\left(\\otimes_{i=a+1}^{n} I \\right)\\]\nThe ground state of this Hamiltonian corresponds to the optimal solution of the classical combinatorial problem.\nFinding this ground state is generically hard.\n\n\nRealizacja kodu w pythonie\nFunctional programming breaks down an application into a set of functions. Ideally, functions only take inputs and produce outputs and have no internal state that affects the output produced for a given input.\nIn that sense, the QAOA algorithm is a function that solves a problem by optimizeing a set of params. In other words, we aim to find the best values for these params.\nTo decide which params are best, we assess them based on the result we obtain from computeing a (quantum) circuit that uses these params to encode the problem (problem_circuit) and its solution (ansatz_circuit).\nThis is what Qiskit’s description refers to as a variational algorithm.\nIt uses a classical optimization algorithm that makes queries to a quantum computer.\n\ndef qaoa(problem, optimize, assess, compute,\n  to_circuit, problem_circuit, ansatz_circuit):\n\n    return optimize(\n        lambda params: assess(problem, compute(to_circuit(problem, params,\n              problem_circuit, ansatz_circuit)))\n    )\n\n\nfrom qiskit import Aer, execute\n\ndef compute(circuit):\n    return execute(circuit, \n                   Aer.get_backend('qasm_simulator'), \n                   shots=1000).result().get_counts()\n\n\nfrom qiskit import QuantumCircuit\n\ndef to_circuit(problem, params, problem_circuit, ansatz_circuit):\n    \n    cnt_qubits = problem.size\n    \n    qc_qaoa = QuantumCircuit(cnt_qubits)\n\n    # initial_state\n    qc_qaoa.h(range(cnt_qubits))\n    \n    # append problem circuit\n    qc_qaoa.append(problem_circuit(problem, params[0]), range(cnt_qubits))\n    \n    # append ansatz circuit\n    qc_qaoa.append(ansatz_circuit(problem, params[1]), range(cnt_qubits))\n    qc_qaoa.measure_all()\n    \n    return qc_qaoa"
  },
  {
    "objectID": "lectures/wyklad4.html",
    "href": "lectures/wyklad4.html",
    "title": "Kwantowe bramki logiczne w prostych algorytmach i obwodach kwantowych",
    "section": "",
    "text": "Zmianę stanu kwantowego w czasie opisuje Ewolucja kwantowa.\nRozważmy stan układu w chwili \\(t=0\\).\n\\[\\ket{\\psi_{t=0}}\\] W chwili \\(t=1\\) otrzymujemy stan \\(\\ket{\\psi_{t=1}}\\) t. że: \\[\\ket{\\psi_{t=1}} = \\textbf{U} \\, \\ket{\\psi_{t=0}} \\] gdzie \\(\\textbf{U}\\) jest macierzą unitarną.\nPowyższe równanie opisuje zachowanie wszystkich układów kwantowych.\nRozważmy stany bazowe \\(\\ket{0}\\), \\(\\ket{1}\\), które będziemy chcieli zamienic w ich superpozycję. \\[\n\\textbf{U}\\ket{0} = a\\ket{0} + b\\ket{1} = \\begin{bmatrix} a \\\\ b \\end{bmatrix}\n\\] \\[\n\\textbf{U}\\ket{1} = c\\ket{0} + d\\ket{1} = \\begin{bmatrix} c \\\\ d \\end{bmatrix}\n\\]\nKorzystając z tych równań możemy napisac: \\[\n\\textbf{U} = \\left( \\begin{bmatrix} a \\\\ b \\end{bmatrix} \\begin{bmatrix} c \\\\ d \\end{bmatrix}\\right) = \\begin{bmatrix} a \\, \\, b \\\\ c \\,\\, d \\end{bmatrix}\n\\]\nW informatyce macierze unitarne będą realizowały logiczne bramki kwantowe.\n\nDlaczego bramki kwantowe muszą by unitarne?\n\nNorma stanu kwantowego wynosi zawsze 1. Jest to prawdopodobieństwo całkowite sumy stanów bazowych. Prawdopodobieństwo to powinno by zachowane. Co oznacza, że chcemy znaleźc taką transformację, która nie zmienia długości (kwadratu) wektora. Taka transformacja realizowana jest przez obroty.\nWarto zwrócic uwagę na jeszcze jeden fakt. Macierz odwrotna do \\(\\textbf{U}\\) (oznaczana jako \\(\\textbf{U}^{-1}\\)) zawsze istnieje i jest ona równa sprzężeniu Hermitowskiemu macierzu \\(\\textbf{U}=\\textbf{U}^{\\dagger}\\). Dlatego ewolucja stanów kwantowych zawsze jest odwracalna. A to oznacza, że i bramki muszą by operacjami odwracalnymi. \\[\\ket{\\psi_{t=0}} = \\textbf{U}^{\\dagger} \\ket{\\psi_{t=1}} \\]",
    "crumbs": [
      "Sylabus",
      "Wykłady",
      "Kwantowe bramki logiczne w prostych algorytmach i obwodach kwantowych"
    ]
  },
  {
    "objectID": "lectures/wyklad4.html#ewolucja-kwantowa",
    "href": "lectures/wyklad4.html#ewolucja-kwantowa",
    "title": "Kwantowe bramki logiczne w prostych algorytmach i obwodach kwantowych",
    "section": "",
    "text": "Zmianę stanu kwantowego w czasie opisuje Ewolucja kwantowa.\nRozważmy stan układu w chwili \\(t=0\\).\n\\[\\ket{\\psi_{t=0}}\\] W chwili \\(t=1\\) otrzymujemy stan \\(\\ket{\\psi_{t=1}}\\) t. że: \\[\\ket{\\psi_{t=1}} = \\textbf{U} \\, \\ket{\\psi_{t=0}} \\] gdzie \\(\\textbf{U}\\) jest macierzą unitarną.\nPowyższe równanie opisuje zachowanie wszystkich układów kwantowych.\nRozważmy stany bazowe \\(\\ket{0}\\), \\(\\ket{1}\\), które będziemy chcieli zamienic w ich superpozycję. \\[\n\\textbf{U}\\ket{0} = a\\ket{0} + b\\ket{1} = \\begin{bmatrix} a \\\\ b \\end{bmatrix}\n\\] \\[\n\\textbf{U}\\ket{1} = c\\ket{0} + d\\ket{1} = \\begin{bmatrix} c \\\\ d \\end{bmatrix}\n\\]\nKorzystając z tych równań możemy napisac: \\[\n\\textbf{U} = \\left( \\begin{bmatrix} a \\\\ b \\end{bmatrix} \\begin{bmatrix} c \\\\ d \\end{bmatrix}\\right) = \\begin{bmatrix} a \\, \\, b \\\\ c \\,\\, d \\end{bmatrix}\n\\]\nW informatyce macierze unitarne będą realizowały logiczne bramki kwantowe.\n\nDlaczego bramki kwantowe muszą by unitarne?\n\nNorma stanu kwantowego wynosi zawsze 1. Jest to prawdopodobieństwo całkowite sumy stanów bazowych. Prawdopodobieństwo to powinno by zachowane. Co oznacza, że chcemy znaleźc taką transformację, która nie zmienia długości (kwadratu) wektora. Taka transformacja realizowana jest przez obroty.\nWarto zwrócic uwagę na jeszcze jeden fakt. Macierz odwrotna do \\(\\textbf{U}\\) (oznaczana jako \\(\\textbf{U}^{-1}\\)) zawsze istnieje i jest ona równa sprzężeniu Hermitowskiemu macierzu \\(\\textbf{U}=\\textbf{U}^{\\dagger}\\). Dlatego ewolucja stanów kwantowych zawsze jest odwracalna. A to oznacza, że i bramki muszą by operacjami odwracalnymi. \\[\\ket{\\psi_{t=0}} = \\textbf{U}^{\\dagger} \\ket{\\psi_{t=1}} \\]",
    "crumbs": [
      "Sylabus",
      "Wykłady",
      "Kwantowe bramki logiczne w prostych algorytmach i obwodach kwantowych"
    ]
  },
  {
    "objectID": "lectures/wyklad4.html#bramki-jednokubitowe",
    "href": "lectures/wyklad4.html#bramki-jednokubitowe",
    "title": "Kwantowe bramki logiczne w prostych algorytmach i obwodach kwantowych",
    "section": "Bramki jednokubitowe",
    "text": "Bramki jednokubitowe\nSpośród wszystkich bramek kwantowych istnieje kilka, które mają swoje ustalone nazwy. Są one często wykorzystywane w obliczeniach kwatnowych. Rozważmy stan \\[\n\\ket{\\psi} = \\alpha \\ket{0} + \\beta \\ket{1}\n\\]\n\nBramka identycznościowa\n\\[\n\\textbf{I} = \\begin{bmatrix} 1 \\,\\, 0 \\\\ 0 \\,\\, 1 \\end{bmatrix}\n\\]\nZobaczmy jak operator ten działa na stany bazowe: \\[ \\textbf{I} \\ket{0} = \\begin{bmatrix} 1 \\,\\, 0 \\\\ 0 \\,\\, 1 \\end{bmatrix} \\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix} = \\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix} \\]\n\\[ \\textbf{I} \\ket{1} = \\begin{bmatrix} 1 \\,\\, 0 \\\\ 0 \\,\\, 1 \\end{bmatrix} \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix} \\]\nDziałając na stan \\(\\ket{\\psi}\\) otrzymujemy: \\[\n\\textbf{I} \\ket{\\psi} = \\begin{bmatrix} 1 \\,\\, 0 \\\\ 0 \\,\\, 1 \\end{bmatrix} \\ket{\\psi} =  \\textbf{I} \\left( \\alpha \\ket{0} + \\beta \\ket{1} \\right) = \\alpha \\ket{0} + \\beta \\ket{1}\n\\]\n\n\nBramka negacji X (NOT)\n\\[\n\\textbf{X} = \\begin{bmatrix} 0 \\,\\, 1 \\\\ 1 \\,\\, 0 \\end{bmatrix}\n\\]\n\\[\n\\textbf{X} \\ket{0} = \\begin{bmatrix} 0 \\,\\, 1 \\\\ 1\\,\\, 0 \\end{bmatrix} \\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix} = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix} = \\ket{1}\n\\]\n\\[\n\\textbf{X} \\ket{1} = \\begin{bmatrix} 0 \\,\\, 1 \\\\ 1 \\,\\, 0 \\end{bmatrix} \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix} = \\ket{0}\n\\]\nDziałając na stan \\(\\ket{\\psi}\\) otrzymujemy: \\[\n\\textbf{X} \\ket{\\psi} = \\begin{bmatrix} 0 \\,\\, 1 \\\\ 1 \\,\\, 0 \\end{bmatrix} \\ket{\\psi} =  \\textbf{X} \\left( \\alpha \\ket{0} + \\beta \\ket{1} \\right) = \\alpha \\ket{1} + \\beta \\ket{0}\n\\]\n\n\nBramka negacji fazy Y\n\\[\n\\textbf{Y} = \\begin{bmatrix} 0 \\,\\, -i \\\\ i \\,\\,\\,\\,\\,\\,\\, 0 \\end{bmatrix}\n\\]\n\\[\n\\textbf{Y} \\ket{0} = \\begin{bmatrix} 0 \\,\\, -i \\\\ i \\,\\,\\,\\,\\,\\,\\, 0 \\end{bmatrix} \\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix} = i \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix} = i \\ket{1}\n\\]\n\\[\n\\textbf{Y} \\ket{1} = \\begin{bmatrix} 0 \\, -i \\\\ i \\,\\,\\,\\,\\,\\, 0 \\end{bmatrix} \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix} = -i \\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix} = -i \\ket{0}\n\\]\nDziałając na stan \\(\\ket{\\psi}\\) otrzymujemy: \\[\n\\textbf{Y} \\ket{\\psi} = \\begin{bmatrix} 0 \\,\\, -i \\\\ i \\,\\,\\,\\,\\,\\, 0 \\end{bmatrix} \\ket{\\psi} =  \\textbf{Y} \\left( \\alpha \\ket{0} + \\beta \\ket{1} \\right) = \\alpha i \\ket{1} - \\beta i \\ket{0}\n\\]\n\n\nBramka negacji fazy i bitu Z\n\\[\n\\textbf{Z} = \\begin{bmatrix} 1 \\,\\,\\,\\,\\,\\,\\,\\,\\, 0 \\\\ 0\\,\\, -1 \\end{bmatrix}\n\\]\n\\[ \\textbf{Z} \\ket{0} = \\begin{bmatrix} 1\\,\\,\\,\\,\\,\\,\\, 0 \\\\ 0 \\, -1 \\end{bmatrix} \\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix} = \\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix} = 1 \\ket{0} \\]\n\\[ \\textbf{Z} \\ket{1} = \\begin{bmatrix} 1 \\,\\,\\,\\,\\,\\,\\, 0 \\\\ 0 \\, -1 \\end{bmatrix} \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix} = -1 \\ket{1}\\]\nDziałając na stan \\(\\ket{\\psi}\\) otrzymujemy: \\[\n\\textbf{Z} \\ket{\\psi} = \\begin{bmatrix} 0 \\,\\,\\,\\,\\,\\,\\, 1 \\\\ 0 \\, -1 \\end{bmatrix} \\ket{\\psi} =  \\textbf{Z} \\left( \\alpha \\ket{0} + \\beta \\ket{1} \\right) = \\alpha \\ket{0} - \\beta \\ket{1}\n\\]\n\n\nBramka Hadamarda H\n\\[\n\\textbf{H}= \\frac{1}{\\sqrt{2}}\\begin{bmatrix} 1\\,\\,\\,\\,\\,\\,\\, 1 \\\\ 1 \\, -1 \\end{bmatrix}\n\\]\n\\[\n\\textbf{H} \\ket{0} = \\frac{1}{\\sqrt{2}}\\begin{bmatrix} 1\\,\\,\\,\\,\\,\\,\\, 1 \\\\ 1 \\, -1 \\end{bmatrix} \\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix} = \\frac{1}{\\sqrt{2}} \\left( \\ket{0} + \\ket{1} \\right) = \\ket{+}\n\\]\n\\[\n\\textbf{H} \\ket{1} = \\frac{1}{\\sqrt{2}}\\begin{bmatrix} 1\\,\\,\\,\\,\\,\\,\\, 1 \\\\ 1 \\, -1 \\end{bmatrix}  \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix} = \\frac{1}{\\sqrt{2}} \\left( \\ket{0} - \\ket{1} \\right) = \\ket{-}\n\\]\n\n\n\nLosowy bit\nStwórzmy pierwszy kwantowy program, który wykona zadanie niemożliwe do zrealizowania na komputerze klasycznym. Jak można zauważyc zdefiniowaliśmy bramkę Hadamarda. Brami tej nie było w klasycznych bramkach realizujących operacje na bitach.\nNa przestrzeni dziejów informatyki bardzo dużo czasu i wysiłku poświęcono opracowaniu systemu generowania liczb pseudolosowych (ang. PRNG - Pseudo Random Number Generator), który znalazł szerokie zastosowanie. Generowane liczby traktujemy jako pseudolosowe - tzn. jeśli znasz zawartośc pamięci komputera i algorytm PRNG możesz (przynajmniej teoretycznie) przewidzie jaka jest następna wartosc wygenerowanej liczby.\nZgodnie z zasadami fizyki zachwanie kubitu będącego w superpozycji w czasie dokonania pomiaru jest idealne i nieprzewidywalne. Dzięki temu już pojedynczy kubit pozwala wygenerowa najlepszy na świecie generator liczb losowych.\ninstrukcja\n\nPrzygotuj kubit w stanie początkowym \\(\\ket{0}\\).\nZastosuj bramkę Hadamarda tworząc z kubitu stan superpozycji stanów bazowych.\nWykonaj pomiar\n\nWłaśnie otrzymałeś QRNG - Quantum Random Number Generator. Nie jest to tani sposób na losow rzut monetą. Jednak trzeba miec swiadomośc, że tutaj nie ma wewnętrznego mechanizmu, który generuje losowośc - wynika ona tylko i wyłącznie z praw mechaniki kwantowej.\n\nCzy potrafisz wygenerowac losowy bajt?\n\n\n\nGra w obracanie monety\nWykorzystując powyżej zdefiniowane bramki możemy zrealizowa następującą grę:\n\nW grze bierze udział dwóch graczy. Gracze dysponują monetą, której nie widzą w trakcie gry (np. jest zamknięta w pudełku). Natomiast wiedzą, że początkowo moneta ułożona jest orłem do góry (w stanie \\(\\ket{0}\\)) Gra polega na wykonaniu trzech ruchów na przemian. Każdy ruch polega na odwróceniu monety bądź pozostawieniu jej w takim stanie w jakim była. Gracze nie wiedzą jaki ruch wykonuje przeciwnik. Po ostatnim ruchu pudełko zostaje otwarte i gracze sprawdzają w jakiej pozycji jest moneta. Pierwszy gracz wygrywa jeśli moneta jest w pozycji orła, a drugi jeśli przeciwnie.\n\nSzansa wygranej wynosi dla każdego \\(50\\%\\) i jak można sprawdzic nie istnieje strategia wygrywająca.\nPytanie zasadnicze - a co jeśli zamienimy monetę na kubit?\nMożliwe operacje pozostawienia kubitu w takim samym stanie - bramka I, zmiany stanu na przeciwny bramka X. Czyli pierwszy gracz ustala pierwszą bramkę, drugi drugą i ponownie pierwszy trzecią. Otwarcie pudełka to pomiar stanu kubitu.\n\nPrzeanalizuj wynik dla sekwencji I X I\n\nA co jeśli pierwszy gracz wie, że działa na kubicie?\n\nCzy może sprawic on, że wygra zawsze? (skoro wie, że działa na kubicie może użyc innych bramek)",
    "crumbs": [
      "Sylabus",
      "Wykłady",
      "Kwantowe bramki logiczne w prostych algorytmach i obwodach kwantowych"
    ]
  },
  {
    "objectID": "lectures/wyklad4.html#bramki-dwukubitowe",
    "href": "lectures/wyklad4.html#bramki-dwukubitowe",
    "title": "Kwantowe bramki logiczne w prostych algorytmach i obwodach kwantowych",
    "section": "Bramki dwukubitowe",
    "text": "Bramki dwukubitowe\nAnalogicznie do bramek jednokubitowych reprezentowanych przez macierze unitarne \\(2\\times 2\\) możemy skonstruowac dowolną wielo-kubitową bramkę. Dla n kubitów mamy \\(2^n \\times 2^n\\) unitarną macierz reprezentującą taką bramkę. Ponieważ bramki wielo kubiotwe działają na raz na kilka kubitów mogą służyc one do otrzymywania stanów splątanych. Mamy również możliwośc stworzyc bramkę warunkową (kontrolowaną), która zmienia bit docelowy jeśli kontrolny bit jest w stanie \\(\\ket{1}\\).\nW ogólności taka bramka może zostac zapisana jako: \\[\n\\textbf{CU}= \\ket{0}\\bra{0} \\otimes \\textbf{I} + \\ket{1}\\bra{1} \\otimes \\textbf{\\textbf{U}}\n\\]\nDowolna bramka działajaca na 1 kubit może byc przedstawiona jako mecierz \\[\n\\textbf{U} = \\begin{bmatrix} u_{00} \\, u_{01} \\\\ u_{10}\\, u_{11} \\end{bmatrix}\n\\]\ndlatego:\n\\[\n\\textbf{CU}=  \\begin{bmatrix} 1 \\,\\, \\,\\,\\, 0 \\,\\,\\,\\,\\, 0 \\,\\,\\,\\,\\, 0 \\\\\n0\\,\\, \\,\\,\\, 1 \\,\\,\\,\\,\\, 0 \\,\\,\\,\\,\\, 0 \\\\\n0\\,\\,\\,\\, 0\\,\\,\\,  u_{00} \\,\\, u_{01} \\\\ 0\\,\\,\\,\\, 0\\,\\,\\, u_{10}\\, \\, u_{11} \\end{bmatrix}\n\\]\nSzczegółowe działanie bramki można zapisac jako:\n\\[\\begin{align*}\n\\textbf{CU} \\ket{0} \\otimes \\ket{0} &=&  \\ket{0} \\otimes \\ket{0} \\\\\n\\textbf{CU} \\ket{0} \\otimes \\ket{1} &=& \\ket{0}\\otimes \\ket{1} \\\\\n\\textbf{CU} \\ket{1}\\otimes \\ket{0} &=& \\ket{1}\\otimes \\textbf{U} \\ket{0} \\\\\n\\textbf{CU} \\ket{1}\\otimes \\ket{1} &=& \\ket{1}\\otimes \\textbf{U} \\ket{1} \\\\\n\\end{align*}\\]\nDla kwantowej bramki NOT \\(\\textbf{U}= X\\) \\[\n\\text{CNOT} = \\begin{bmatrix} 1 \\,\\, \\,\\,\\, 0 \\,\\,\\,\\,\\, 0 \\,\\,\\,\\,\\, 0 \\\\\n0\\,\\, \\,\\,\\, 1 \\,\\,\\,\\,\\, 0 \\,\\,\\,\\,\\, 0 \\\\\n0\\,\\,\\,\\,\\, 0\\,\\,\\,\\,\\,  0 \\,\\,\\,\\,\\, 1 \\\\ 0\\,\\,\\,\\,\\, 0\\,\\,\\,\\,\\, 1\\,\\,\\,\\,\\, 0 \\end{bmatrix}\n\\] Bramka ta do drugiego kubitu (targetu) stosuje bramkę X jeśli pierwszy kubit jest w pozycji \\(\\ket{1}\\). W przeciwnym wypadku nie zmienia się nic.\n\\[\\begin{align*}\n\\textbf{CNOT} \\ket{0} \\otimes \\ket{0} &=&  \\ket{0} \\otimes \\ket{0} \\\\\n\\textbf{CNOT} \\ket{0} \\otimes \\ket{1} &=& \\ket{0}\\otimes \\ket{1} \\\\\n\\textbf{CNOT} \\ket{1}\\otimes \\ket{0} &=& \\ket{1}\\otimes \\ket{1} \\\\\n\\textbf{CNOT} \\ket{1}\\otimes \\ket{1} &=& \\ket{1}\\otimes \\ket{0} \\\\\n\\end{align*}\\]\n\nRozpoczynajac od stanu \\(\\ket{0} \\otimes \\ket{0}\\) zadziałaj na pierwszy kubit bramka Hadamarda a na tak otrzymany stan zadziałaj CNOT. Jaki stan uzyskujemy?",
    "crumbs": [
      "Sylabus",
      "Wykłady",
      "Kwantowe bramki logiczne w prostych algorytmach i obwodach kwantowych"
    ]
  },
  {
    "objectID": "lectures/wyklad3.html",
    "href": "lectures/wyklad3.html",
    "title": "Przestrzenie wektorowe, stany kwantowe, reprezentacja klasycznych i kwantowych bitów",
    "section": "",
    "text": "\\[\n\\newcommand{\\bra}[1]{\\left \\langle #1 \\right \\rvert}\n\\newcommand{\\ket}[1]{\\left \\rvert #1 \\right \\rangle}\n\\newcommand{\\braket}[2]{\\left \\langle #1 \\middle \\rvert #2 \\right \\rangle}\n\\]\nMechanika Kwantowa opiera się na algebrze liniowej. W ogólności teoria ta posługuje się pojęciem nieskończenie wymiarowej przestrzeni liniowej. Na szczęście do opisu kubitów (2-dim) i układów kwantowych (\\(2^{n}\\)-dim) wystarczy nam pojęcie skończenie wymiarowej przestrzeni wektorowej. Bardzo upraszcza nam to naukę o kwantowym uczeniu maszynowym, gdyż wiele problemów matematycznych (dla fizyków) tutaj nie występuje. Upraszcza to również ilość potrzebnych matematycznych pojęć.\nBędziemy posługiwali się notacją Diraca, jednego z twórców mechaniki kwantowej. W książce Ch. Bernhardta “Obliczenia kwantowe dla każdego” autor rezygnuje z liczb zespolonych, na rzecz liczb rzeczywistych. O ile podejście takie sprawdza się na poziomie opisu o tyle dla pełnego zrozumienia posługiwanie się liczbami zespolonymi jest niezbędne.",
    "crumbs": [
      "Sylabus",
      "Wykłady",
      "Przestrzenie wektorowe, stany kwantowe, reprezentacja klasycznych i kwantowych bitów"
    ]
  },
  {
    "objectID": "lectures/wyklad3.html#liczby-rzeczywiste-i-zespolone---przypomnienie",
    "href": "lectures/wyklad3.html#liczby-rzeczywiste-i-zespolone---przypomnienie",
    "title": "Przestrzenie wektorowe, stany kwantowe, reprezentacja klasycznych i kwantowych bitów",
    "section": "Liczby rzeczywiste i zespolone - przypomnienie",
    "text": "Liczby rzeczywiste i zespolone - przypomnienie\nLiczby to matematyczne, abstrakcyjne pojęcia wywodzące się z teorii mnogości (zbiorów). Przykładowo, liczbę 42 można zapisa w postaci dziesiętnej lub binarnej \\(42=101010_2\\). Możemy znaleźć 42 przedmioty i je przeliczyć, ale w naszym przypadku skupimy się na abstrakcyjnym pojęciu liczby, niezależnie od jej reprezentacji. Liczba 42 jest liczbą naturalną. Zbiór liczb naturalnych oznaczamy jako \\(\\mathbb{N}\\). Identyczne cechy abstrakcji mają liczby całkowite \\(\\mathbb{Z}\\), liczby wymierne \\(\\mathbb{Q}\\), liczby rzeczywiste \\(\\mathbb{R}\\) oraz liczby zespolone \\(\\mathbb{C}\\). Nie możemy zobaczyć ani dotknąć liczb, ale możemy wykonywać na nich operacje matematyczne. Liczb Warto zaznaczyc,że liczby zespolone nie są bardziej abstrakcyjne niż liczby rzeczywiste, czy naturalne.\nLiczba zespolona (we współrzędnych Kartezjańskich) składa się z (dwóch liczb rzeczywistych) części rzeczywistej i urojonej: \\[z=x + i y\\] gdzie \\(i^2=-1\\).\nNatomiast częśc rzeczywista \\(R(z)=x\\) i częśc urojona \\(I(z)=y\\).\nNa przykład: \\[1+i\\sqrt{3}\\] \\(R(z)=1\\) i \\(I(z)=\\sqrt{3}\\).\nInaczej mówiąc, liczba zespolona jest sumą liczby rzeczywistej i urojonej.\nLiczy zespolone, można traktowac jako punkty na płaszczyźnie o współrzędnych \\(x\\) i \\(y\\).\n\nKażdą liczbę zespoloną możemy zapisać w postaci polarnej (współrzędne biegunowe) \\[ z=r\\, e^{i \\phi} , \\] gdzie \\(r=|z|\\) to moduł liczby zespolonej, a \\(\\phi\\) to jej argument czyli wyrażony w radianach kąt między osią rzeczywistą a półprostą poprowadzoną od środka ukł. wsp. i przechodzącą przez punkt \\(z\\). \\[ z = r\\, e^{i \\, \\phi} = r\\, (\\cos{\\phi} + i\\, \\sin{\\phi})\\] gdzie: \\[r = |z| = \\sqrt{x^2 + y^2}\\] \\[\\phi = \\arctan{\\frac{y}{x}}. \\] Natomiast: \\[x = r \\cos{\\phi}\\] \\[y = r \\sin{\\phi}\\]\nDla naszego przykładu: \\[1+i\\sqrt{3} = 2 e^{i \\frac{\\pi}{3}} . \\]\n\nUdowodnij samodzielnie, że powyższe równanie jest prawdziwe.\n\nLiczby zespolone można dodawa, mnożyc i dzieli zgodnie z zwykłymi regułami arytmetyki. Dodawanie liczb zespolonych jest łatwe dla liczb w postaci kartezjańskiej. Natomiast mnożenie liczb zespolonych upraszcza się dla postaci biegunowej (następuje zamiana mnożenia na dodawanie fazy).\nLiczba sprzężona do liczby zespolonej powstaje poprzez zmianę znaku części urojonej\n\\(z=x + i\\, y\\,\\,\\,\\,\\) to \\(\\,\\,\\,z^*=x - i y = r*e^{-i \\phi}\\).\nNorma liczby zespolonej \\(z=x + i y\\,\\,\\,\\,\\) to \\(\\,\\,\\,|z|=\\sqrt{x^2 + y^2}=r\\).\nKwadrat normy liczby zespolonej \\(z=x + i y\\,\\,\\,\\,\\) to \\(\\,\\,\\, |z|^2=x^2 + y^2=r^2\\). Warto zauważyc, że każdy kwadrat modułu daje w wyniku nieujemną liczbę rzeczywistą.\nMożna go również zapisać jako \\[|z|^2=z z^* = z^* z\\]\nCzynniki fazowe to szczególna klasa liczb zespolonych \\(z\\) dla której \\(r=1\\).\nOtrzymujemy wtedy: \\[\nz=e^{i \\phi}=\\cos{\\phi} + i\\, \\sin{\\phi}\\] \\[\nz z^* = 1\n\\]\n\nUdowodnij w kartezjańskim i polarnym układzie oniesienia.\n\n\nile wynosi \\(z_1 z_2\\)\n\n\nile wynosi \\(\\frac{z_1}{z_2}\\)",
    "crumbs": [
      "Sylabus",
      "Wykłady",
      "Przestrzenie wektorowe, stany kwantowe, reprezentacja klasycznych i kwantowych bitów"
    ]
  },
  {
    "objectID": "lectures/wyklad3.html#wektory-i-przestrzenie-wektorowe",
    "href": "lectures/wyklad3.html#wektory-i-przestrzenie-wektorowe",
    "title": "Przestrzenie wektorowe, stany kwantowe, reprezentacja klasycznych i kwantowych bitów",
    "section": "Wektory i przestrzenie wektorowe",
    "text": "Wektory i przestrzenie wektorowe\nNiech dany będzie zbiór \\(\\mathbb{V}\\) oraz zbiór \\(\\mathbb{K}\\). Elementy zbioru \\(\\mathbb{V}\\) można ze sobą dodawać i mnożyć przez elementy zbioru \\(\\mathbb{K}\\). Wraz z dodatkowymi opracjami (zdefiniowanymi poniżej) zbiór ten będziemy nazwywali przestrzenią wektorową. Jej elementy to wektory ket \\(\\ket{u}\\) (lub kety).\nJeśli współczynniki liczbowe wektorów będą rzeczywiste to będziemy mówić o przestrzeni wektorowej rzeczywistej. Natomiast jeśli liczby te będą zespolone to będziemy mówić o przestrzeni wektorowej zespolonej.\nMyśląc o wektorach często wyobrażamy je sobie jako strzałki w przestrzeni. Przez strzałki rozumiemy tutaj obiekty znajdujące się w zwykłej przestrzeni i posiadające wielkoś oraz kierunek. Wektory takie mają trzy składowe - trzy (rzeczywiste) współrzędne przestrzenne.\nNa tych zajęciach lepiej zapomniec o tej koncepcji. Wszystkie wektory będą reprezentowane jako abstrakcyjne elementy przestrzeni wektorowej. Warto jednak pamiętać, że wszystkie własności (algebraiczne) wektorów są również spełnione dla strzałek.\n\nAksjomaty przestrzeni stanów\nNiech \\(\\ket{v}\\) , \\(\\ket{u}\\), \\(\\ket{z}\\) będą dowolnymi wektorami, natomiast \\(\\alpha\\) i \\(\\beta\\) dowolnymi liczbami.\n\nSuma dwóch wektorów ket jest wektorem ket \\[\\ket{v} + \\ket{u} = \\ket{z}\\]\nDodawanie wektorów jest przemienne: \\[\\ket{v} + \\ket{u} = \\ket{u} + \\ket{v}\\]\nDodawanie wektorów jest łączne: \\[\\ket{v} + (\\ket{u} + \\ket{z}) = (\\ket{v} + \\ket{u}) + \\ket{z}\\]\nIstnieje szczególny (i jedyny) wektor \\(\\ket{v}\\) odwrotny do wektora \\(\\ket{u}\\): \\[\\ket{v} + \\ket{u} = 0\\]\nIstnieje szczególny (i jedyny) wektor \\(0\\) zerowy. Dla każdego wektora \\(\\ket{v}\\) zachodzi: \\[\\ket{v} + 0 = 0 + \\ket{v} = \\ket{v}\\]\n1*wektor = wektor: \\[1 \\ket{v} = \\ket{v}\\]\nŁączność mnożenia przez skalar: \\[\\alpha (\\beta \\ket{v}) = (\\alpha \\beta) \\ket{v}\\]\nRozdzielność mnożenia przez skalar względem dodawania wektorów: \\[\\alpha (\\ket{v} + \\ket{u}) = \\alpha \\ket{v} + \\alpha \\ket{u}\\]\nRozdzielność dodawania skalarów względem mnożenia przez wektor: \\[(\\alpha + \\beta) \\ket{v} = \\alpha \\ket{v} + \\beta \\ket{v}\\]\n\n\n\nWektory kolumnowe\nZapiszmy pionową jednokolumnową tablicę liczb: \\[ \\begin{bmatrix} x_1 \\\\ x_2 \\\\ .\\\\ x_n \\end{bmatrix} \\]\nMnożenie przez liczbę: \\[ \\alpha \\begin{bmatrix} x_1 \\\\ x_2 \\\\ .\\\\ x_n \\end{bmatrix} = \\begin{bmatrix} \\alpha x_1 \\\\ \\alpha x_2 \\\\ .\\\\ \\alpha x_n \\end{bmatrix} \\]\nDodawanie kolumn: \\[ \\begin{bmatrix} x_1 \\\\ x_2 \\\\ .\\\\ x_n \\end{bmatrix} + \\begin{bmatrix} y_1 \\\\ y_2 \\\\ .\\\\ y_n \\end{bmatrix} = \\begin{bmatrix} x_1+y_1 \\\\ x_2+y_2 \\\\ .\\\\ x_n+y_n \\end{bmatrix}\\]\nPozwala to otrzymać konkretną reprezentację wektorów, które będziemy oznaczać w notacji Diraca przez “ket” \\(\\ket{.}\\).\n\n\nWektory wierszowe\n\\[ \\begin{bmatrix} x_1 \\,\\, x_2 \\,\\, \\dots \\,\\, x_n \\end{bmatrix}\\]\nAnalogicznie do poprzedniego przykładu łatwo określić jak dodawać je ze sobą i mnożyć przez liczbę. W notacji Diraca będziemy takie wektory oznaczali przez “bra” \\(\\bra{.}\\).\n\n\nTranspozycja i sprzężenie Hermitowskie.\nTranspozycja \\(T\\) Zamienia wektory wierszowe na kolumnowe i odwrotnie.\n\\[ \\begin{bmatrix} x_1 \\\\ x_2 \\\\ .\\\\ x_n \\end{bmatrix}^{T} = \\begin{bmatrix} x_1 \\,\\, x_2 \\,\\, \\dots \\,\\, x_n \\end{bmatrix}\\]\noraz \\[ \\begin{bmatrix} x_1 \\,\\, x_2 \\,\\, \\dots \\,\\, x_n \\end{bmatrix}^{T} = \\begin{bmatrix} x_1 \\\\ x_2 \\\\ .\\\\ x_n \\end{bmatrix}\\]\nNatomiast sprzężenie hermitowskie \\(\\dagger = T \\ast\\) dodatkowo do transpozycji dodaje sprzężenie zespolone.\n\\[\\ket{u}^{\\dagger} = \\bra{u}\\] \\[\\bra{u}^{\\dagger} = \\ket{u}\\]\nCzyli: \\[ (\\ket{u} + \\ket{v})^{\\dagger} = \\bra{u} + \\bra{v} \\] oraz \\[ \\alpha \\ket{u} \\to \\bra{u} \\alpha^*\\]\n\\[ \\begin{bmatrix} x_1 \\\\ x_2 \\\\ .\\\\ x_n \\end{bmatrix}^{\\dagger} = \\begin{bmatrix} x_1^* \\,\\, x_2^* \\,\\, \\dots \\,\\, x_n^* \\end{bmatrix}\\]\noraz \\[ \\begin{bmatrix} x_1 \\,\\, x_2 \\,\\, \\dots \\,\\, x_n \\end{bmatrix}^{\\dagger} = \\begin{bmatrix} x_1^* \\\\ x_2^* \\\\ .\\\\ x_n^* \\end{bmatrix}\\]\n\n\nIloczyn skalarny\nIloczynem skalarnym dwóch wektorów \\(\\ket{u}\\) i \\(\\ket{v}\\) nazywany funkcję, która zwraca liczbę.\n\n\\(\\braket{u}{v} = \\braket{v}{u}^{\\ast}\\)\n\\((\\alpha \\bra{u})\\ket{v} = \\alpha \\braket{u}{v}\\)\n\\((\\bra{u} + \\bra{v}) \\ket{z} = \\braket{u}{z} +\\braket{v}{z}\\)\n\\(\\braket{u}{u} &gt; 0\\)\n\\(\\braket{u}{u} = 0, gdy \\ket{u}=\\ket{0}\\)\n\nDla dwóch wektorów \\(\\ket{u}\\) i \\(\\ket{v}\\) otrzymujemy: \\[ \\ket{u} = \\begin{bmatrix} x_1 \\\\ x_2 \\\\ .\\\\ x_n \\end{bmatrix}, \\ket{v} = \\begin{bmatrix} y_1 \\\\ y_2 \\\\ .\\\\ y_n \\end{bmatrix} \\]\n\\[ \\braket{u}{v} = x_1^{*}y_1 +x_2^{*}y_2 + \\dots + x_n^{*}y_n\\]\n\nZadanie - Udowodnij, że \\(\\braket{u}{u}\\) jest liczbą rzeczywistą.\n\nwektor znormalizowany \\(\\braket{u}{u}=1\\)\nwektory ortogonalne \\(\\braket{u}{v}=0\\)\n\n\nKombinacja liniowa wektorów\nDla dwóch wektorów \\(\\ket{u}\\) i \\(\\ket{v}\\) oraz dwóch liczb \\(\\alpha\\), \\(\\beta\\) możemy stworzyć nowy wektor: \\[\\ket{z} = \\alpha \\ket{u} + \\beta \\ket{v}\\] Wektor ten nazywamy kombinacją liniową wektorów \\(\\ket{u}\\) i \\(\\ket{v}\\) o współczynnikach \\(\\alpha\\) i \\(\\beta\\).\n\n\nBaza\nKażda przestrzeń wektorowa ma bazę.\nDowolny wektor można zapisa jako kombinację liniową wektorów bazowych.\nInteresowac będzie nas baza (obliczeniowa) dla której:\n\\[ \\braket{e_i}{e_i}=1 \\,\\, \\braket{e_i}{e_j}=0 \\,\\, \\text{dla i} \\neq j \\] gdzie \\(i,\\,j = 1,2,\\dots, n\\).\nDowolny wektor \\(\\ket{u}\\) możemy zapisa jako: \\[ \\ket{u} = \\braket{e_1}{u}\\ket{e_1} + \\braket{e_2}{u}\\ket{e_2} + ... + \\braket{e_n}{u}\\ket{e_n}  \\]\nWarto zauważyc: \\[\\braket{e_1}{u}= x_1\\] \\[\\ket{u} = \\sum_{i=1}^{n} \\ket{i}\\bra{i} \\ket{u}\\]",
    "crumbs": [
      "Sylabus",
      "Wykłady",
      "Przestrzenie wektorowe, stany kwantowe, reprezentacja klasycznych i kwantowych bitów"
    ]
  },
  {
    "objectID": "lectures/wyklad3.html#formalizm-matematyczny-obliczeń-kwantowych",
    "href": "lectures/wyklad3.html#formalizm-matematyczny-obliczeń-kwantowych",
    "title": "Przestrzenie wektorowe, stany kwantowe, reprezentacja klasycznych i kwantowych bitów",
    "section": "Formalizm matematyczny obliczeń kwantowych",
    "text": "Formalizm matematyczny obliczeń kwantowych\nTa wiedza wystarczy do wyjaśnienia notacji Diraca.\nIloczyn skalarny \\(\\braket{\\psi}{\\phi}\\) wektorów \\(\\ket{\\psi}\\) i \\(\\ket{\\phi}\\) czytamy jako braket u v.\n\nStan\nW fizyce klasycznej znajomość stanu układu oznacza, iż wiemy wszystko co jest potrzebne\nStanem w mechanice kwantowej nazywamy wektor:\n\\[\\ket{\\psi} = x_0 \\ket{0} + x_1 \\ket{1} + \\dots x_{n-1} \\ket{n-1}\\]\nChcemy aby współczynniki \\(x_i\\) były liczbami zespolonymi a cały wektor był unormowany do 1.\nLiczby \\(x_i\\) nazywamy amplitudami prawdopodobieństwa stanu kwantowego. Jeśli przynajmniej dwie liczby \\(x_i\\) są niezerowe, to układ znajduje się w superpozycji stanów.\n\n\nKubit\nElementarnym obiektem w informatyce kwantowej jest kubit, który realizowany jest jako dwu wymiarowy układ kwantowy. Stan kwantowy kubitu opisuje wektor w przestrzeni liniowej \\(\\mathbb{C}^2\\).\nW celu wykonywania obliczeń i opisu stanu kubitu wybierzemy tzw. bazę obliczeniową: \\[\\ket{0} = \\begin{bmatrix} 1 \\\\ 0  \\end{bmatrix} , \\ket{1} = \\begin{bmatrix} 0 \\\\ 1  \\end{bmatrix}\\]\nTo co wyróżnia kubit w porównaniu do klasycznego bitu dowolny stan \\(\\ket{\\psi}\\) może być superpozycją stanów bazowych: \\[\n\\ket{\\psi} = \\alpha \\ket{0} + \\beta \\ket{1} = \\alpha \\begin{bmatrix} 1 \\\\ 0\\end{bmatrix} + \\beta \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} \\alpha \\\\ \\beta \\end{bmatrix}\n\\] dla którego zachodzi warunek normalizacji: \\[\n\\braket{\\psi}{\\psi} = |\\alpha|^2 + |\\beta|^2 = 1\n\\] gdzie \\(\\alpha, \\beta \\in \\mathbb{C}\\).\n\nZADANIE - oblicz \\(\\braket{\\psi}{\\psi}\\).\n\nLiczby \\(\\alpha\\) i \\(\\beta\\) nazywamy amplitudami prawdopodobieństwa. Są one reprezentowane przez liczby zespolone. Potrzeba 4 liczb rzeczywistych aby je opisać. Ze względu na warunek normalizacji jedną liczbę można obliczyc co oznacza potrzebę użycia już tylko trzech liczb rzeczywiste.\nStan kubitu możemy zapisać w postaci: \\[\n\\ket{\\psi} = e^{i \\gamma}\\left( \\cos{\\frac{\\phi}{2}} \\ket{0} + e^{i \\theta} \\sin{\\frac{\\phi}{2}} \\ket{1} \\right)\n\\] gdzie \\(\\phi \\in [0, \\pi]\\), \\(\\theta \\in [0, 2\\pi]\\) i \\(\\gamma \\in [0, 2\\pi]\\) są liczbami rzeczywistymi.\nWspółczynnik \\(e^{i \\gamma}\\) nazywamy fazą globalną. Ze względu, iż analizować będziemy kwadraty amplitud prawdopodobieństwa to faza globalna nie ma znaczenia. Dlatego możemy napisać: \\[\n\\ket{\\psi} = \\cos{\\frac{\\phi}{2}} \\ket{0} + e^{i \\theta} \\sin{\\frac{\\phi}{2}} \\ket{1}\n= \\begin{bmatrix} \\cos{\\frac{\\phi}{2}} \\\\ e^{i \\theta} \\sin{\\frac{\\phi}{2}} \\end{bmatrix}\n\\]\nWarto zauważyć, że dwa dowolne stany kubitów \\(\\ket{\\psi}\\) i \\(\\ket{\\phi}\\) różnią się o czynnik fazowy \\(e^{i \\gamma}\\) to stany te dają identyczne wyniki.\nLiczby rzeczywiste \\(\\phi\\) i \\(\\theta\\) nazywamy kątami kubitu i możemy interpretować je jako współrzędne na sferze Blocha. Bardzo często będziemy wykorzystywać ją do wizualizacji stanów kubitów.\nStany w bazie obliczeniowej, którymi często będziemy operowac: \\[\\ket{+} = \\frac{1}{\\sqrt{2}}(\\ket{0} + \\ket{1})\\] \\[\\ket{-} = \\frac{1}{\\sqrt{2}}(\\ket{0} - \\ket{1})\\] \\[\\ket{i} =\\frac{1}{\\sqrt{2}}(\\ket{0} + i \\ket{1})\\] \\[\\ket{-i} =\\frac{1}{\\sqrt{2}}(\\ket{0} - i \\ket{1})\\]\nLub: \\[\\frac{1}{\\sqrt{2}}(\\ket{0} + e^{i\\pi/6} \\ket{1})\\] \\[\\frac{\\sqrt{3}}{2}(\\ket{0} + \\frac{1}{2} \\ket{1})\\]\n\nKubit może by dowolnym punktem na sferze Blocha.\n\n\n\nDwa kubity\nZłączenie układu dwóch kubitów realizowane jest przez iloczyn tensorowy (iloczyn Kroneckera).\nRozważmy dwa stany kubitów \\(\\ket{\\psi}\\), \\(\\ket{\\phi}\\)\n\\[\n\\ket{\\psi} = \\alpha \\ket{0} + \\beta \\ket{1} = \\begin{bmatrix} \\alpha \\\\ \\beta \\end{bmatrix}\\, ,\\,\\,\n\\ket{\\phi} = \\gamma \\ket{0} + \\delta \\ket{1} = \\begin{bmatrix} \\gamma \\\\ \\delta \\end{bmatrix}\n\\]\nStan dwukubitowy: \\[\n\\ket{\\psi} \\otimes \\ket{\\phi} = \\begin{bmatrix} \\alpha \\gamma \\\\ \\alpha \\delta \\\\ \\beta \\gamma \\\\ \\beta \\delta \\end{bmatrix} = \\alpha \\gamma \\ket{0} \\otimes \\ket{0} + \\beta \\delta \\ket{1} \\otimes \\ket{0}  + \\alpha \\delta \\ket{0} \\otimes \\ket{1}  + \\beta \\delta \\ket{1} \\otimes \\ket{1}\n\\] co możemy zapisa jako: \\[\n\\ket{\\psi \\phi} = \\alpha \\gamma \\ket{00} + \\beta \\delta \\ket{10}  + \\alpha \\delta \\ket{01}  + \\beta \\delta \\ket{11}\n\\] gdzie: \\[\n\\ket{00} = \\begin{bmatrix} 1 \\\\ 0 \\\\ 0 \\\\ 0 \\end{bmatrix}, \\, \\,\n\\ket{01} = \\begin{bmatrix} 0 \\\\ 1 \\\\ 0 \\\\ 0 \\end{bmatrix}, \\, \\,\n\\ket{10} = \\begin{bmatrix} 0 \\\\ 0 \\\\ 1 \\\\ 0 \\end{bmatrix}, \\, \\,\n\\ket{11} = \\begin{bmatrix} 0 \\\\ 0 \\\\ 0 \\\\ 1 \\end{bmatrix}\n\\]\nPo przenumerowaniu stanów możemy napisac: \\[\n\\ket{\\Phi} = c_0 \\ket{0} + c_1 \\ket{1}  + c_2 \\ket{2}  + c_3 \\ket{3}\n\\] dla którego: \\[\n|c_0|^2 + |c_1|^2 + |c_2|^2 + |c_3|^2 = 1\n\\]\n\n\nStan separowalny i splątany\nJeżeli istnieją stany \\(\\ket{\\phi_1}\\) i \\(\\ket{\\phi_2}\\) takie, że \\[\\ket{\\psi} = \\ket{\\phi_1} \\otimes \\ket{\\phi_2}\\] to stan nazywamy separowalny.\nZobaczmy, czy istnieje przypadek w którym stan układu dwóch kubitów nie da się zaprezentowac jako iloczynu tensorowego podukładów. Aby to sprawdzic zobaczmy czy istnieją takie liczby \\(c_0, c_1, c_2, c_3\\) dla których nie da się znaleźc \\(\\alpha, \\beta,\\gamma, \\delta\\), które spełniają układ równań: \\[c_0 = \\alpha \\gamma , \\, c_1 = \\alpha \\delta , \\, c_2 = \\beta \\gamma , \\, c_3 = \\beta \\delta \\]\nRozważmy stan \\[\\ket{bell} = \\frac{1}{\\sqrt{2}}(\\ket{0}+\\ket{3}) = \\frac{1}{\\sqrt{2}}(\\ket{00}+\\ket{11})\\]\nZałóżmy, że możemy zapisa stan bell w postaci: \\[ \\alpha \\gamma \\ket{0} + \\beta \\delta \\ket{1}  + \\alpha \\delta \\ket{2}  + \\beta \\delta \\ket{3} \\]\nAby stan bell był separowalny musi by spełniony układ równań:\n\\[\\begin{eqnarray}\n\\alpha \\gamma = \\frac{1}{\\sqrt{2}} \\\\ \\alpha \\delta = 0 \\\\ \\beta \\gamma = 0 \\\\ \\beta \\delta =\\frac{1}{\\sqrt{2}}\n\\end{eqnarray}\\]\nZ warunku drugiego mamy dwie możliwości: albo \\(\\alpha=0\\) lub \\(\\delta=0\\). Jeżeli \\(\\alpha=0\\) to warunek pierwszy nie może byc spełniony. Jeżeli \\(\\delta=0\\) to warunek czwarty nie może byc spełniony. Otrzymujemy sprzecznośc.\nProwadzi to do wniosu, że stan bell'a nie jest stanem separowalnym i jest stanem splątanym. Stany te mają bardzo nieintuicyjne własności. Związany jest z nimi słynny paradox EPR oraz tak zwane nierówności Bella.\n\nSplątane stany Bell’a, wraz z zasadą superpozycji będą podstawowymi kwantowymi własnościami pozwalającymi zrealizowac przewagę obliczeń kwantowych nad obliczeniami klasycznymi.",
    "crumbs": [
      "Sylabus",
      "Wykłady",
      "Przestrzenie wektorowe, stany kwantowe, reprezentacja klasycznych i kwantowych bitów"
    ]
  },
  {
    "objectID": "lectures/wyklad3.html#pomiar-w-bazie-z",
    "href": "lectures/wyklad3.html#pomiar-w-bazie-z",
    "title": "Przestrzenie wektorowe, stany kwantowe, reprezentacja klasycznych i kwantowych bitów",
    "section": "Pomiar w bazie Z",
    "text": "Pomiar w bazie Z\nW opisie kubitów wybraliśmy specyficzą bazę (obliczeniową) wektorów, która rozkłada każdy wektor na kombinację wektora \\(\\ket{0}\\) i \\(\\ket{1}\\).\nZasady przestrzeni wektorowej i mechaniki kwantowej dopuszczają tworzenie kombinacji liniowej (superpozycji) dla tych dwóch stanów. \\[\n\\ket{\\psi} = \\alpha \\ket{0} + \\beta \\ket{1}\n\\] Po pomiarze kubitu, czyli na końcu procesu obliczeniowego, ze względu na prawa fizyki otrzymujemy tylko i wyłącznie jeden ze stanów bazowych \\(\\ket{0}\\) lub \\(\\ket{1}\\). Każdy następny pomiar (tej samej obserwabli) będzie kończyc się w tym samym (otrzymanym) stanie.\n\nPomiar niszczy superpozycję kubitu i sprowadza go do jednego ze stanów bazowych.\n\nDla kubitu w superpozycji stanów bazowych jedyne co możemy określic to prawdopodobieństwo otrzymania stanu \\(\\ket{0}\\) i \\(\\ket{1}\\).\n\nPrawdopodobieństwo określone jest jako kwadrat (modułu) amplitudy Dla stanu \\(\\ket{0}\\) \\(P(0) = |\\alpha|^2\\) oraz dla stanu \\(\\ket{1}\\) \\(P(1)= |\\beta|^2\\).\n\nIstnieje możliwośc pomiaru kubitów w innych bazach. Jednak w większości przypadków ograniczymy się do pomiaru w bazie obliczeniowej.\n\nPrzykład\nRozważmy stan \\[\\ket{\\psi} = \\frac{\\sqrt{3}}{2}\\ket{0}+\\frac{1}{2}\\ket{1}\\]\nMożliwe wyniki pomiaru w bazie Z \\(\\{ \\ket{0},\\ket{1} \\}\\).\n\\[\n\\braket{0}{\\psi} = \\bra{0}\\left( \\frac{\\sqrt{3}}{2}\\ket{0} +\\frac{1}{2}\\ket{1}\\right) = \\frac{\\sqrt{3}}{2}\\braket{0}{0} + \\frac{1}{2}\\braket{0}{1} = \\frac{\\sqrt{3}}{2}\n\\] Biorąc kwadrat apmlitudy otrzymujemy kubit w stanie \\(\\ket{0}\\) z prawdopodobieństwem \\(0.75\\). \\[\n\\braket{1}{\\psi} = \\bra{1}\\left( \\frac{\\sqrt{3}}{2}\\ket{0} +\\frac{1}{2}\\ket{1}\\right) = \\frac{\\sqrt{3}}{2}\\braket{1}{0} + \\frac{1}{2}\\braket{1}{1} = \\frac{1}{2}\n\\] Biorąc kwadrat apmlitudy otrzymujemy stan \\(\\ket{1}\\) z prawdopodobieństwem \\(0.25\\).\n\\[\\ket{\\psi} = \\braket{0}{\\psi}\\ket{0} + \\braket{1}{\\psi}\\ket{1}\\]\nDowolna para liniowo niezależnych wektorów jednostkowych \\(\\ket{u}\\) i \\(\\ket{v}\\) pochodząca z dwuwymiarowej przestrzeni wektorowej może tworzyc bazę: \\[\n\\alpha \\ket{0} +\\beta \\ket{1} = \\alpha' \\ket{u} +\\beta' \\ket{v}\n\\] Przykładem może byc tzw Baza Hadamarda \\(\\ket{+}\\) i \\(\\ket{-}\\) zdefiniowana jako: \\[\n\\ket{+} = \\frac{1}{\\sqrt{2}}(\\ket{0}+\\ket{1}) = \\begin{bmatrix} \\frac{1}{\\sqrt{2}} \\\\ \\frac{1}{\\sqrt{2}} \\end{bmatrix}\n\\] \\[\n\\ket{-} = \\frac{1}{\\sqrt{2}}(\\ket{0}-\\ket{1}) = \\begin{bmatrix} \\frac{1}{\\sqrt{2}} \\\\ - \\frac{1}{\\sqrt{2}} \\end{bmatrix}\n\\]\n\nBardzo ważnym etapem jest wybór bazy w której dokonujemy pomiaru. np. dla wektora \\(\\ket{+}\\) pomiar w bazie standardowej pozwoli otrzymac wyniki stanu \\(\\ket{0}\\) i \\(\\ket{1}\\) z prawdopodobieństwami \\(\\frac{1}{2}\\). Natomiast jeśli pomiar dokonywany byłby w bazie Hadamarda to zawsze otrzymamy stan \\(\\ket{+}\\) z prawdopodobieństwem 1.",
    "crumbs": [
      "Sylabus",
      "Wykłady",
      "Przestrzenie wektorowe, stany kwantowe, reprezentacja klasycznych i kwantowych bitów"
    ]
  },
  {
    "objectID": "lectures/wyklad3.html#kilka-ciekawostek-matematycznych",
    "href": "lectures/wyklad3.html#kilka-ciekawostek-matematycznych",
    "title": "Przestrzenie wektorowe, stany kwantowe, reprezentacja klasycznych i kwantowych bitów",
    "section": "Kilka ciekawostek matematycznych",
    "text": "Kilka ciekawostek matematycznych\nStan kubitów, czyli dwuwymiarowych układów kwantowych, opisujemy wektorem ket \\(\\ket{a}\\). Wektory te reprezentowane są jako listy zapisane w kolumnach. \\[ \\ket{a} = \\begin{bmatrix} a_0 \\\\ a_1 \\end{bmatrix} \\]\nOprócz wektorów ket wprowadziliśmy wektory bra powstające w wyniku operacji transpozycji i sprzęzenia zespolonego. Operacja ta jest bijekcją. \nPrzez bijekcję rozumiemy odwzorowanie bądź funkcję, która każdemu elementowi dziedziny przypisuje tylko jeden element przeciwdziedziny oraz dodatkowo cały zbiór dziedziny jest odwzorowany na przeciwdziedzinę. Zauważ, że druga własność jest potrzebna do zdefiniowania funkcji odwrotnej. Aby mówić o funkcji (odwrotnej), wszystkie elementy dziedziny (przeciwdziedziny) muszą zostać odwzorowane. Dzięki tej własności możemy zdefiniować całą przestrzeń dualną, w której podstawowymi składnikami są wektory dualne. Ponadto, wszystkie elementy przestrzeni wektorów bra mają swoje różne odpowiedniki w przestrzeni ketów i odwrotnie. To pozwala również stwierdzić, że tak naprawdę obie przestrzenie są izomorficzne, czyli takie same. Jedyną różnicą jest forma zapisu elementów. Operacja ta podobna jest do wpowadzenia wektorów dualnych na poziomie zakrzywionych rozmaitości rózniczkowalnych (ang. manifolds). W drugim przypadku definiujemy wektory kontrawariantne i kowariantne.\nWektory bra definiujemy jako listę wierszową. \\[ \\bra{b} = \\begin{bmatrix} a_0 \\,\\,\\,  a_1 \\end{bmatrix} \\]\nDo definicji przestrzeni wektorowej dodaliśmy definicję iloczynu skalarny. Zauważ, iz nie mówimy w tym przypadku o działaniu. Działania definiowały nam własności przestrzeni wektorowej. Wynikiem dodawania wektorów jak i mnożenia ich przez liczbę był zawsze jakiś wektor. A więc działania nie wyprowadzały nas poza przestrzeń wektorową. W przypadku iloczynu skalarnego wybieramy wektor oraz drugi wektor dualny. Po złozeniu jednego i drugiego otrzymujemy liczbę (skalar). \\[ \\braket{a}{b} \\]\nDo jego wprowadenia wymagane było wprowadzenie przestrzeni dualnej.\nKorzystając z wektorów bra i ket możemy zdefiniować jeszcze jedną operacje.\n\\[ \\ket{a} \\bra{b} \\] Tym razem to co otrzymujemy mozemy traktować jako operator.",
    "crumbs": [
      "Sylabus",
      "Wykłady",
      "Przestrzenie wektorowe, stany kwantowe, reprezentacja klasycznych i kwantowych bitów"
    ]
  },
  {
    "objectID": "lectures/cw_w1.html",
    "href": "lectures/cw_w1.html",
    "title": "Wstęp do kwantowego uczenia maszynowego",
    "section": "",
    "text": "# 1. ile jest 5 do potęgi 5? \n\nwynik = ...\n\n# 2. ile razy liczba 3 mieści się w 123? \n\nile = ...\n\n# 3. wskaż na string ze zmiennej l\nl = [10, [3, 4], [5, [100, 200, [\"MDS\"]], 23, 11], 1, 7]\n\nstring = ...\n\n# 4. wsaż na napis 'MDS' ze słownika\nd = {\n    \"outer\": [\n        1,\n        2,\n        3,\n        {\"inner\": [\"this\", \"is\", \"inception\", {\"inner_inner\": [1, 2, 3, \"MDS\"]}]},\n    ]\n}\n\n# 5. Napisz funkcje website() która wyciąga nazwę domeny z url. np, z \"www.google.com\", powinno wskazać \"google\".\n\ndef website():\n    pass # tutaj wpisz kod\n\n# 6. Podnieś liczby w liście do kwadratu \n# skorzystaj z list comprehension\n\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nl2 = ...\n\nWyjaśnij model regresji (zarówno liniowej, jak i logistycznej).\nCzy modele regresji (liniowej i logistycznej) można przedstawić jako rozwiązanie sieci neuronowej?\nZaimplementuj oba algorytmy (regresji liniowej i logistycznej) w środowisku PyTorch.",
    "crumbs": [
      "Sylabus",
      "Wykłady",
      "ćwiczenia do W1",
      "Zadania Python"
    ]
  },
  {
    "objectID": "lectures/cw_w1.html#zadania-python",
    "href": "lectures/cw_w1.html#zadania-python",
    "title": "Wstęp do kwantowego uczenia maszynowego",
    "section": "",
    "text": "# 1. ile jest 5 do potęgi 5? \n\nwynik = ...\n\n# 2. ile razy liczba 3 mieści się w 123? \n\nile = ...\n\n# 3. wskaż na string ze zmiennej l\nl = [10, [3, 4], [5, [100, 200, [\"MDS\"]], 23, 11], 1, 7]\n\nstring = ...\n\n# 4. wsaż na napis 'MDS' ze słownika\nd = {\n    \"outer\": [\n        1,\n        2,\n        3,\n        {\"inner\": [\"this\", \"is\", \"inception\", {\"inner_inner\": [1, 2, 3, \"MDS\"]}]},\n    ]\n}\n\n# 5. Napisz funkcje website() która wyciąga nazwę domeny z url. np, z \"www.google.com\", powinno wskazać \"google\".\n\ndef website():\n    pass # tutaj wpisz kod\n\n# 6. Podnieś liczby w liście do kwadratu \n# skorzystaj z list comprehension\n\nl = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nl2 = ...\n\nWyjaśnij model regresji (zarówno liniowej, jak i logistycznej).\nCzy modele regresji (liniowej i logistycznej) można przedstawić jako rozwiązanie sieci neuronowej?\nZaimplementuj oba algorytmy (regresji liniowej i logistycznej) w środowisku PyTorch.",
    "crumbs": [
      "Sylabus",
      "Wykłady",
      "ćwiczenia do W1",
      "Zadania Python"
    ]
  },
  {
    "objectID": "lectures/cw_w2.html",
    "href": "lectures/cw_w2.html",
    "title": "Bramki i funkcje",
    "section": "",
    "text": "Napisać kod obiektowy, który pobiera string (treść do zaszyfrowania) i przekłada go na zapis bitowy. Dodatkowo wylosuj klucz do zaszyfrowania wiadomości (losowy ciąg 0 i 1).\nMetoda 1 - szyfrowanie - Zaszyfruj wiadomość wykorzystując operacje XOR.\nMetoda 2 - wyświetl zaszyfrowaną wiadomość w postaci normalnej.\nMetoda 3 - odszyfruj wiadomość (ciąg zaszyfrowanego kodu binarnego)\nMetoda 4 - wyświetl odszyfrowaną wiadomość\n\\[\n\\newcommand{\\bra}[1]{\\left \\langle #1 \\right \\rvert}\n\\newcommand{\\ket}[1]{\\left \\rvert #1 \\right \\rangle}\n\\newcommand{\\braket}[2]{\\left \\langle #1 \\middle \\rvert #2 \\right \\rangle}\n\\]\n\nPyTorch Regresja liniowa\n\nimport torch\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nclass LinearRegression(torch.nn.Module):\n\n    def __init__(self, inputSize, outputSize):\n        super(LinearRegression, self).__init__()\n        self.linear = torch.nn.Linear(inputSize, outputSize)\n\n    def forward(self, x):\n        out = self.linear(x)\n        return out\n\n\ninputDim = 1\noutputDim = 1\nlearningRate = 0.01\nepochs = 100\n\nmodel = LinearRegression(inputDim, outputDim)\n\nx = np.arange(11)\nprint(f\"dane: {x}\")\n\ny = [2*el - 1 for el in x]\nprint(f\"target: {y}\")\n\n# dostosowanie do pytorch\ny  = np.array(y, dtype=np.float32)\nx_train = np.array(x, dtype=np.float32)\nx_train, y_train = x_train.reshape(-1, 1), y.reshape(-1, 1)\n\ninputs = torch.from_numpy(x_train)\noutputs = torch.from_numpy(y_train)\n\ncriterion = torch.nn.MSELoss() \noptimizer = torch.optim.SGD(model.parameters(), lr=learningRate)\n# petla uczaca \nfor epoch in range(epochs):\n    # forward pass and loss\n    y_predicted = model(inputs)\n    loss = criterion(y_predicted, outputs)\n    \n    # backward pass\n    loss.backward()\n    \n    # updates\n    optimizer.step()\n    \n    # zero gradients\n    optimizer.zero_grad()\n    \n    if (epoch+1) % 10 == 0:\n        print(f'epoch: {epoch+1}, loss = {loss.item():.4f}')\n\nwith torch.no_grad():\n    predicted = model(inputs)\n\nplt.clf()\nplt.plot(x_train, y_train, 'go', label='True data', alpha=0.5)\nplt.plot(x_train, predicted, '--', label='Predictions', alpha=0.5)\nplt.legend(loc='best')\nplt.show()\n\ndane: [ 0  1  2  3  4  5  6  7  8  9 10]\ntarget: [-1, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\nepoch: 10, loss = 0.8981\nepoch: 20, loss = 0.8027\nepoch: 30, loss = 0.7175\nepoch: 40, loss = 0.6413\nepoch: 50, loss = 0.5731\nepoch: 60, loss = 0.5123\nepoch: 70, loss = 0.4578\nepoch: 80, loss = 0.4092\nepoch: 90, loss = 0.3657\nepoch: 100, loss = 0.3269\n\n\n\n\n\n\n\n\n\n\n\nPyTorch Regresja logistyczna\n\nimport torch\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nclass LogisticRegression(torch.nn.Module):\n\n    def __init__(self, inputSize, outputSize):\n        super(LogisticRegression, self).__init__()\n        self.linear = torch.nn.Linear(inputSize, outputSize)\n\n    def forward(self, x):\n        x = self.linear(x)\n        y_pred = torch.sigmoid(x)\n        return y_pred\n\n\ninputDim = 1\noutputDim = 1\nlearningRate = 0.001\nepochs = 100\n\nmodel = LogisticRegression(inputDim, outputDim)\n\nx = np.arange(11)\nprint(f\"dane: {x}\")\n\nimport random\ny = [random.choice([0,1]) for _ in range(11)]\nprint(f\"target: {y}\")\n\n# dostosowanie do pytorch\ny  = np.array(y, dtype=np.float32)\nx_train = np.array(x, dtype=np.float32)\nx_train, y_train = x_train.reshape(-1, 1), y.reshape(-1, 1)\n\ninputs = torch.from_numpy(x_train)\noutputs = torch.from_numpy(y_train)\n\ncriterion = torch.nn.CrossEntropyLoss()\noptimizer = torch.optim.SGD(model.parameters(), lr=learningRate)\n# petla uczaca \nfor epoch in range(epochs):\n    # forward pass and loss\n    y_predicted = model(inputs)\n    loss = criterion(y_predicted, outputs)\n    \n    # backward pass\n    loss.backward()\n    \n    # updates\n    optimizer.step()\n    \n    # zero gradients\n    optimizer.zero_grad()\n    \n    if (epoch+1) % 10 == 0:\n        print(f'epoch: {epoch+1}, loss = {loss.item():.4f}')\n\n\nwith torch.no_grad():\n    y_predicted = model(inputs) \n    acc = y_predicted.eq(outputs).sum() / float(y_train.shape[0])  # accuracy\n    print(f'accuracy = {acc:.4f}')\n\ndane: [ 0  1  2  3  4  5  6  7  8  9 10]\ntarget: [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1]\nepoch: 10, loss = -0.0000\nepoch: 20, loss = -0.0000\nepoch: 30, loss = -0.0000\nepoch: 40, loss = -0.0000\nepoch: 50, loss = -0.0000\nepoch: 60, loss = -0.0000\nepoch: 70, loss = -0.0000\nepoch: 80, loss = -0.0000\nepoch: 90, loss = -0.0000\nepoch: 100, loss = -0.0000\naccuracy = 0.0000",
    "crumbs": [
      "Sylabus",
      "Wykłady",
      "ćwiczenia do W2",
      "Bramki i funkcje"
    ]
  },
  {
    "objectID": "info.html",
    "href": "info.html",
    "title": "Narzędzia",
    "section": "",
    "text": "W terminalu (Windows CMD) wpisz\npython\nJeśli nie odnaleziono komendy uruchom polecenie:\npython3\nZwróć uwagę, aby Twoja wersja nie była niższa niż 3.X Aby wyjść z powłoki pythona użyj funkcji exit()\nPython 3.10.9 (main, Dec 15 2022, 17:11:09) [Clang 14.0.0 (clang-1400.0.29.202)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; exit()\n\n\npython3 -m venv &lt;name of env&gt;\n\nsource &lt;name of env&gt;/bin/activate\n\n# Przykład\npython3 -m venv venv\nsource venv/bin/activate\n# . venv/bin/activate\n(venv) $ \nInstalacja podstawowych bibliotek i jupyterlab.\npip install --no-cache --upgrade pip setuptools\n\npip install pip install pennylane jupyter matplotlib\n# jeśli masz plik requirements.txt z potrzebnymi bibliotekami\npip install -r requirements.txt\n# uruchom \njupyterlab\nW przeglądarce internetowej wpisz: localhost:8888\nPo ponownym uruchomieniu przejdź do katalogu w którym utworzyłeś środowisko, następnie uruchom środowisko i jupyterlab.\nsource &lt;name of env&gt;/bin/activate\njupyterlab\n\n\n\nNajprostrzym sposobem korzystania z biblioteki PennyLane jest wykorzystanie środowiska Google Colab. W nowym notatniku uruchom następujący kod:\n!pip install pennylane\nAby zainstalować bibliotekę PennyLane na własnym komputerze zaleca się utworzenie nowego środowiska wirtualnego Python (Zalecam Python3.10 lub 3.11).\npython3.11 -m venv venv\nsource venv/bin/activate\n(venv) pip install pennylane jupyter matplotlib\n(venv) jupyter notebook \nRealizację instalacji na środowisku windows i Linux możesz wykonać zgodnie z~filmem.\nPolecam również zaznajomić się z podstawami biblioteki PennyLane.\n\n\n\nKurs podstaw pythona Tomas Beuzen polecam.\nUtwórz konto na Kaggle, przejdź do zakładki Courses i przerób cały moduł Pythona. Zawiera on:\n\nwyrażenia i zmienne\nfunkcje\nwarunki i flow programu\nlisty\npętle\nstringi i słowniki\ndodawanie i używanie zewnętrznych bibliotek",
    "crumbs": [
      "Sylabus",
      "Narzędzia"
    ]
  },
  {
    "objectID": "info.html#python",
    "href": "info.html#python",
    "title": "Narzędzia",
    "section": "",
    "text": "W terminalu (Windows CMD) wpisz\npython\nJeśli nie odnaleziono komendy uruchom polecenie:\npython3\nZwróć uwagę, aby Twoja wersja nie była niższa niż 3.X Aby wyjść z powłoki pythona użyj funkcji exit()\nPython 3.10.9 (main, Dec 15 2022, 17:11:09) [Clang 14.0.0 (clang-1400.0.29.202)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; exit()\n\n\npython3 -m venv &lt;name of env&gt;\n\nsource &lt;name of env&gt;/bin/activate\n\n# Przykład\npython3 -m venv venv\nsource venv/bin/activate\n# . venv/bin/activate\n(venv) $ \nInstalacja podstawowych bibliotek i jupyterlab.\npip install --no-cache --upgrade pip setuptools\n\npip install pip install pennylane jupyter matplotlib\n# jeśli masz plik requirements.txt z potrzebnymi bibliotekami\npip install -r requirements.txt\n# uruchom \njupyterlab\nW przeglądarce internetowej wpisz: localhost:8888\nPo ponownym uruchomieniu przejdź do katalogu w którym utworzyłeś środowisko, następnie uruchom środowisko i jupyterlab.\nsource &lt;name of env&gt;/bin/activate\njupyterlab\n\n\n\nNajprostrzym sposobem korzystania z biblioteki PennyLane jest wykorzystanie środowiska Google Colab. W nowym notatniku uruchom następujący kod:\n!pip install pennylane\nAby zainstalować bibliotekę PennyLane na własnym komputerze zaleca się utworzenie nowego środowiska wirtualnego Python (Zalecam Python3.10 lub 3.11).\npython3.11 -m venv venv\nsource venv/bin/activate\n(venv) pip install pennylane jupyter matplotlib\n(venv) jupyter notebook \nRealizację instalacji na środowisku windows i Linux możesz wykonać zgodnie z~filmem.\nPolecam również zaznajomić się z podstawami biblioteki PennyLane.\n\n\n\nKurs podstaw pythona Tomas Beuzen polecam.\nUtwórz konto na Kaggle, przejdź do zakładki Courses i przerób cały moduł Pythona. Zawiera on:\n\nwyrażenia i zmienne\nfunkcje\nwarunki i flow programu\nlisty\npętle\nstringi i słowniki\ndodawanie i używanie zewnętrznych bibliotek",
    "crumbs": [
      "Sylabus",
      "Narzędzia"
    ]
  },
  {
    "objectID": "info.html#zacznij-korzystać-z-serwisu-github",
    "href": "info.html#zacznij-korzystać-z-serwisu-github",
    "title": "Narzędzia",
    "section": "Zacznij korzystać z serwisu GitHub",
    "text": "Zacznij korzystać z serwisu GitHub\n\n\n\nTekst na podstawie strony jak korzystać z serwisu github\nPracując nad projektem np. praca magisterska, (samodzielnie lub w zespole) często potrzebujesz sprawdzić jakie zmiany, kiedy i przez kogo zostały wprowadzone do projektu. W zadaniu tym świetnie sprawdza się system kontroli wersji czyli GIT.\nGit możesz pobrać i zainstalować jak zwykły program na dowolnym komputerze. Jednak najczęściej (małe projekty) korzysta się z serwisów z jakimś systemem git. Jednym z najbardziej rozpoznawanych jest GitHub dzięki któremu możesz korzystać z systemu git bez jego instalacji na swoim komputerze.\nW darmowej wersji serwisu GitHub swoje pliki możesz przechowywać w publicznych (dostęp mają wszyscy) repozytoriach.\nSkupimy się wyłącznie na darmowej wersji serwisu GitHub.\ngit --version\n\nStruktura GitHuba\nNa najwyższym poziomie znajdują się konta indywidualne (np http://github.com/sebkaz, bądź zakładane przez organizacje. Użytkownicy indywidualni mogą tworzyć repozytoria publiczne (public ) bądź prywatne (private).\nJeden plik nie powinien przekraczać 100 MB.\nRepo (skrót do repozytorium) tworzymy za pomocą Create a new repository. Każde repo powinno mieć swoją indywidualną nazwę.\n\n\nBranche\nGłówna (tworzona domyślnie) gałąź rapozytorium ma nazwę master.\n\n\nNajważniejsze polecnia do zapamiętania\n\nściąganie repozytorium z sieci\n\ngit clone https://adres_repo.git\n\nW przypadku githuba możesz pobrać repozytorium jako plik zip.\n\n\nTworzenie repozytorium dla lokalnego katalogu\n\n# tworzenie nowego katalogu\nmkdir datamining\n# przejście do katalogu\ncd datamining\n# inicjalizacja repozytorium w katalogu\ngit init\n# powinien pojawić się ukryty katalog .git\n# dodajmy plik\necho \"Info \" &gt;&gt; README.md\n\nPołącz lokalne repozytorium z kontem na githubie\n\ngit remote add origin https://github.com/&lt;twojGit&gt;/nazwa.git\n\nObsługa w 3 krokach\n\n# sprawdź zmiany jakie zostały dokonane\ngit status\n# 1. dodaj wszystkie zmiany\ngit add .\n# 2. zapisz bierzący stan wraz z informacją co zrobiłeś\ngit commit -m \" opis \"\n# 3. potem już zostaje tylko\ngit push origin master\nWarto obejrzeć Youtube course.\nCiekawe i proste wprowadzenie mozna znaleźć tutaj",
    "crumbs": [
      "Sylabus",
      "Narzędzia"
    ]
  },
  {
    "objectID": "other/qiskitML.html",
    "href": "other/qiskitML.html",
    "title": "Qiskit Machine Learning",
    "section": "",
    "text": "dokumentacja\n\nQuantum Kernels (Quantum Support Vector Classifier, Quantum Support Vector Regressor)\nQuantum Neural Networks (Variational Quantum Classifier, Variational Quantum Regressor), fature map (ZZFeatureMap, ZFeatureMap, PauliFeatureMap) i ansatz (RealAmplitudes, EfficientSU2, ZZFeatureMap, ZFeatureMap, PauliFeatureMap). Posiada również konektor do PyTorcha.\n\nużywane do klasyfikacji (QSVC) i regresjii (QSVR). Pozwalają na używanie kwantowego uczenia maszynowego bez wiedzy o obliczeniach kwantowych.\n\n# instalacja \n!pip install --upgrade pip\n!pip install qiskit-machine-learning\n!pip install 'qiskit-machine-learning[torch]'\n!pip install 'qiskit-machine-learning[sparse]' \n# !pip install ipywidgets ipykernel\n\n\nimport qiskit.tools.jupyter\n\n%qiskit_version_table\n\nVersion Information\n\n\n\nSoftware\nVersion\n\n\nqiskit\nNone\n\n\nqiskit-terra\n0.25.2\n\n\nSystem information\n\n\nPython version\n3.10.12\n\n\nPython compiler\nClang 14.0.3 (clang-1403.0.22.14.1)\n\n\nPython build\nmain, Jul 28 2023 18:34:01\n\n\nOS\nDarwin\n\n\nCPUs\n8\n\n\nMemory (Gb)\n16.0\n\n\nSun Oct 15 20:37:42 2023 CEST"
  },
  {
    "objectID": "ksiazki.html",
    "href": "ksiazki.html",
    "title": "Literatura",
    "section": "",
    "text": "Klasyczne przetwarzanie informacji, działanie komputerów.\n\nRichard P. Feynman, Przetwarzanie informacji, z serii Feynmana wykłady, PWN 2022\nT. G. Wong, Introduction to Classical and Quantum Computing. Rooted Grove 2022.\n\n\n\n\n\n\n\nC. Bernhardt, Obliczenia kwantowe dla każdego. PWN 2020\nT. G. Wong, Introduction to Classical and Quantum Computing. Rooted Grove 2022.\nP. Gawron, M. Cholewa, … Rewolucja stanu. Fantastyczne wprowadzenie do informatyki kwantowej. Quantumz.io 2021\nM. Le Bellac, Wstęp do informatyki kwantowej. PWN 2011\nR. S. Sutor, Dancing with Qubits. Second edition, Packt 2024\n\n\n\n\n\n\n\nM. Schuld, F. Petruccione, Machine Learning with Quantum Computers, Springer 2021.\nA. Jacquier, O. Kondratyev, Quantum Machine Learning and Optimisation in Finance. On the Road to Quantum Advantage.\nA. Saxena, J. Mancilla, I. Montalban, C. Pere, Financial Modeling Using Quantum Computing. Packt 2023\n\n\n\n\n\n\n\nA. Geron, Uczenie maszynowe z użyciem Scikit-Learn i TensorFlow. Helion 2024\nS. Zajac, Modelowanie dla biznesu, Analityka w czasie rzeczywistym - narzędzia informatyczne i biznesowe. SGH 2022\nS. Raschka, Build a Large Language Model from scratch, Manning 2024\nL. Moroney, Sztuczna inteligencja i uczenie maszynowe dla programistów. Praktyczny przewodnik po sztucznej inteligencji. Helion 2021. Zobacz opis lub Kup e-book\nBruce, Bruce, Gedeck, Statystyka praktyczna w data science. Wydanie II. Helion. 2021."
  },
  {
    "objectID": "ksiazki.html#książki",
    "href": "ksiazki.html#książki",
    "title": "Literatura",
    "section": "",
    "text": "Klasyczne przetwarzanie informacji, działanie komputerów.\n\nRichard P. Feynman, Przetwarzanie informacji, z serii Feynmana wykłady, PWN 2022\nT. G. Wong, Introduction to Classical and Quantum Computing. Rooted Grove 2022.\n\n\n\n\n\n\n\nC. Bernhardt, Obliczenia kwantowe dla każdego. PWN 2020\nT. G. Wong, Introduction to Classical and Quantum Computing. Rooted Grove 2022.\nP. Gawron, M. Cholewa, … Rewolucja stanu. Fantastyczne wprowadzenie do informatyki kwantowej. Quantumz.io 2021\nM. Le Bellac, Wstęp do informatyki kwantowej. PWN 2011\nR. S. Sutor, Dancing with Qubits. Second edition, Packt 2024\n\n\n\n\n\n\n\nM. Schuld, F. Petruccione, Machine Learning with Quantum Computers, Springer 2021.\nA. Jacquier, O. Kondratyev, Quantum Machine Learning and Optimisation in Finance. On the Road to Quantum Advantage.\nA. Saxena, J. Mancilla, I. Montalban, C. Pere, Financial Modeling Using Quantum Computing. Packt 2023\n\n\n\n\n\n\n\nA. Geron, Uczenie maszynowe z użyciem Scikit-Learn i TensorFlow. Helion 2024\nS. Zajac, Modelowanie dla biznesu, Analityka w czasie rzeczywistym - narzędzia informatyczne i biznesowe. SGH 2022\nS. Raschka, Build a Large Language Model from scratch, Manning 2024\nL. Moroney, Sztuczna inteligencja i uczenie maszynowe dla programistów. Praktyczny przewodnik po sztucznej inteligencji. Helion 2021. Zobacz opis lub Kup e-book\nBruce, Bruce, Gedeck, Statystyka praktyczna w data science. Wydanie II. Helion. 2021."
  },
  {
    "objectID": "ksiazki.html#strony-www",
    "href": "ksiazki.html#strony-www",
    "title": "Literatura",
    "section": "Strony WWW",
    "text": "Strony WWW\n\nPeter Shor Wykład\n\n\nPakiety Python\n\nQiskit\nPennyLane\n\n\n\nEdytory tekstu\n\nVisual Studio Code\nSublime Text\nNotepad++\n\n\n\nMarkdown\n\nMD"
  },
  {
    "objectID": "labs/cw5.html",
    "href": "labs/cw5.html",
    "title": "Parameterized Quantum Circuit",
    "section": "",
    "text": "Parametryzowane algorytmy kwantowe, czyli takie w których realizujemy obwody przez bramki parametryzowane (liczbami) są podstawowym budulcem algorytmów kwantowego uczenia maszynowego. Bardzo często mozna się spotkać z innymi nazwami: parameterized trial states, variational forms, lub ansatzes.\nPonizszy przykład przedstawia obwód z dwoma bramkami parametryzowanymi jedną liczbą \\(\\theta\\). Do oznaczenia parametru wykorzystano obiekt Parameter.\nfrom qiskit.circuit import QuantumCircuit, Parameter\n\ntheta = Parameter('angle') # niezdefiniowany parametr\n\nqc = QuantumCircuit(2)\nqc.rz(theta, 0)\nqc.crz(theta, 0, 1)\nqc.draw('mpl')\nprint(qc.parameters)\n\nParameterView([Parameter(angle)])\nJezeli chcemy zastosować wiele parametrów dla róznych bramek mozemy uzyc klasy kilku obiektów na podstawie klasy Parameters lub zastosować klasę ParameterVector.\nfrom qiskit.circuit import ParameterVector\ntheta_list = ParameterVector('theta', length=2)\n\nqc = QuantumCircuit(2)\nqc.rz(theta_list[0], 0)\nqc.crz(theta_list[1], 0, 1)\nqc.draw('mpl')\nqc.parameters\n\nParameterView([ParameterVectorElement(theta[0]), ParameterVectorElement(theta[1])])\nPoniewaz wszystkie bramki kwantowe uzywane w obwodach są unitarne, parametryzowany obwód równiez moze być opisany jako unitarna operacja wykonywana na n kubitach \\(U_{\\theta}\\) działająca na pewien stan początkowy \\(|\\phi_0\\rangle\\). \\[\n|\\psi_{\\theta}\\rangle = U_{\\theta} |\\phi_0\\rangle\n\\]\nW ogólności realizowane jest to w formie testowej sprwadz publikację.\nPrzetestujmy dwa parametryczne obwody i zobaczmy jakie mozliwosci kodowania stanów one reprezentują."
  },
  {
    "objectID": "labs/cw5.html#entangling-capability",
    "href": "labs/cw5.html#entangling-capability",
    "title": "Parameterized Quantum Circuit",
    "section": "Entangling capability",
    "text": "Entangling capability\nDrugą, wazną cechą obwodów jest mozliwosc wykorzystania splątania. Aby zmierzyć jak bardzo stany są splątane mozemy uzyć miary Meyer’a-Wallach’a. Dla stanów separowalnych miara ta przyjmuje wartość \\(0\\), natomiast dla stanów Bella \\(1\\).\n\nfrom qiskit import QuantumRegister, QuantumCircuit\nq1 = QuantumRegister(4, 'q')\nc1 = QuantumCircuit(q1)\nc1.rz(0,[0,1,2,3])\nc1.rx(0,q1)\nc1.draw('mpl')\n\n\n\n\n\n\n\n\nTen obwód nie ma operacji wprowadzających stan splątany - brak bramek dwukubitowych. Miara M-W = 0.\n\nq2 = QuantumRegister(4, 'q')\nc2 = QuantumCircuit(q1)\nc2.rz(0,[0,1,2,3])\nc2.rx(0,q1)\nc2.cx(0,1)\nc2.cx(2,3)\nc2.cx(1,2)\n\nc2.draw('mpl')\n\n\n\n\n\n\n\n\nW tym przypadku istnieją bramki dwukubitowe wprowadzające stany splątane dlatego miara M-W będzie większa od 0. Więcej info tutaj"
  },
  {
    "objectID": "labs/cw5.html#pqc-dla-ml",
    "href": "labs/cw5.html#pqc-dla-ml",
    "title": "Parameterized Quantum Circuit",
    "section": "PQC dla ML",
    "text": "PQC dla ML\nW QML parametryzowane obwody są uzywane do dwóch głównych zadań.\n\nZakodowanie klasycznych danych na układ kwantowy - dane przekładane są na parametry kątów\nJako model kwantowy gdzie parametry ustalane są z wykorzystaniem klasycznego optymalizatora\n\n\nKodowanie danych - Quantum Feature Map\nAby zrealizować modele uczenia maszynowego na klasycznych danych z wykorzystaniem PQC musimy wykonać i wybrać kilka operacji pozwalających operować na naszych danych za pomocą obwodów kwantowych.\nZadanie to często nazywane jest reprezentacją danych klasycznych w pewnej przestrzeni Hilberta, a więc moze być nazywane embeddingiem danych. Tak jak ma to miejsce dla danych grafowych czy tez w sytuacjii gdy stosujemy rózne metody zmieniające postać danych np. kernel methods w SVM.\nW przypadku obwodów kwantowych ich działanie opiera się na przetworzeniu początkowego stanu kwantowego wyrazanego jako iloczyn tensorowy kubitów. Dlatego naturalnym sposobem jest przedstawienie danych jako wektor w pewnej przestrzeni Hilberta.\nTak przygotowany i sparametryzowany stan mozna wykorzystać np w modelach typu Variational Quantum Circuit, gdzie oprócz stanu budujemy kolejny PQC, tym razem realizujący parametry naszego modelu jako parametry bramek kwantowych. Całość optymalizowana jest za pomocą róznego rodzaju optymalizatorów.\nNasze zadanie sprowadzić mozna do pobrania klasycznego punktu danych \\(\\vec{x}\\) oraz zakodowania go za pomocą bramek (parametryzowanych) w obwodzie kwantowym. \\[\nx_i \\to |\\phi(x_i)\\rangle\n\\]\nQFM (Quantum Feature Map) \\(V(\\Phi(\\vec{x}))\\) przetwarza klasyczne dane na dane kwantowe.\n\\(\\Phi(.)\\) to klasyczna funkcja zastosowana do klasycznych danych.\n\\(V\\) - to parametryzowany obwód zmieniający dane klasyczne na kwantowe.\nTrzy podstawowe czynniki związane z wyborem feature map:\n\ngłębokość obwodu - sekcja bramek kodujących moze być realizowana wiele razy (poprzez parametr reps)\nklasyczna funkcja modyfikująca i kodująca klasyczne dane nadające się do uzytku w obwodach kwantowych\nzbiór bramek kwantowych\n\n\n\nZFeatureMap\nThe first order Pauli Z-evolution circuit. Documentacja\n\\[\n\\Phi_S \\colon x \\to x_i\n\\] Otrzymany obwód nie zawiera oddziaływania między zmiennymi (zakodowanych danych), co wiąze się z brakiem wykorzystania efektu splątania.\n\nfrom qiskit.circuit.library import ZFeatureMap\n\nqc_z = ZFeatureMap(feature_dimension=3, reps=1)\nqc_z.draw('mpl')\n\n\n\n\n\n\n\n\n\nqc_z.decompose().draw('mpl')\n\n\n\n\n\n\n\n\n\n\nZZFeatureMap\nSecond-order Pauli-Z evolution circuit. Documentacja\n\nfrom qiskit.circuit.library import ZZFeatureMap\n\nqc_zz = ZZFeatureMap(feature_dimension=3, reps=1, \n                     entanglement='full',\n                     insert_barriers=True)\nqc_zz.draw('mpl')\n\n\n\n\n\n\n\n\n\nqc_zz.decompose().draw('mpl')\n\n\n\n\n\n\n\n\n\nqc_zz = ZZFeatureMap(feature_dimension=3, reps=1, entanglement='linear',insert_barriers=True)\nqc_zz.draw('mpl')\n\n\n\n\n\n\n\n\n\nqc_zz.decompose().draw('mpl')\n\n\n\n\n\n\n\n\n\n\nPauli Feature Map\nDokumentacja\n\nfrom qiskit.circuit.library import PauliFeatureMap\n\nqc_p = PauliFeatureMap(feature_dimension=3, reps=1, paulis = ['Z','ZZ','ZY'])\nqc_p.draw('mpl')\n\n\n\n\n\n\n\n\n\nqc_p.decompose().draw('mpl')\n\n\n\n\n\n\n\n\nZaobaczmy jakiemu kodowaniu odpowiada PauliFeatureMap dla operatorów Z i ZZ.\n\nqc_p = PauliFeatureMap(feature_dimension=3, reps=1, paulis = ['Z','ZZ'])\ndisplay(qc_p.draw('mpl'))\nqc_p.decompose().draw('mpl')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJeśli mamy juz określony sposób kodowania danych, komputer kwantowy moze je przeanalizować w odpowiedniej przestrzeni Hilberta i np znaleźć hiperplaszczyzne dla procesu klasyfikacji."
  },
  {
    "objectID": "labs/cw5.html#model-circuit",
    "href": "labs/cw5.html#model-circuit",
    "title": "Parameterized Quantum Circuit",
    "section": "Model Circuit",
    "text": "Model Circuit\nKolejnym elementem jest obwód realizujący model. Tutaj równiez istnieje wiele mozliwych implementacji. W ogólności tworzymy parametryzowany operator unitarny \\(U(w)\\) dla którego: \\[\n|\\psi(x:\\theta)\\rangle = U(w)|\\psi(x)\\rangle\n\\]\nJednym z przykładowych modeli w bibliotece Qiskit jest obwód realizowany jako RealAmplitudes. Ilośc parametrów modelu moze być ustalana za pomocą głębokości obwodu - czyli ile razy powtórzymy dany schemat.\n\nfrom qiskit.circuit.library import TwoLocal\n\nqc_twolocal = TwoLocal(num_qubits=3, reps=2, rotation_blocks=['ry','rz'],\n                entanglement_blocks='cz', skip_final_rotation_layer=True,\n                insert_barriers=True)\n\nqc_twolocal.decompose().draw('mpl')\n\n\n\n\n\n\n\n\n\nqc_13 = TwoLocal(3, rotation_blocks='ry',\n                 entanglement_blocks='crz', entanglement='sca',\n                 reps=3, skip_final_rotation_layer=True,\n                 insert_barriers=True)\n\nqc_13.decompose().draw('mpl')\n\n\n\n\n\n\n\n\n\nNLocal\n\nfrom qiskit import QuantumCircuit\nfrom qiskit.circuit import ParameterVector \nfrom qiskit.circuit.library import NLocal\n\n# rotation block:\nrot = QuantumCircuit(2)\nparams = ParameterVector('r', 2)\nrot.ry(params[0], 0)\nrot.rz(params[1], 1)\n\n# entanglement block:\nent = QuantumCircuit(4)\nparams = ParameterVector('e', 3)\nent.crx(params[0], 0, 1)\nent.crx(params[1], 1, 2)\nent.crx(params[2], 2, 3)\n\nqc_nlocal = NLocal(num_qubits=6, rotation_blocks=rot,\n                   entanglement_blocks=ent, entanglement='linear',\n                   skip_final_rotation_layer=True, insert_barriers=True)\n\nqc_nlocal.decompose().draw('mpl')\n\n\n\n\n\n\n\n\n\n\nOptymalizatory\nZainstaluj bibliotekę qiskit-algorithms pip install qiskit-algorithms.\nfrom qiskit-algorithms.optimizers import COBYLA\n\nCOBYLA (Constrained Optimization By Linear Approximation optimizer)\nSPSA (Simultaneous Perturbation Sochastic Approximation optimizer)\nSLSQP (Sequential Least Squares Programming optimizer)"
  },
  {
    "objectID": "labs/cw5.html#przykład-klasyfikacji-danych",
    "href": "labs/cw5.html#przykład-klasyfikacji-danych",
    "title": "Parameterized Quantum Circuit",
    "section": "Przykład Klasyfikacji danych",
    "text": "Przykład Klasyfikacji danych\n\nfrom qiskit.utils import algorithm_globals\nalgorithm_globals.random_seed = 42\n\nimport numpy as np\nnp.random.seed(algorithm_globals.random_seed)\n\n# Tworzymy zbiór danych \nfrom qiskit_machine_learning.datasets import ad_hoc_data\n\nTRAIN_DATA, TRAIN_LABELS, TEST_DATA, TEST_LABELS = (\n    ad_hoc_data(training_size=20,\n                test_size=5,\n                n=2,\n                gap=0.3,\n                one_hot=False)\n)\n\n\nlen(TRAIN_DATA), len(TRAIN_LABELS), len(TEST_DATA), len(TEST_LABELS)\n\n(40, 40, 10, 10)\n\n\n\nTRAIN_DATA[0], TRAIN_LABELS[0]\n\n(array([4.90088454, 4.1469023 ]), 0)\n\n\nDo zakodowania danych w stanie kwantowym uzyjemy: ZZFeatureMap o głębokości 2.\n\nfrom qiskit.circuit.library import ZZFeatureMap\n\nFEATURE_MAP = ZZFeatureMap(feature_dimension=2, reps=2)\n\nJako model wykorzystamy TwoLocal z bramkami ry rz i cz do splątania.\n\nfrom qiskit.circuit.library import TwoLocal\nVAR_FORM = TwoLocal(2, ['ry', 'rz'], 'cz', reps=2)\n\nAD_HOC_CIRCUIT = FEATURE_MAP.compose(VAR_FORM)\nAD_HOC_CIRCUIT.measure_all()\nAD_HOC_CIRCUIT.decompose().draw('mpl')\n\n\n\n\n\n\n\n\n\ndef circuit_instance(data, variational):\n    \"\"\"Assigns parameter values to `AD_HOC_CIRCUIT`.\n    Args:\n        data (list): Data values for the feature map\n        variational (list): Parameter values for `VAR_FORM`\n    Returns:\n        QuantumCircuit: `AD_HOC_CIRCUIT` with parameters assigned\n    \"\"\"\n    parameters = {}\n    for i, p in enumerate(FEATURE_MAP.ordered_parameters):\n        parameters[p] = data[i]\n    for i, p in enumerate(VAR_FORM.ordered_parameters):\n        parameters[p] = variational[i]\n    return AD_HOC_CIRCUIT.assign_parameters(parameters)\n\nponiewaz wynikami są bitstringi musimy podać ich interpretacje i przeliczać je na klasę rozwiązań. Jednym z przykładowych rozwiązań jest wykorzystanie funkcji parity.\n\ndef parity(bitstring):\n    \"\"\"Returns 1 if parity of `bitstring` is even, otherwise 0.\"\"\"\n    hamming_weight = sum(int(k) for k in list(bitstring))\n    return (hamming_weight+1) % 2\n\nPomocniczo zdefiniujemy funkcję obliczającą prawdopodobieństwo (częstotliwość) dla danej klasy wynikowej. Nasz obwód będzie uruchamiany wiele razy, dzięki czemu uzyskamy zliczenia w róznych eksperymentach.\n\ndef label_probability(results):\n    \"\"\"Converts a dict of bitstrings and their counts,\n    to parities and their counts\"\"\"\n    shots = sum(results.values())\n    probabilities = {0: 0, 1: 0}\n    for bitstring, counts in results.items():\n        label = parity(bitstring)\n        probabilities[label] += counts / shots\n    return probabilities\n\nPosiadając powyzsze elementy mozemy zdefiniować funkcję realizującą klasyfikację.\n\nfrom qiskit import BasicAer, execute\n\ndef classification_probability(data, variational):\n    \"\"\"Classify data points using given parameters.\n    Args:\n        data (list): Set of data points to classify\n        variational (list): Parameters for `VAR_FORM`\n    Returns:\n        list[dict]: Probability of circuit classifying\n                    each data point as 0 or 1.\n    \"\"\"\n    circuits = [circuit_instance(d, variational) for d in data]\n    backend = BasicAer.get_backend('qasm_simulator')\n    results = execute(circuits, backend).result()\n    classification = [\n        label_probability(results.get_counts(c)) for c in circuits]\n    return classification\n\nPoniewaz będziemy chcieli trenować model będziemy potrzebowali zdefiniować funkcję straty i kosztu\n\ndef cross_entropy_loss(classification, expected):\n    \"\"\"Calculate accuracy of predictions using cross entropy loss.\n    Args:\n        classification (dict): Dict where keys are possible classes,\n                               and values are the probability our\n                               circuit chooses that class.\n        expected (int): Correct classification of the data point.\n\n    Returns:\n        float: Cross entropy loss\n    \"\"\"\n    p = classification.get(expected)  # Prob. of correct classification\n    return -np.log(p + 1e-10)\n\ndef cost_function(data, labels, variational):\n    \"\"\"Evaluates performance of our circuit with `variational`\n    parameters on `data`.\n\n    Args:\n        data (list): List of data points to classify\n        labels (list): List of correct labels for each data point\n        variational (list): Parameters to use in circuit\n\n    Returns:\n        float: Cost (metric of performance)\n    \"\"\"\n    classifications = classification_probability(data, variational)\n    cost = 0\n    for i, classification in enumerate(classifications):\n        cost += cross_entropy_loss(classification, labels[i])\n    cost /= len(data)\n    return cost\n\nMozemy teraz przypisac optymalizator\n\nclass OptimizerLog:\n    \"\"\"Log to store optimizer's intermediate results\"\"\"\n    def __init__(self):\n        self.evaluations = []\n        self.parameters = []\n        self.costs = []\n    def update(self, evaluation, parameter, cost, _stepsize, _accept):\n        \"\"\"Save intermediate results. Optimizer passes five values\n        but we ignore the last two.\"\"\"\n        self.evaluations.append(evaluation)\n        self.parameters.append(parameter)\n        self.costs.append(cost)\n\n# Set up the optimization\nfrom qiskit_algorithms.optimizers  import SPSA\nlog = OptimizerLog()\noptimizer = SPSA(maxiter=100, callback=log.update)\n\nLosujemy parametry początkowe, i wskazujemy optymalizowaną funkcję\n\ninitial_point = np.random.random(VAR_FORM.num_parameters)\ndef objective_function(variational):\n    \"\"\"Cost function of circuit parameters on training data.\n    The optimizer will attempt to minimize this.\"\"\"\n    return cost_function(TRAIN_DATA, TRAIN_LABELS, variational)\n\nuruchamiamy całą procedurę\n\n# Run the optimization\nresult = optimizer.minimize(objective_function, initial_point)\n\nopt_var = result.x\nopt_value = result.fun\n\nimport matplotlib.pyplot as plt\nfig = plt.figure()\nplt.plot(log.evaluations, log.costs)\nplt.xlabel('Steps')\nplt.ylabel('Cost')\nplt.show()\n\n\n\n\n\n\n\n\nDla zbioru testowego mozemy sprawdzic jakosc przewidywań\n\ndef test_classifier(data, labels, variational):\n    \"\"\"Gets classifier's most likely predictions and accuracy of those\n    predictions.\n\n    Args:\n        data (list): List of data points to classify\n        labels (list): List of correct labels for each data point\n        variational (list): List of parameter values for classifier\n\n    Returns:\n        float: Average accuracy of classifier over `data`\n        list: Classifier's label predictions for each data point\n    \"\"\"\n    probability = classification_probability(data, variational)\n    predictions = [0 if p[0] &gt;= p[1] else 1 for p in probability]\n    accuracy = 0\n    # pylint: disable=invalid-name\n    for i, prediction in enumerate(predictions):\n        if prediction == labels[i]:\n            accuracy += 1\n    accuracy /= len(labels)\n    return accuracy, predictions\n\naccuracy, predictions = test_classifier(TEST_DATA, TEST_LABELS, opt_var)\naccuracy\n\n1.0\n\n\n\nfrom matplotlib.lines import Line2D\nplt.figure(figsize=(9, 6))\n\nfor feature, label in zip(TRAIN_DATA, TRAIN_LABELS):\n    COLOR = 'C0' if label == 0 else 'C1'\n    plt.scatter(feature[0], feature[1],\n                marker='o', s=100, color=COLOR)\n\nfor feature, label, pred in zip(TEST_DATA, TEST_LABELS, predictions):\n    COLOR = 'C0' if pred == 0 else 'C1'\n    plt.scatter(feature[0], feature[1],\n                marker='s', s=100, color=COLOR)\n    if label != pred:  # mark wrongly classified\n        plt.scatter(feature[0], feature[1], marker='o', s=500,\n                    linewidths=2.5, facecolor='none', edgecolor='C3')\n\nlegend_elements = [\n    Line2D([0], [0], marker='o', c='w', mfc='C1', label='A', ms=10),\n    Line2D([0], [0], marker='o', c='w', mfc='C0', label='B', ms=10),\n    Line2D([0], [0], marker='s', c='w', mfc='C1', label='predict A',\n           ms=10),\n    Line2D([0], [0], marker='s', c='w', mfc='C0', label='predict B',\n           ms=10),\n    Line2D([0], [0], marker='o', c='w', mfc='none', mec='C3',\n           label='wrongly classified', mew=2, ms=15)\n]\n\nplt.legend(handles=legend_elements, bbox_to_anchor=(1, 1),\n           loc='upper left')\n\nplt.title('Training & Test Data')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.show()"
  },
  {
    "objectID": "labs/cw1.html",
    "href": "labs/cw1.html",
    "title": "Biblioteka Qiskit wprowadzenie",
    "section": "",
    "text": "python3 -m venv venv\nsource venv/bin/activate\n# Scripts\\Activate\n\npip install qiskit==1.2.1\npip install qiskit[visualization]\n# pip install 'qiskit[visualization]'\npip install qiskit_aer==0.15.1\npip install qiskit-algorithms==0.3.0\npip install qiskit_machine_learning==0.7.2\npip install qiskit-finance==0.4.1\npip install qiskit-ibm-runtime==0.29.0\npip install qiskit-optimization==0.6.1\nThe other important libs.\nimport numpy as np\nnp.set_printoptions(precision=3, suppress=True)"
  },
  {
    "objectID": "labs/cw1.html#qiskit-podstawy",
    "href": "labs/cw1.html#qiskit-podstawy",
    "title": "Biblioteka Qiskit wprowadzenie",
    "section": "Qiskit podstawy",
    "text": "Qiskit podstawy\nTworzenie rejestrów:\n\nkwantowego QuantumRegister - do inicjalizowania kubitów. Kubity domyślnie inicjalizowane są w stanie \\(|0\\rangle\\)\nklasycznego ClassicalRegister do przechowywania wyników pomiarów kubitów. Po pomiarze otrzymywany wynik zawsze jest binarny \\(\\{0,1\\}\\).\n\n\nfrom qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit\n\nOba rejestry wykorzystywane będą do generowania obwodów kwantowych QuantumCircuit.\nWszystkie podstawowe obiekty dostępne są bezpośrednio w bibliotece qiskit.\n\nqreq = QuantumRegister(4) # rejest kwantowy z 4 qubitami\n\n\ncreg = ClassicalRegister(4) # rejestr klasyczny z 4 bitami\n\n\ncircuit = QuantumCircuit(qreq, creg) # obwód kwantowy z 4 qubitami i 4 bitami\n\n\ncircuit.draw('mpl') # funkcja rysująca obwód\n\n\n\n\n\n\n\n\n\noutput = QuantumRegister(1) # inny rejestr kwantowy z 1 qubitem\n\n\ncircuit2 = QuantumCircuit(qreq, output, creg)\n\n\ncircuit2.draw(\"mpl\")\n\n\n\n\n\n\n\n\n\ncircuit3 = QuantumCircuit(qreq)\n\n\ncircuit3.draw('mpl')\n\n\n\n\n\n\n\n\n\ncircuit4 = QuantumCircuit(3,3)\ncircuit4.draw(\"mpl\")\n\n\n\n\n\n\n\n\n\nfrom qiskit_aer.primitives import Sampler\n\nfrom qiskit import QuantumCircuit\nfrom qiskit.visualization import plot_histogram\n\nbell = QuantumCircuit(2)\nbell.h(0)\nbell.measure_all()\n \n# execute the quantum circuit\nquasi_dists = Sampler().run(bell, shots=1000).result().quasi_dists[0]\nprint(quasi_dists)\n\n{1: 0.503, 0: 0.497}\n\n\n\nplot_histogram(quasi_dists)\n\n\n\n\n\n\n\n\n\nPomiar w obwodzie i wielokrotne uruchamianie układu"
  },
  {
    "objectID": "labs/cw1.html#tworzenie-stanu-jednokubitowego",
    "href": "labs/cw1.html#tworzenie-stanu-jednokubitowego",
    "title": "Biblioteka Qiskit wprowadzenie",
    "section": "Tworzenie stanu jednokubitowego",
    "text": "Tworzenie stanu jednokubitowego\n\\[\n\\ket{\\psi}=\\ket{0}\n\\]\nDo inspekcji stanu układu (bez jego pomiaru) mozemy uzyć backend statevector_simulator.\n\nfrom math import pi\nfrom qiskit import QuantumCircuit\nfrom qiskit.quantum_info import Statevector\n \n# Create a Bell state for demonstration\nqc = QuantumCircuit(1)\npsi = Statevector(qc)\n\n\npsi.draw('latex') # metoda wypisująca wektor stanu w latexu\n\n\\[ |0\\rangle\\]\n\n\n\nfrom qiskit.visualization import plot_bloch_multivector\nplot_bloch_multivector(psi)\n\n\n\n\n\n\n\n\n\nqc = QuantumCircuit(1)\nqc.h(0)\nstate = Statevector(qc)\nstate.draw('latex')\n\n\\[\\frac{\\sqrt{2}}{2} |0\\rangle+\\frac{\\sqrt{2}}{2} |1\\rangle\\]\n\n\n\nplot_bloch_multivector(state)\n\n\n\n\n\n\n\n\n\ninicjalizacja stanu\n\nfrom qiskit import QuantumCircuit\nqc = QuantumCircuit(1)\ninitial_state = [0,1]\nqc.initialize(initial_state, 0)\nqc.draw('mpl')\n\n\n\n\n\n\n\n\n\nstate = Statevector(qc)\nstate.draw('latex')\n\n\\[ |1\\rangle\\]\n\n\n\ninitial_state = [1,1]\nqc = QuantumCircuit(1)\nqc.initialize(initial_state, 0)\nresult.draw('latex')\n\n\n---------------------------------------------------------------------------\nQiskitError                               Traceback (most recent call last)\nCell In[43], line 3\n      1 initial_state = [1,1]\n      2 qc = QuantumCircuit(1)\n----&gt; 3 qc.initialize(initial_state, 0)\n      4 result.draw('latex')\n\nFile ~/Documents/Dokumenty – MacBook Air (Sebastian)/qml2024/venv/lib/python3.12/site-packages/qiskit/circuit/quantumcircuit.py:5866, in QuantumCircuit.initialize(self, params, qubits, normalize)\n   5862     qubits = [qubits]\n   5864 num_qubits = len(qubits) if isinstance(params, int) else None\n-&gt; 5866 return self.append(Initialize(params, num_qubits, normalize), qubits, copy=False)\n\nFile ~/Documents/Dokumenty – MacBook Air (Sebastian)/qml2024/venv/lib/python3.12/site-packages/qiskit/circuit/library/data_preparation/initializer.py:75, in Initialize.__init__(self, params, num_qubits, normalize)\n     50 def __init__(\n     51     self,\n     52     params: Statevector | Sequence[complex] | str | int,\n     53     num_qubits: int | None = None,\n     54     normalize: bool = False,\n     55 ) -&gt; None:\n     56     r\"\"\"\n     57     Args:\n     58         params: The state to initialize to, can be either of the following.\n   (...)\n     73         normalize: Whether to normalize an input array to a unit vector.\n     74     \"\"\"\n---&gt; 75     self._stateprep = StatePreparation(params, num_qubits, normalize=normalize)\n     77     super().__init__(\"initialize\", self._stateprep.num_qubits, 0, self._stateprep.params)\n\nFile ~/Documents/Dokumenty – MacBook Air (Sebastian)/qml2024/venv/lib/python3.12/site-packages/qiskit/circuit/library/data_preparation/state_preparation.py:109, in StatePreparation.__init__(self, params, num_qubits, inverse, label, normalize)\n    107         params = np.array(params, dtype=np.complex128) / norm\n    108     elif not math.isclose(norm, 1.0, abs_tol=_EPS):\n--&gt; 109         raise QiskitError(f\"Sum of amplitudes-squared is not 1, but {norm}.\")\n    111 num_qubits = self._get_num_qubits(num_qubits, params)\n    112 params = [params] if isinstance(params, int) else params\n\nQiskitError: 'Sum of amplitudes-squared is not 1, but 1.4142135623730951.'\n\n\n\n\nfrom math import sqrt\ninitial_state = [1/sqrt(2),1/sqrt(2)]\nqc = QuantumCircuit(1)\nqc.initialize(initial_state, 0)\nresult = Statevector(qc)\nresult.draw('latex')\n\n\\[\\frac{\\sqrt{2}}{2} |0\\rangle+\\frac{\\sqrt{2}}{2} |1\\rangle\\]\n\n\n\nfrom math import sqrt\ninitial_state = [1/2,sqrt(3)/2]\nqc = QuantumCircuit(1)\nqc.initialize(initial_state, 0)\nresult = Statevector(qc)\nresult.draw('latex')\n\n\\[\\frac{1}{2} |0\\rangle+\\frac{\\sqrt{3}}{2} |1\\rangle\\]\n\n\n\nfrom math import pi, cos, sin \ndef get_state(theta):\n    return [cos(theta/2), sin(theta/2)]\n\ntheta = -pi/2\n\nqc = QuantumCircuit(1)\nqc.initialize(get_state(theta), 0)\nresult = Statevector(qc)\nresult.draw('latex')\n\n\\[\\frac{\\sqrt{2}}{2} |0\\rangle- \\frac{\\sqrt{2}}{2} |1\\rangle\\]\n\n\n\n# execute the quantum circuit\nqc.measure_all()\nquasi_dists = Sampler().run(qc, shots=1000).result().quasi_dists[0]\nprint(quasi_dists)\n\n{0: 0.523, 1: 0.477}\n\n\n\nplot_histogram(quasi_dists)"
  },
  {
    "objectID": "labs/cw1.html#tworzenie-stanu-dwukubitowego",
    "href": "labs/cw1.html#tworzenie-stanu-dwukubitowego",
    "title": "Biblioteka Qiskit wprowadzenie",
    "section": "Tworzenie stanu dwukubitowego",
    "text": "Tworzenie stanu dwukubitowego\n\\[\n\\ket{00}, \\ket{01}, \\ket{10}, \\ket{11}\n\\]\n\nqc = QuantumCircuit(2)\nresult = Statevector(qc)\nresult.draw('latex')\n\n\\[ |00\\rangle\\]\n\n\n\nqc = QuantumCircuit(2)\nqc.h(0)\nqc.h(1)\nresult = Statevector(qc)\nresult.draw('latex')\n\n\\[\\frac{1}{2} |00\\rangle+\\frac{1}{2} |01\\rangle+\\frac{1}{2} |10\\rangle+\\frac{1}{2} |11\\rangle\\]\n\n\n\nplot_bloch_multivector(result)\n\n\n\n\n\n\n\n\n\nqc = QuantumCircuit(2)\nqc.h(0)\nqc.cx(0,1)\nresult = Statevector(qc)\nresult.draw('latex')\n\n\\[\\frac{\\sqrt{2}}{2} |00\\rangle+\\frac{\\sqrt{2}}{2} |11\\rangle\\]\n\n\n\nplot_bloch_multivector(result)"
  },
  {
    "objectID": "labs/cw1.html#tworzenie-stanu-trzy-kubitowego",
    "href": "labs/cw1.html#tworzenie-stanu-trzy-kubitowego",
    "title": "Biblioteka Qiskit wprowadzenie",
    "section": "Tworzenie stanu trzy-kubitowego",
    "text": "Tworzenie stanu trzy-kubitowego\n\\[\n\\ket{000}, \\ket{001}, \\ket{010}, \\ket{011}, \\ket{100}, \\ket{101}, \\ket{110}, \\ket{111}\\]\n\nqc = QuantumCircuit(3)\nqc.x(0) # uwaga 0 wy kubit jest oznaczony od w stanie od prawej - nie od lewej (jak index)\n#qc.x(1)\nStatevector(qc).draw('latex')\n\n\\[ |001\\rangle\\]\n\n\nUruchom powyższy kod usuwajac poszczegolne komentarze i sprawdz wynik.\n\nfrom qiskit.visualization import circuit_drawer\n\nq = QuantumRegister(1)\nc = ClassicalRegister(1)\ncircuit = QuantumCircuit(q, c)\ncircuit.h(0)\ncircuit.measure(q, c)\ncircuit_drawer(circuit)\n\n      ┌───┐┌─┐\n  q7: ┤ H ├┤M├\n      └───┘└╥┘\nc4: 1/══════╩═\n            0"
  },
  {
    "objectID": "labs/cw4.html",
    "href": "labs/cw4.html",
    "title": "Algorytmy kwantowe - przegląd",
    "section": "",
    "text": "Wyobraźmy sobie, ze ktoś ukrywa dwie monety w rękach. Poniewaz kazda moneta ma dwie strony (niezalezne) dwie ręcę mogą ukryć 4 mozliwe sytuacje. Jeśli w obu rękach mamy te same strony mozemy powiedziec o stałej funkcji, która przyjmuje lewą rękę a zwraca prawą. Jeśli wynik ulega zmianie mozemy powiedziec o funkcji zbalansowanej.\nW przypadku monet, nawet jeśli odsłonimy monetę w lewej ręce nie jesteśmy w stanie stwierdzić, bez sprawdzenia, co jest w prawej ręce. A teraz wyobraź sobie 100 takich rąk. Aby mieć pewność czy masz doczynienia z funkcją stałą musisz (czy chcesz czy nie) sprawdzić wszystkie mozliwości - wystarczy jedna róznica, aby funkcja była zbalansowana.\nCo powiesz jeśli stwierdzę, ze kwantowy komputer moze rozwiązać problem otwierając wszystkie ręcę za jednym razem?\nDla funkcji boolowskiej \\(f:\\{0,1\\} \\rightarrow \\{0, 1\\}\\) mówimy, ze \\(f\\) jest zbalansowana jeśli \\(f(0) \\neq f(1)\\) lub stała jeśli \\(f(0) = f(1)\\).\n\\[\nf(0) = 0 = \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\n\\] \\[\nf(1) = 0 = \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\n\\] Taka funkcja moze być reprezentowana jako macierz: \\[\nf = \\begin{pmatrix} 1 \\,\\, 1 \\\\0 \\,\\, 0 \\end{pmatrix}\n\\]\nJednak, aby była uzyteczna dla obliczeń kwantowych musi być odwracalna i unitarna.\nAby sprawdzić i jednoznacznie stwierdzić czy funkcja, którą się posługujemy jest stała czy zbalansowana w klasycznym przypadku musimy sprawdzić oba wyniki \\(f(0)\\) i \\(f(1)\\).\nBardzo często tego typu modelowanie (funkcję) nazywa się black box lub oracle.\nTworzymy dwa rejestry kwantowe - input \\(|x\\rangle\\) i output \\(|y\\rangle\\)\nDefiniujemy rejestr outputu jako wynik działania XOR na rejestrze inputu: \\[\nU_f: |x\\rangle ,|y\\rangle \\to |x\\rangle, |y \\oplus f(x)\\rangle\n\\] \\[\nU^{-1}_f: |x\\rangle, |y \\oplus f(x)\\rangle \\to |x\\rangle ,|y\\rangle\n\\]\n\nfrom qiskit import QuantumCircuit\nfrom qiskit.visualization import plot_bloch_multivector\nfrom qiskit.quantum_info import Statevector\n\nKrok 1: tworzymy obwod kwantowy dla dwóch kubitów: - pierwszy w stanie 0 - drugi w stanie 1\n\n# krok 1 2 kubitowy circuit\nqc = QuantumCircuit(2,1)\nqc.i(0)\nqc.x(1)\nqc.draw(output='mpl')\n\n\n\n\n\n\n\n\nKrok 2: hadamard na oba kubity\n\n# krok 2 hadamard na oba kubity - tworzymy superpozycje aby działać na 4 stanach jednocześnie\n\nqc.h(0)\nqc.h(1)\nqc.draw(output='mpl')\n\n\n\n\n\n\n\n\n\nstate = Statevector(qc)\ndisplay(plot_bloch_multivector(state, reverse_bits=True))\n\n\n\n\n\n\n\n\n\nstate.draw('latex')\n\n\\[\\frac{1}{2} |00\\rangle+\\frac{1}{2} |01\\rangle- \\frac{1}{2} |10\\rangle- \\frac{1}{2} |11\\rangle\\]\n\n\nPo zastosowaniu bramek hadamarda, otrzymujemy: \\[\n\\frac{1}{2}(|00\\rangle + |01\\rangle - |10\\rangle - |11\\rangle)  \\,\\,\\,\\,\\,\\,\\,\\, Eq. 1\n\\]\nZauwazmy ze drugi kubit jest w stanie - (\\(H|1\\rangle\\)), mozemy zdefiniować powyzsze rownanie jako:\n\\[ \\frac{(-1)^{f(0)}|0\\rangle+(-1)^{f(1)}|1\\rangle}{\\sqrt{2}}\\cdot{\\frac{(|0\\rangle-|1\\rangle)}{\\sqrt{2}}}\\]\nJeśli \\(f\\) jest stała, wtedy \\(f(0)=0\\) i \\((-1)^0=1\\) oraz \\(f(1)=0\\)\notrzymujemy:\n\\[\\pm{\\frac{(|0\\rangle+|1\\rangle)}{\\sqrt{2}}}{\\frac{(|0\\rangle-|1\\rangle)}{\\sqrt{2}}}\\]\nW przeciwnym przypadku (\\(f\\) jest zbalansowana): \\[\\pm{\\frac{(|0\\rangle-|1\\rangle)}{\\sqrt{2}}}{\\frac{(|0\\rangle-|1\\rangle)}{\\sqrt{2}}}\\]\nDla stałej funkcji pierwszy kubit jest ustawiony jako: \\[{\\frac{(|0\\rangle+|1\\rangle)}{\\sqrt{2}}}\\] ponowne zastosowanie bramki H zwroci nam stan \\(|0\\rangle\\).\nAnalogicznie, dla zbalansowanej funkcji dostaniemy stan \\(|1\\rangle\\).\nNa podstawie tej informacji, mierząc TYLKO pierwszy kubit (po zastosowaniu bramki H) otrzymamy stan \\(|0\\rangle\\) albo \\(|1\\rangle\\) co daje jednoznaczą odpowiedź z jaką funkcją mamy do czynienia.\nNastępnym krokiem jest zastosowanie bramki działającej na dwóch kubitach. \\[\nU_f: \\ket{x} ,\\ket{y} \\to \\ket{x}, \\ket{y \\oplus f(x)}\n\\] Zakładając \\(f(x)=x\\) wyrocznię (oracle) mozna zrealizować jako bramkę CNOT.\nJeśli \\(f(x)=0\\) wyrocznią jest bramka Id.\n\nqc.cx(0,1)\nqc.draw(output='mpl')\n\n\n\n\n\n\n\n\n\nqc.h(0)\nqc.h(1)\nqc.draw(output='mpl')\n\n\n\n\n\n\n\n\n\nstate = Statevector(qc)\ndisplay(plot_bloch_multivector(state, reverse_bits=True))\n\n\n\n\n\n\n\n\n\nstate.draw('latex')\n\n\\[ |11\\rangle\\]\n\n\n\nfrom qiskit import execute, Aer\n\nqc.measure(0,0)\ndisplay(qc.draw(output='mpl'))\n\nbackend = Aer.get_backend('qasm_simulator')\nresult = execute(qc, backend, shots=1000).result()\ncounts = result.get_counts(qc)\n\n\n\n\n\n\n\n\n\nfrom qiskit.visualization import plot_histogram\ndisplay(plot_histogram(counts))\n\n\n\n\n\n\n\n\n\n\nqc2 = QuantumCircuit(2,1)\nqc2.h(0)\nqc2.x(1)\nqc2.h(0)\nqc2.h(1)\nqc2.measure(0,0)\ndisplay(qc2.draw(output='mpl'))\nbackend = Aer.get_backend('qasm_simulator')\nresult2 = execute(qc2, backend, shots=1000).result()\ncounts2 = result2.get_counts(qc2)\ndisplay(plot_histogram(counts2))"
  },
  {
    "objectID": "labs/cw4.html#deutsch-algorithm",
    "href": "labs/cw4.html#deutsch-algorithm",
    "title": "Algorytmy kwantowe - przegląd",
    "section": "",
    "text": "Wyobraźmy sobie, ze ktoś ukrywa dwie monety w rękach. Poniewaz kazda moneta ma dwie strony (niezalezne) dwie ręcę mogą ukryć 4 mozliwe sytuacje. Jeśli w obu rękach mamy te same strony mozemy powiedziec o stałej funkcji, która przyjmuje lewą rękę a zwraca prawą. Jeśli wynik ulega zmianie mozemy powiedziec o funkcji zbalansowanej.\nW przypadku monet, nawet jeśli odsłonimy monetę w lewej ręce nie jesteśmy w stanie stwierdzić, bez sprawdzenia, co jest w prawej ręce. A teraz wyobraź sobie 100 takich rąk. Aby mieć pewność czy masz doczynienia z funkcją stałą musisz (czy chcesz czy nie) sprawdzić wszystkie mozliwości - wystarczy jedna róznica, aby funkcja była zbalansowana.\nCo powiesz jeśli stwierdzę, ze kwantowy komputer moze rozwiązać problem otwierając wszystkie ręcę za jednym razem?\nDla funkcji boolowskiej \\(f:\\{0,1\\} \\rightarrow \\{0, 1\\}\\) mówimy, ze \\(f\\) jest zbalansowana jeśli \\(f(0) \\neq f(1)\\) lub stała jeśli \\(f(0) = f(1)\\).\n\\[\nf(0) = 0 = \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\n\\] \\[\nf(1) = 0 = \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}\n\\] Taka funkcja moze być reprezentowana jako macierz: \\[\nf = \\begin{pmatrix} 1 \\,\\, 1 \\\\0 \\,\\, 0 \\end{pmatrix}\n\\]\nJednak, aby była uzyteczna dla obliczeń kwantowych musi być odwracalna i unitarna.\nAby sprawdzić i jednoznacznie stwierdzić czy funkcja, którą się posługujemy jest stała czy zbalansowana w klasycznym przypadku musimy sprawdzić oba wyniki \\(f(0)\\) i \\(f(1)\\).\nBardzo często tego typu modelowanie (funkcję) nazywa się black box lub oracle.\nTworzymy dwa rejestry kwantowe - input \\(|x\\rangle\\) i output \\(|y\\rangle\\)\nDefiniujemy rejestr outputu jako wynik działania XOR na rejestrze inputu: \\[\nU_f: |x\\rangle ,|y\\rangle \\to |x\\rangle, |y \\oplus f(x)\\rangle\n\\] \\[\nU^{-1}_f: |x\\rangle, |y \\oplus f(x)\\rangle \\to |x\\rangle ,|y\\rangle\n\\]\n\nfrom qiskit import QuantumCircuit\nfrom qiskit.visualization import plot_bloch_multivector\nfrom qiskit.quantum_info import Statevector\n\nKrok 1: tworzymy obwod kwantowy dla dwóch kubitów: - pierwszy w stanie 0 - drugi w stanie 1\n\n# krok 1 2 kubitowy circuit\nqc = QuantumCircuit(2,1)\nqc.i(0)\nqc.x(1)\nqc.draw(output='mpl')\n\n\n\n\n\n\n\n\nKrok 2: hadamard na oba kubity\n\n# krok 2 hadamard na oba kubity - tworzymy superpozycje aby działać na 4 stanach jednocześnie\n\nqc.h(0)\nqc.h(1)\nqc.draw(output='mpl')\n\n\n\n\n\n\n\n\n\nstate = Statevector(qc)\ndisplay(plot_bloch_multivector(state, reverse_bits=True))\n\n\n\n\n\n\n\n\n\nstate.draw('latex')\n\n\\[\\frac{1}{2} |00\\rangle+\\frac{1}{2} |01\\rangle- \\frac{1}{2} |10\\rangle- \\frac{1}{2} |11\\rangle\\]\n\n\nPo zastosowaniu bramek hadamarda, otrzymujemy: \\[\n\\frac{1}{2}(|00\\rangle + |01\\rangle - |10\\rangle - |11\\rangle)  \\,\\,\\,\\,\\,\\,\\,\\, Eq. 1\n\\]\nZauwazmy ze drugi kubit jest w stanie - (\\(H|1\\rangle\\)), mozemy zdefiniować powyzsze rownanie jako:\n\\[ \\frac{(-1)^{f(0)}|0\\rangle+(-1)^{f(1)}|1\\rangle}{\\sqrt{2}}\\cdot{\\frac{(|0\\rangle-|1\\rangle)}{\\sqrt{2}}}\\]\nJeśli \\(f\\) jest stała, wtedy \\(f(0)=0\\) i \\((-1)^0=1\\) oraz \\(f(1)=0\\)\notrzymujemy:\n\\[\\pm{\\frac{(|0\\rangle+|1\\rangle)}{\\sqrt{2}}}{\\frac{(|0\\rangle-|1\\rangle)}{\\sqrt{2}}}\\]\nW przeciwnym przypadku (\\(f\\) jest zbalansowana): \\[\\pm{\\frac{(|0\\rangle-|1\\rangle)}{\\sqrt{2}}}{\\frac{(|0\\rangle-|1\\rangle)}{\\sqrt{2}}}\\]\nDla stałej funkcji pierwszy kubit jest ustawiony jako: \\[{\\frac{(|0\\rangle+|1\\rangle)}{\\sqrt{2}}}\\] ponowne zastosowanie bramki H zwroci nam stan \\(|0\\rangle\\).\nAnalogicznie, dla zbalansowanej funkcji dostaniemy stan \\(|1\\rangle\\).\nNa podstawie tej informacji, mierząc TYLKO pierwszy kubit (po zastosowaniu bramki H) otrzymamy stan \\(|0\\rangle\\) albo \\(|1\\rangle\\) co daje jednoznaczą odpowiedź z jaką funkcją mamy do czynienia.\nNastępnym krokiem jest zastosowanie bramki działającej na dwóch kubitach. \\[\nU_f: \\ket{x} ,\\ket{y} \\to \\ket{x}, \\ket{y \\oplus f(x)}\n\\] Zakładając \\(f(x)=x\\) wyrocznię (oracle) mozna zrealizować jako bramkę CNOT.\nJeśli \\(f(x)=0\\) wyrocznią jest bramka Id.\n\nqc.cx(0,1)\nqc.draw(output='mpl')\n\n\n\n\n\n\n\n\n\nqc.h(0)\nqc.h(1)\nqc.draw(output='mpl')\n\n\n\n\n\n\n\n\n\nstate = Statevector(qc)\ndisplay(plot_bloch_multivector(state, reverse_bits=True))\n\n\n\n\n\n\n\n\n\nstate.draw('latex')\n\n\\[ |11\\rangle\\]\n\n\n\nfrom qiskit import execute, Aer\n\nqc.measure(0,0)\ndisplay(qc.draw(output='mpl'))\n\nbackend = Aer.get_backend('qasm_simulator')\nresult = execute(qc, backend, shots=1000).result()\ncounts = result.get_counts(qc)\n\n\n\n\n\n\n\n\n\nfrom qiskit.visualization import plot_histogram\ndisplay(plot_histogram(counts))\n\n\n\n\n\n\n\n\n\n\nqc2 = QuantumCircuit(2,1)\nqc2.h(0)\nqc2.x(1)\nqc2.h(0)\nqc2.h(1)\nqc2.measure(0,0)\ndisplay(qc2.draw(output='mpl'))\nbackend = Aer.get_backend('qasm_simulator')\nresult2 = execute(qc2, backend, shots=1000).result()\ncounts2 = result2.get_counts(qc2)\ndisplay(plot_histogram(counts2))"
  },
  {
    "objectID": "labs/cw4.html#szyfrowanie",
    "href": "labs/cw4.html#szyfrowanie",
    "title": "Algorytmy kwantowe - przegląd",
    "section": "Szyfrowanie",
    "text": "Szyfrowanie\n\nBB84 - Kawantowa dystrybucja klucza\nKwantowa dystrybucja klucza z ang. Quantum Key Distribution – QKD.\nPytania nad którymi warto się zastanowić:\n\nJak dzielić klucz bez jego fizycznego wysyłania do odbiorcy przez sieć?\nJak zakodować tekst z uzyciem klucza (To juz znamy z XOR)?\nDlaczego QKD działa?\nJak zasymulować algorytm BB84 w qiskit?\n\nRozwazmy klasyczną Alicję i Boba, którzy chcą podzielić się poufną informacją. Zawartość przekazywanej wiadomości nie ma znaczenia.\n\n\nTworzenie klucza\nAlicja i Bob wymieniają się inforamcją o bazach i patrzą tylko na te kubity dla których pomiary wykonywane były w tej samej bazie. Prawdopodobieństwo, ze ich bazy się zgadzają wynosi 1/2.\n\nfrom qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit\nq = QuantumRegister(10)\nc = ClassicalRegister(10)\n\nqc = QuantumCircuit(q,c)\nqc.h(q)\nqc.barrier()\nqc.measure(q,c)\nqc.draw('mpl')\n\n\n\n\n\n\n\n\n\njob = execute(qc, Aer.get_backend('qasm_simulator'), shots=1)\ncounts = job.result().get_counts()\ncounts\n\n{'1100001100': 1}\n\n\n\nwiadomosc = list(counts)[0]\nwiadomosc_odw = wiadomosc[::-1]\n\nMoze przekazać je bezpośrednio do Boba “kablem”. Jednak w trakcie przekazywania informacji moze przejąć ją kazdy (Eve), kto tylko podłączy się “gdzieś w środku”. Przejmie bity i ich kopię prześle do Boba.\nPoniewaz znamy juz zasady kwantowego generowania obwodów zobaczmy czy dodanie bramki hadamarda cos zmieni. Alicja po wygenerowaniu losowej informacji przetwarza kazdy pojedynczy bit bramką Hadamarda. Bob podczas odczytu korzysta z faktu, iz ponowne zastosowanie bramki Hadamarda pozwoli odzyskać zakodowany bit.\n\nfrom random import randrange\nfrom qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister, execute, Aer\n\nq = QuantumRegister(10)\nc = ClassicalRegister(10)\n\nqc = QuantumCircuit(q,c)\n\nfor i, bit in enumerate(wiadomosc_odw):\n    if bit == '1':\n        qc.x(q[i])\n    else:\n        qc.id(q[i])\n\nqc.h(q)\nqc.barrier()\n\nqc.h(q)\nqc.barrier()\n\nqc.measure(q,c)\ndisplay(qc.draw('mpl'))\n\njob = execute(qc, Aer.get_backend('qasm_simulator'), shots=1)\ncounts = job.result().get_counts()\nprint(f\"Alicja: {wiadomosc}, Bob: {counts}\")\n\n\n\n\n\n\n\n\nAlicja: 1100001100, Bob: {'1100001100': 1}\n\n\nSkoro Bob w prosty sposób moze odzyskać informację Eve równiez moze zastosować analogiczny proces. Najpierw zastosuje bramkę H, odczyta informację i wygeneruje kopię informacji klasycznej przemnozoną przez bramki Hadamarda. Bob nadal odbierze prawidłową inforamcję.\nCzy istnieje jakaś mozliwosc zabezpieczenia sie przed odzyskaniem informacji przez Eve? Pokazaliśmy właśnie, ze sama bramka H nie wystarczy.\nPomysł Alicji jest następujący:\n\nZastosujmy bramki hadamarda do losowo wybranych bitów informacji.\n\nCzy widzisz analogię z losowaniem bazy ??\nPostępując w ten sposób Eve nie ma mozliwosci zdecydowac dla których bitów powinna zastosować H a dla ktorych nie. A to znaczy, ze rowniez nie ma mozliwosci wysłać skopiowanej informacji dla Boba. Stanu kubitu nie da się sklonować.\nPytanie co ma zrobić Bob. Przekazanie informacji, które bity zostały potraktowane bramką H, w sposób klasyczny nie ma sensu.\nOdpowiedzią jest schemat znany jako BB84 zaproponowany przez Chales’a Bennett’a i Gilles’a Brassard’a w 1984.\nZałózmy, ze kazdy (Alicja i Bob) mają własne generatory losowego przypisywania bramek H.\n\nq = QuantumRegister(10)\nc = ClassicalRegister(10)\n\nqc = QuantumCircuit(q,c)\n# Alicja \nfor i, bit in enumerate(wiadomosc_odw):\n    if bit == '1':\n        qc.x(q[i])\n    else:\n        qc.id(q[i])\n\nfor i in range(10):\n    if randrange(2) == 0:\n        qc.h(q[i])\n\nqc.barrier()\n# Bob\nbob_pattern = []\nfor i in range(10):\n    if randrange(2) == 0:\n        qc.h(q[i])\n        bob_pattern.append('H')\n    else:\n        bob_pattern.append('-')\nqc.barrier()\n\nqc.measure(q,c)\ndisplay(qc.draw('mpl'))\n\njob = execute(qc, Aer.get_backend('qasm_simulator'), shots=1)\ncounts = job.result().get_counts()\nprint(f\"Alicja: {wiadomosc}, Bob: {counts}\")\nprint(\"bob's hadamard pattern\",bob_pattern)\n\n\n\n\n\n\n\n\nAlicja: 1100001100, Bob: {'1100001101': 1}\nbob's hadamard pattern ['H', '-', '-', 'H', 'H', '-', 'H', 'H', '-', '-']\n\n\nJakie mozliwosci się pojawiają\n\nOboje sosują H do swoich bitów albo oboje ich nie stosują - dzięki temu Bob odzyskuje prawidłowy Bit.\nJedno stosuje a drugie nie stosuje bramki H. Tutaj niezaleznie, od opcji Bob zawsze zmierzy losowo 0 lub 1.\n\nPrawdopodobieństwo, ze oboje wybrali to samo = \\(1/2\\)\nTrochę inne podejście:\nAlicja genruje dwa losowe stringi bitowe (zawierają tylko 0 i 1). - pierwszy string koduje dwie bazy: 0 to baza obliczeniowa a 1 to baza Hadamarda. - drugi koduje stany kubitów: w bazie hadamarda 0 to stan “+” a 1 to stan “-”, w bazie obliczeniowej – wiadomo.\nAlicja przesyła do Boba 10 kubitów.\n\nfrom qiskit import QuantumCircuit, execute, Aer\nfrom qiskit.visualization import plot_histogram, plot_bloch_multivector\nfrom numpy.random import randint\nimport numpy as np\nfrom qiskit.providers.aer import QasmSimulator\n%matplotlib inline\n\n\nnum_qubits = 10 \nalice_basis = np.random.randint(2, size=num_qubits)\nalice_state = np.random.randint(2, size=num_qubits)\nbob_basis = np.random.randint(2, size=num_qubits)\n\nprint(f\"Alice's State:\\t {np.array2string(alice_state)}\")\nprint(f\"Alice's Bases:\\t {np.array2string(alice_basis)}\")\nprint(f\"Bob's Bases:\\t {np.array2string(bob_basis)}\")\n\nAlice's State:   [1 0 1 0 0 1 1 0 0 1]\nAlice's Bases:   [1 0 1 0 0 0 0 0 1 1]\nBob's Bases:     [1 0 0 1 0 1 1 1 0 1]\n\n\n\nzawsze gdy chcemy przeslac 1 w kubicie alicja aplikuje bramkę X do odpowiedniego kubitu. Dla 0 nie musi podejmować zadnego działania (lub id).\nJeśli ma zakodować coś w bazie Hadamarda uzywa bramki Hadamarda na odpowiedni kubit\nwysyła przygotowane kubity do Boba\nBob mierzy kubity zgodnie z przygotowanym przez siebie stringiem baz. Jeśli ma zmierzyć coś w bazie Hadamarda aplikuje bramkę H. Jeśli w bazie obliczeniowej nie robi niczego.\n\nfilm\n\ndef bb84_circuit(state, basis, measurement_basis):\n   \n    #state: array of 0s and 1s denoting the state to be encoded\n    #basis: array of 0s and 1s denoting the basis to be used for encoding\n                #0 -&gt; Computational Basis\n                #1 -&gt; Hadamard Basis\n    #meas_basis: array of 0s and 1s denoting the basis to be used for measurement\n                #0 -&gt; Computational Basis\n                #1 -&gt; Hadamard Basis\n    \n    num_qubits = len(state)\n    \n    circuit = QuantumCircuit(num_qubits)\n\n    # Sender prepares qubits\n    for i in range(len(basis)):\n        if state[i] == 1:\n            circuit.x(i)\n        if basis[i] == 1:\n            circuit.h(i)\n   \n\n    # Measuring action performed by Bob\n    for i in range(len(measurement_basis)):\n        if measurement_basis[i] == 1:\n            circuit.h(i)\n\n       \n    circuit.measure_all()\n    \n    return circuit\n\n\ncircuit = bb84_circuit(alice_state, alice_basis, bob_basis)\nkey = execute(circuit.reverse_bits(),backend=QasmSimulator(),shots=1).result().get_counts().most_frequent()\nencryption_key = ''\nfor i in range(num_qubits):\n    if alice_basis[i] == bob_basis[i]:\n         encryption_key += str(key[i])\nprint(f\"Key: {encryption_key}\")\n\nKey: 1001\n\n\nOther, a nice version from book\n\nimport random\nfrom qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister, Aer, execute\n\nNUMBER_OF_CIRCUITS = 100\nDOES_EVE_EXIST = True\nCHECK_MARK = u'\\u2713'\n\ndef create_circuits(how_many, does_eve_exist):\n    circuits = []\n    for i in range(how_many):\n        circuits.append(make_new_circuit(does_eve_exist))\n    return circuits\n\ndef make_new_circuit(eve_exists):\n    circ = create_registers(eve_exists)\n    alice_q = circ.qubits[0]\n    bob_q = circ.qubits[1]\n    bob_c = circ.clbits[0]\n    circ = setup_alice(circ)\n    circ.swap(alice_q, bob_q)\n    if eve_exists:\n        circ = setup_eve(circ)\n    circ = setup_bob(circ)\n    return circ\n\ndef create_registers(eve_exists):\n    alice_q = QuantumRegister(1, 'alice_q')\n    bob_q = QuantumRegister(1, 'bob_q')\n    bob_c = ClassicalRegister(1, 'bob_c')\n    if eve_exists:\n        eve_c = ClassicalRegister(1, 'eve_c')\n        circ = QuantumCircuit(alice_q, bob_q, bob_c, eve_c)\n    else:\n        circ = QuantumCircuit(alice_q, bob_q, bob_c)\n    return circ\n\n\ndef setup_alice(circ):\n    alice_q = circ.qubits[0]\n    if random.getrandbits(1):\n        circ.x(alice_q)\n    if random.getrandbits(1):\n        circ.h(alice_q)\n    return circ\n\ndef setup_bob(circ):\n    bob_q = circ.qubits[1]\n    bob_c = circ.clbits[0]\n    if random.getrandbits(1):\n        circ.h(bob_q)\n    circ.measure(bob_q, bob_c)\n    return circ\n\ndef setup_eve(circ):\n    bob_q = circ.qubits[1]\n    eve_c = circ.clbits[1]\n    circ.barrier()\n    circ.measure(bob_q, eve_c)\n    circ.barrier()\n    return circ\n\ndef run_the_job(circuits):\n    device = Aer.get_backend('qasm_simulator')\n    job = execute(circuits, backend=device, shots=1, memory=True)\n    return job.result()\n\ndef print_alice_bits(circuits):\n    print('alice bits: ', end='')\n    for circ in circuits:\n        bit = 1 if 'x' in circ.count_ops() else 0\n        print(bit, end='')\n    print('')\n\ndef print_bob_bits(circuits, result):\n    print('bob bits  : ', end='')\n    for circ in circuits:\n        memory = result.get_memory(circ)\n        print(bob_bit_value(circ, memory), end='')\n    print('')\n\ndef bob_bit_value(circ, memory):\n    return memory[0][0]\n\ndef had_agreement(circ):\n    gate_counts = circ.count_ops()\n    return not ('h' in gate_counts and gate_counts['h'] == 1)\n\ndef print_had_agreements(circuits):\n    number_of_agreements = 0\n    print('hads agree? ', end='')\n    for circ in circuits:\n        if had_agreement(circ):\n            print(CHECK_MARK, end='')\n            number_of_agreements += 1\n        else:\n            print(' ', end='')\n    print('')\n    return number_of_agreements\n\ndef print_bit_agreements(circuits, result,number_of_agreements):\n    number_tested = 0\n    is_eve_detected = False\n    i = 0\n    print('bits agree? ', end='')\n    while number_tested &lt; number_of_agreements // 2:\n        if had_agreement(circuits[i]):\n            if bit_value_agreement(circuits[i], result):\n                print(CHECK_MARK, end='')\n                number_tested += 1\n            else:\n                is_eve_detected = True\n                print('X')\n                break\n        else:\n            print(' ', end='')\n        i += 1\n    print()\n    return i, is_eve_detected\n\ndef bit_value_agreement(circ, result):\n    memory = result.get_memory(circ)\n    return alice_bit_value(circ) == int(\n        bob_bit_value(circ, memory))\n\ndef alice_bit_value(circ):\n    return 1 if 'x' in circ.count_ops() else 0\n\ndef print_key(circuits, number_of_circuits, how_many_for_testing):\n    print('key      :', end='')\n    for i in range(how_many_for_testing + 1):\n        print(' ', end='')\n    for i in range(i, NUMBER_OF_CIRCUITS):\n        if had_agreement(circuits[i]):\n            print(alice_bit_value(circuits[i]), end='')\n        else:\n            print(' ', end='')\n\n\ncircuits = create_circuits(NUMBER_OF_CIRCUITS, DOES_EVE_EXIST) # 1\nresult = run_the_job(circuits) # 2\nprint_alice_bits(circuits) # 3\nprint_bob_bits(circuits, result) # 4\nnumber_of_agreements = print_had_agreements(circuits) # 5\nhow_many_for_testing, is_eve_detected = print_bit_agreements(circuits, result,number_of_agreements) # 6\nif is_eve_detected:  # 7\n    print('INTRUDER ALERT!')\nelse:\n    print_key (circuits, NUMBER_OF_CIRCUITS, how_many_for_testing)\n\nalice bits: 0101111111011100100000010011000110111101101111000111010101011011110010001001011100010001011010110000\nbob bits  : 0100110000110001000000010010001010000101111111001111110111001011101011001001011001010100001000100010\nhads agree? ✓✓✓✓ ✓✓  ✓✓  ✓ ✓✓✓✓✓ ✓✓ ✓  ✓✓   ✓✓ ✓   ✓✓✓✓ ✓   ✓✓ ✓    ✓ ✓✓ ✓✓   ✓✓✓   ✓     ✓    ✓✓  ✓✓ ✓✓✓✓  ✓ ✓✓\nbits agree? ✓✓✓X\n\nINTRUDER ALERT!"
  },
  {
    "objectID": "labs/cw4.html#kwantowa-teleportacja",
    "href": "labs/cw4.html#kwantowa-teleportacja",
    "title": "Algorytmy kwantowe - przegląd",
    "section": "Kwantowa teleportacja",
    "text": "Kwantowa teleportacja\nQuantum teleportation czyli kwantowa teleportacja to technika przekazu informacji (kwantowej) między wysyłającym i odbierającym. Jak poprzednio mozemy przyjąć, ze Alicja wysyła wiadomość do Boba. Informacja, którą chce przesłać Alicja to stan \\(|\\psi\\rangle=\\alpha |0\\rangle +\\beta |1\\rangle\\).\nZgodnie z twierdzeniem o zakazie klonowania, nie mozna wykonac dokładnej kopii dowolnego stanu kwantowego. Oznacza to, ze Alicja nie moze przygotować swojego stanu i go sklonować w celu wysłania go do Boba.\nUzyjemy dwóch klasycznych bitów informacji oraz splątanej pary kubitów. Ponadto trzeba pamiętać, ze w chwili kiedy Alicja wysyła swój Kubit niszczy jego stan u siebie.\n\nThe Quantum Teleportation Protocol\n\nimport numpy as np\nimport random\nfrom qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister, execute, Aer\nfrom qiskit.result import marginal_counts\n\nPotrzebujemy obwodu składającego się z 3 kubitów: 1. qubit Alicji 2. qubit splatany 1 (Eva-Alicja) 3. qubit splatany 2 (Eva-Bob)\ni 3 klasycznych rejestrów.\n\ndef create_registers():\n    alice_q = QuantumRegister(1, 'alice (q)')\n    eva_alice_q = QuantumRegister(1, 'eva/alice (q)')\n    eva_bob_q = QuantumRegister(1, 'eva/bob (q)')\n    bob_c = ClassicalRegister(3, 'bob (c)')\n    return QuantumCircuit(alice_q, eva_alice_q, eva_bob_q, bob_c)\n\n\nqc = create_registers()\nqc.draw('mpl')\n\n\n\n\n\n\n\n\nPrzygotujmy losowy stan Alicji, który prześlemy\n\ndef generate_amplitudes():\n    alpha = np.sqrt(random.uniform(0,1))\n    beta = np.sqrt(1 - alpha**2)\n    return alpha, beta\n\ngenerate_amplitudes()\n\n(0.5455988535218319, 0.8380464730763221)\n\n\nDodajemy bramki\n\ndef add_gates(circ, alpha, beta):\n    # stan alicji q0\n    circ.initialize([alpha, beta], 0)\n    circ.barrier()\n    # stan splątany q1 i q2\n    circ.h(1)\n    circ.cnot(1,2)\n    circ.barrier()\n    #  alicja stosuje bramki łacząc swoj kubit i otrzymany kubit od evy\n    circ.cnot(0,1)\n    circ.h(0)\n    circ.barrier()\n    # alicja mierzy kubity i przesyla info do Boba\n    circ.measure(0,0)\n    circ.measure(1,1)\n    # realizacja boba\n    with circ.if_test((1, 1)):\n        circ.x(2)\n    with circ.if_test((0, 1)):\n        circ.z(2)\n    circ.measure(2, 2)\n    return circ\n\n\nalpha, beta = generate_amplitudes()\nprint(f'alpha = {alpha:.4f},  beta = {beta:.4f}')\ncirc = create_registers()\ncirc = add_gates(circ, alpha, beta)\ndisplay(circ.draw('mpl', cregbundle=False))\n\nalpha = 0.7765,  beta = 0.6301\n\n\n\n\n\n\n\n\n\n\ndevice = Aer.get_backend(\"qasm_simulator\")\nshots = 1000\njob = device.run(circ, shots=shots)\nresult = job.result()\ncounts = result.get_counts(circ)\ncounts_m = marginal_counts(counts, [2])\nnumber_of_0s = counts_m.get('0')\nnumber_of_1s = counts_m.get('1')\nalpha = np.sqrt(number_of_0s / shots)\nbeta = np.sqrt(number_of_1s / shots)\nprint(\"stan =  ({:.4f}, {:.4f})\".format(alpha, beta))\n\nstan =  (0.7880, 0.6156)\n\n\nStep 4: Bob dekoder\nBob, który posiada kubit 3 q2 (wcześniej splątany) stosuje następujące bramki w zaleznosci od klasycznej informacji, którą orzymał:\n\\[00 \\to Identity \\]\n\\[01 \\to Apply 𝑋 gate \\]\n\\[ 10 \\to Apply Z gate \\]\n\\[ 11 \\to Apply 𝑍𝑋 gate \\]"
  },
  {
    "objectID": "labs/cw4.html#shor",
    "href": "labs/cw4.html#shor",
    "title": "Algorytmy kwantowe - przegląd",
    "section": "Shor",
    "text": "Shor\n\n\ndef initialize_qubits(given_circuit, n, m):\n\n    given_circuit.h(range(n))\n    given_circuit.x(n+m-1)\n\nfrom qiskit import QuantumCircuit\n\ndef c_amod15(a, x):\n    if a not in [2,7,8,11,13]:\n        raise ValueError(\"'a' must be 2,7,8,11,13\")\n    U = QuantumCircuit(4)        \n    for iteration in range(x):\n        if a in [2,13]:\n            U.swap(0,1)\n            U.swap(1,2)\n            U.swap(2,3)\n        if a in [7,8]:\n            U.swap(2,3)\n            U.swap(1,2)\n            U.swap(0,1)\n        if a == 11:\n            U.swap(1,3)\n            U.swap(0,2)\n        if a in [7,11,13]:\n            for q in range(4):\n                U.x(q)\n    U = U.to_gate()\n    U.name = \"%i^%i mod 15\" % (a, x)\n    c_U = U.control()\n    return c_U\n\ndef modular_exponentiation(circuit, n, m, a):\n    for x in range(n):\n        exponent = 2**x\n        circuit.append(c_amod15(a, exponent), [x] + list(range(n, n+m)))\n\nfrom qiskit.circuit.library import QFT\n\ndef inverse_qft(circuit, measurement_qubits):\n    circuit.append(QFT( len(measurement_qubits), do_swaps=False).inverse(), measurement_qubits)\n\ndef shors_algorithm(n, m, a):\n    qc = QuantumCircuit(n+m, n)\n    initialize_qubits(qc, n, m)\n    qc.barrier()\n    modular_exponentiation(qc, n, m, a)\n    qc.barrier()\n    inverse_qft(qc, range(n))\n    qc.measure(range(n), range(n))\n    return qc\n    \nn = 4; m = 4; a = 7\nfinal_circuit = shors_algorithm(n, m, a)\nfinal_circuit.draw('mpl')\n\n\n\n\n\n\n\n\n\nsimulator = Aer.get_backend('qasm_simulator')\ncounts = execute(final_circuit, backend=simulator, shots=1000).result().get_counts(final_circuit)\n\n\nfor measured_value in counts:\n    print(f\"{int(measured_value[::-1], 2)}\")\n\n9\n14\n10\n15\n11\n13\n6\n12\n8\n7\n0\n4\n5\n\n\n\nfrom math import gcd\nfor i in counts:\n    measured_value = int(i[::-1], 2)\n    if measured_value % 2 != 0:\n        print(\"Measured value not even\")\n        continue #measured value should be even as we are doing a^(r/2) mod N and r/2 should be int\n    x = int((a ** (measured_value/2)) % 15)\n    if (x + 1) % 15 == 0:\n        continue\n    factors = gcd(x + 1, 15), gcd(x - 1, 15) #we saw earlier that a^(r/2)+1 or a^(r/2)-1 should be a factor of 15\n    print(factors)\n\nMeasured value not even\n(1, 3)\n(1, 3)\nMeasured value not even\nMeasured value not even\nMeasured value not even\n(1, 3)\n(5, 3)\n(1, 15)\nMeasured value not even\n(1, 15)\n(5, 3)\nMeasured value not even"
  },
  {
    "objectID": "labs/cw6.html",
    "href": "labs/cw6.html",
    "title": "Kodowanie danych",
    "section": "",
    "text": "Tak jak pokazywaliśmy w części wykładowej, będziemy zainsteresowanie przetwarzaniem klasycznych danych za pomocą kwantowych układów.\nRozwazmy klasyczny zbiór danych \\(X\\) realizujący \\(N\\) zmiennych i składający się z \\(M\\) wierszy. \\[\nX = \\{ x^1, \\dots, x^m,\\dots x^M \\}\n\\]\nChcemy przetworzyć otrzymane dane tak, by mozna je wykorzystać do obliczeń kwantowych. Procedury, które pokazemy mozna traktować jako penwego rodzaju embedding."
  },
  {
    "objectID": "labs/cw6.html#basis-encoding",
    "href": "labs/cw6.html#basis-encoding",
    "title": "Kodowanie danych",
    "section": "Basis encoding",
    "text": "Basis encoding"
  },
  {
    "objectID": "labs/ml.html",
    "href": "labs/ml.html",
    "title": "Kwantowy model klasyfikatora wariacyjnego",
    "section": "",
    "text": "from sklearn.datasets import load_iris\niris = load_iris()\n\n\nprint(iris.DESCR)\n\n.. _iris_dataset:\n\nIris plants dataset\n--------------------\n\n**Data Set Characteristics:**\n\n    :Number of Instances: 150 (50 in each of three classes)\n    :Number of Attributes: 4 numeric, predictive attributes and the class\n    :Attribute Information:\n        - sepal length in cm\n        - sepal width in cm\n        - petal length in cm\n        - petal width in cm\n        - class:\n                - Iris-Setosa\n                - Iris-Versicolour\n                - Iris-Virginica\n                \n    :Summary Statistics:\n\n    ============== ==== ==== ======= ===== ====================\n                    Min  Max   Mean    SD   Class Correlation\n    ============== ==== ==== ======= ===== ====================\n    sepal length:   4.3  7.9   5.84   0.83    0.7826\n    sepal width:    2.0  4.4   3.05   0.43   -0.4194\n    petal length:   1.0  6.9   3.76   1.76    0.9490  (high!)\n    petal width:    0.1  2.5   1.20   0.76    0.9565  (high!)\n    ============== ==== ==== ======= ===== ====================\n\n    :Missing Attribute Values: None\n    :Class Distribution: 33.3% for each of 3 classes.\n    :Creator: R.A. Fisher\n    :Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov)\n    :Date: July, 1988\n\nThe famous Iris database, first used by Sir R.A. Fisher. The dataset is taken\nfrom Fisher's paper. Note that it's the same as in R, but not as in the UCI\nMachine Learning Repository, which has two wrong data points.\n\nThis is perhaps the best known database to be found in the\npattern recognition literature.  Fisher's paper is a classic in the field and\nis referenced frequently to this day.  (See Duda & Hart, for example.)  The\ndata set contains 3 classes of 50 instances each, where each class refers to a\ntype of iris plant.  One class is linearly separable from the other 2; the\nlatter are NOT linearly separable from each other.\n\n|details-start|\n**References**\n|details-split|\n\n- Fisher, R.A. \"The use of multiple measurements in taxonomic problems\"\n  Annual Eugenics, 7, Part II, 179-188 (1936); also in \"Contributions to\n  Mathematical Statistics\" (John Wiley, NY, 1950).\n- Duda, R.O., & Hart, P.E. (1973) Pattern Classification and Scene Analysis.\n  (Q327.D83) John Wiley & Sons.  ISBN 0-471-22361-1.  See page 218.\n- Dasarathy, B.V. (1980) \"Nosing Around the Neighborhood: A New System\n  Structure and Classification Rule for Recognition in Partially Exposed\n  Environments\".  IEEE Transactions on Pattern Analysis and Machine\n  Intelligence, Vol. PAMI-2, No. 1, 67-71.\n- Gates, G.W. (1972) \"The Reduced Nearest Neighbor Rule\".  IEEE Transactions\n  on Information Theory, May 1972, 431-433.\n- See also: 1988 MLC Proceedings, 54-64.  Cheeseman et al\"s AUTOCLASS II\n  conceptual clustering system finds 3 classes in the data.\n- Many, many more ...\n\n|details-end|\n\n\n\nfeatures = iris.data\nlabels = iris.target"
  },
  {
    "objectID": "labs/ml.html#załadowanie-danych",
    "href": "labs/ml.html#załadowanie-danych",
    "title": "Kwantowy model klasyfikatora wariacyjnego",
    "section": "",
    "text": "from sklearn.datasets import load_iris\niris = load_iris()\n\n\nprint(iris.DESCR)\n\n.. _iris_dataset:\n\nIris plants dataset\n--------------------\n\n**Data Set Characteristics:**\n\n    :Number of Instances: 150 (50 in each of three classes)\n    :Number of Attributes: 4 numeric, predictive attributes and the class\n    :Attribute Information:\n        - sepal length in cm\n        - sepal width in cm\n        - petal length in cm\n        - petal width in cm\n        - class:\n                - Iris-Setosa\n                - Iris-Versicolour\n                - Iris-Virginica\n                \n    :Summary Statistics:\n\n    ============== ==== ==== ======= ===== ====================\n                    Min  Max   Mean    SD   Class Correlation\n    ============== ==== ==== ======= ===== ====================\n    sepal length:   4.3  7.9   5.84   0.83    0.7826\n    sepal width:    2.0  4.4   3.05   0.43   -0.4194\n    petal length:   1.0  6.9   3.76   1.76    0.9490  (high!)\n    petal width:    0.1  2.5   1.20   0.76    0.9565  (high!)\n    ============== ==== ==== ======= ===== ====================\n\n    :Missing Attribute Values: None\n    :Class Distribution: 33.3% for each of 3 classes.\n    :Creator: R.A. Fisher\n    :Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov)\n    :Date: July, 1988\n\nThe famous Iris database, first used by Sir R.A. Fisher. The dataset is taken\nfrom Fisher's paper. Note that it's the same as in R, but not as in the UCI\nMachine Learning Repository, which has two wrong data points.\n\nThis is perhaps the best known database to be found in the\npattern recognition literature.  Fisher's paper is a classic in the field and\nis referenced frequently to this day.  (See Duda & Hart, for example.)  The\ndata set contains 3 classes of 50 instances each, where each class refers to a\ntype of iris plant.  One class is linearly separable from the other 2; the\nlatter are NOT linearly separable from each other.\n\n|details-start|\n**References**\n|details-split|\n\n- Fisher, R.A. \"The use of multiple measurements in taxonomic problems\"\n  Annual Eugenics, 7, Part II, 179-188 (1936); also in \"Contributions to\n  Mathematical Statistics\" (John Wiley, NY, 1950).\n- Duda, R.O., & Hart, P.E. (1973) Pattern Classification and Scene Analysis.\n  (Q327.D83) John Wiley & Sons.  ISBN 0-471-22361-1.  See page 218.\n- Dasarathy, B.V. (1980) \"Nosing Around the Neighborhood: A New System\n  Structure and Classification Rule for Recognition in Partially Exposed\n  Environments\".  IEEE Transactions on Pattern Analysis and Machine\n  Intelligence, Vol. PAMI-2, No. 1, 67-71.\n- Gates, G.W. (1972) \"The Reduced Nearest Neighbor Rule\".  IEEE Transactions\n  on Information Theory, May 1972, 431-433.\n- See also: 1988 MLC Proceedings, 54-64.  Cheeseman et al\"s AUTOCLASS II\n  conceptual clustering system finds 3 classes in the data.\n- Many, many more ...\n\n|details-end|\n\n\n\nfeatures = iris.data\nlabels = iris.target"
  },
  {
    "objectID": "labs/ml.html#normalizacja",
    "href": "labs/ml.html#normalizacja",
    "title": "Kwantowy model klasyfikatora wariacyjnego",
    "section": "Normalizacja",
    "text": "Normalizacja\nZastosujemy prostą transformację aby przedstawić wszystkie zmienne w tej samej skali. Zamienimy wszystkie zmienne do skali \\(\\left[ 0,1 \\right]\\). Normalizacja danych to technika uczenia maszynowego przetworzenia danych pozwalająca na (często) lepszą i szybszą zbiezność algorytmów.\n\nfrom sklearn.preprocessing import MinMaxScaler\n\nfeatures = MinMaxScaler().fit_transform(features)\n\n\nimport pandas as pd \nimport numpy as np\nimport seaborn as sns\n\ndf = pd.DataFrame(features, columns=iris.feature_names)\ndf['class'] = pd.Series(iris.target)\ndf.head()\n\n\n\n\n\n\n\n\nsepal length (cm)\nsepal width (cm)\npetal length (cm)\npetal width (cm)\nclass\n\n\n\n\n0\n0.222222\n0.625000\n0.067797\n0.041667\n0\n\n\n1\n0.166667\n0.416667\n0.067797\n0.041667\n0\n\n\n2\n0.111111\n0.500000\n0.050847\n0.041667\n0\n\n\n3\n0.083333\n0.458333\n0.084746\n0.041667\n0\n\n\n4\n0.194444\n0.666667\n0.067797\n0.041667\n0\n\n\n\n\n\n\n\n\nsns.pairplot(df, hue=\"class\", palette=\"tab10\")\n\n\n\n\n\n\n\n\nZ otrzymanego wykresu łatwo zauwazyć iz klasa 0 jest dobrze separowalna szczególnie dla zmiennej sepal width."
  },
  {
    "objectID": "labs/ml.html#klasyczny-model-svc",
    "href": "labs/ml.html#klasyczny-model-svc",
    "title": "Kwantowy model klasyfikatora wariacyjnego",
    "section": "Klasyczny model SVC",
    "text": "Klasyczny model SVC\n\nfrom sklearn.model_selection import train_test_split\nfrom qiskit_algorithms.utils import algorithm_globals\n\n\n\nalgorithm_globals.random_seed = 123\ntrain_features, test_features, train_labels, test_labels = train_test_split(\n    features, labels, train_size=0.8, random_state=algorithm_globals.random_seed\n)\n\nfrom sklearn.svm import SVC\n\nsvc = SVC()\n_ = svc.fit(train_features, train_labels)\n\ntrain_score_c4 = svc.score(train_features, train_labels)\ntest_score_c4 = svc.score(test_features, test_labels)\n\nprint(f\"Classical SVC on the training dataset: {train_score_c4:.2f}\")\nprint(f\"Classical SVC on the test dataset:     {test_score_c4:.2f}\")\n\nClassical SVC on the training dataset: 0.99\nClassical SVC on the test dataset:     0.97"
  },
  {
    "objectID": "labs/ml.html#kodowanie-danych---zzfeaturemap",
    "href": "labs/ml.html#kodowanie-danych---zzfeaturemap",
    "title": "Kwantowy model klasyfikatora wariacyjnego",
    "section": "Kodowanie danych - ZZFeatureMap",
    "text": "Kodowanie danych - ZZFeatureMap\n\nfrom qiskit.circuit.library import ZZFeatureMap\nnum_features = features.shape[1]\n\nfeature_map = ZZFeatureMap(feature_dimension=num_features, reps=1)\nfeature_map.decompose().draw(output=\"mpl\", fold=20)\n\n\n\n\n\n\n\n\nPrzyjrzyj się uwaznie i zobacz, ze obwód ten jest parametryzowany przez cztery zmienne \\(x \\left[ 0 \\right],\\ldots x\\left[3\\right]\\)."
  },
  {
    "objectID": "labs/ml.html#wybór-modelu---realamplitudes",
    "href": "labs/ml.html#wybór-modelu---realamplitudes",
    "title": "Kwantowy model klasyfikatora wariacyjnego",
    "section": "Wybór modelu - RealAmplitudes",
    "text": "Wybór modelu - RealAmplitudes\n\nfrom qiskit.circuit.library import RealAmplitudes\n\nansatz = RealAmplitudes(num_qubits=num_features, reps=3)\nansatz.decompose().draw(output=\"mpl\", fold=20)"
  },
  {
    "objectID": "labs/ml.html#wybór-optymalizatora-cobyla",
    "href": "labs/ml.html#wybór-optymalizatora-cobyla",
    "title": "Kwantowy model klasyfikatora wariacyjnego",
    "section": "Wybór optymalizatora COBYLA",
    "text": "Wybór optymalizatora COBYLA\n\nfrom qiskit_algorithms.optimizers import COBYLA\n\noptimizer = COBYLA(maxiter=100)\n\n\nfrom qiskit.primitives import Sampler\n\nsampler = Sampler()\n\nZdefiniujmy dodatkową funkcję pozwalającą przeglądać postęp uczenia modelu.\n\nfrom matplotlib import pyplot as plt\nfrom IPython.display import clear_output\n\nobjective_func_vals = []\nplt.rcParams[\"figure.figsize\"] = (12, 6)\n\n\ndef callback_graph(weights, obj_func_eval):\n    clear_output(wait=True)\n    objective_func_vals.append(obj_func_eval)\n    plt.title(\"Objective function value against iteration\")\n    plt.xlabel(\"Iteration\")\n    plt.ylabel(\"Objective function value\")\n    plt.plot(range(len(objective_func_vals)), objective_func_vals)\n    plt.show()"
  },
  {
    "objectID": "labs/ml.html#variational-quantum-classifier",
    "href": "labs/ml.html#variational-quantum-classifier",
    "title": "Kwantowy model klasyfikatora wariacyjnego",
    "section": "Variational Quantum Classifier",
    "text": "Variational Quantum Classifier\n\nimport time\nfrom qiskit_machine_learning.algorithms.classifiers import VQC\n\nvqc = VQC(\n    sampler=sampler,\n    feature_map=feature_map,\n    ansatz=ansatz,\n    optimizer=optimizer,\n    callback=callback_graph,\n)\n\n# clear objective value history\nobjective_func_vals = []\n\nstart = time.time()\nvqc.fit(train_features, train_labels)\nelapsed = time.time() - start\n\nprint(f\"Training time: {round(elapsed)} seconds\")\n\n\n\n\n\n\n\n\nTraining time: 37 seconds\n\n\n\ntrain_score_q4 = vqc.score(train_features, train_labels)\ntest_score_q4 = vqc.score(test_features, test_labels)\n\nprint(f\"Quantum VQC on the training dataset: {train_score_q4:.2f}\")\nprint(f\"Quantum VQC on the test dataset:     {test_score_q4:.2f}\")\n\nQuantum VQC on the training dataset: 0.85\nQuantum VQC on the test dataset:     0.87"
  },
  {
    "objectID": "labs/PennyLane_version/PQC_optim.html",
    "href": "labs/PennyLane_version/PQC_optim.html",
    "title": "Wstęp do kwantowego uczenia maszynowego",
    "section": "",
    "text": "import pennylane as qml\nfrom pennylane import numpy as np\n\n\ndev = qml.device('default.qubit', wires=2)\n\n@qml.qnode(dev)\ndef circuit(params):\n    qml.RX(params[0], wires=0)\n    qml.RY(params[1], wires=1)\n    qml.CNOT(wires=[0,1])\n    return qml.expval(qml.PauliZ(1))\n\n\nparams = np.array([0.1, 0.2], requires_grad=True)\nprint(\"Expectation value of circuit:\", circuit(params))\n\nExpectation value of circuit: 0.9751703272018161\n\n\n\nprint(\"Drawing of circuit:\\n\")\nprint(qml.draw_mpl(circuit)(params))\n\nDrawing of circuit:\n\n(&lt;Figure size 500x300 with 1 Axes&gt;, &lt;Axes: &gt;)\n\n\n\n\n\n\n\n\n\n\nopt = qml.GradientDescentOptimizer(stepsize=0.01)\n\niterations = 100\n\ncosts = []\n\nfor _ in range(iterations):\n    params, cost = opt.step_and_cost(circuit, params)\n    costs.append(cost)\n\n\nimport matplotlib.pyplot as plt\n\ncosts.append(circuit(params))\nplt.plot(costs, \"-o\")\nplt.xlabel(\"Iterations\")\nplt.ylabel(\"Cost\")\n\nprint(\"Minimized circuit output:\", circuit(params))\nprint(\"Optimized parameters:\", params)\n\nMinimized circuit output: -0.9999999215488692\nOptimized parameters: [1.79012316e-04 3.14123930e+00]"
  },
  {
    "objectID": "labs/PennyLane_version/singlequbit.html",
    "href": "labs/PennyLane_version/singlequbit.html",
    "title": "X and H gates Flipping bits",
    "section": "",
    "text": "Learning Objectives:\n\nExplain why we can understand how an operation works by applying it to the basis states.\nDescribe the action of the X gate, its matrix representation, and eigenvalues.\nDescribe the action of the Hadamard gate, its matrix representation, and eigenvalues.\n\nA common use of the gate is in initializing the state of a qubit at the beginning of an algorithm. Quite often, we would like our qubits to start in state (which is the default in PennyLane), however there are many cases where we instead would like to start from Complete the function below by using qml.PauliX to initialize the qubit’s state to or based on an input flag. Then, use qml.QubitUnitary to apply the provided unitary U.\n\\[\n\\newcommand{\\bra}[1]{\\left \\langle #1 \\right \\rvert}\n\\newcommand{\\ket}[1]{\\left \\rvert #1 \\right \\rangle}\n\\newcommand{\\braket}[2]{\\left \\langle #1 \\middle \\rvert #2 \\right \\rangle}\n\\]\n\ndev = qml.device(\"default.qubit\", wires=1)\n\nU = np.array([[1, 1], [1, -1]]) / np.sqrt(2)\n\n\n@qml.qnode(dev)\ndef varied_initial_state(state):\n    \"\"\"Complete the function such that we can apply the operation U to\n    either |0&gt; or |1&gt; depending on the input argument flag.\n\n    Args:\n        state (int): Either 0 or 1. If 1, prepare the qubit in state |1&gt;,\n            otherwise, leave it in state 0.\n\n    Returns:\n        np.array[complex]: The state of the qubit after the operations.\n    \"\"\"\n    ##################\n    # YOUR CODE HERE #\n    ##################\n\n    # KEEP THE QUBIT IN |0&gt; OR CHANGE IT TO |1&gt; DEPENDING ON THE state PARAMETER\n\n    # APPLY U TO THE STATE\n\n    return qml.state()"
  },
  {
    "objectID": "labs/PennyLane_version/cw1.html",
    "href": "labs/PennyLane_version/cw1.html",
    "title": "Pennylane wprowadzenie",
    "section": "",
    "text": "Obiekt Qnode będziemy używać do definicji obwodów kwantowych. Obiekt ten wspiera wiele bibliotek do obliczeń numerycznych, tzw. interfejsów: - NumPy, - PyTorch, - TensorFlow, - JAX\nDomyślnie QNodes używa interfejs NumPy. Dzięki niemu mamy dostęp do optymalizatorów domyślnych z biblioteki Pennylane. Pozostałe interferjsy wymagają użycia optymalizatorów z innych pakietów.\nPennyLane oferuje kilka symulatorów: - ‘default.qubit’, - ‘default.mixed’, - ‘lightning.qubit’, - ‘default.gaussian’, - ‘default.clifford’, - ‘default.tensor’"
  },
  {
    "objectID": "labs/PennyLane_version/cw1.html#stany-jedno-kubitowe",
    "href": "labs/PennyLane_version/cw1.html#stany-jedno-kubitowe",
    "title": "Pennylane wprowadzenie",
    "section": "STANY JEDNO KUBITOWE",
    "text": "STANY JEDNO KUBITOWE\n\\[\n\\ket{\\psi}=\\ket{0}\n\\]\n\ndev = qml.device(\"default.qubit\", wires=1)\n@qml.qnode(dev)\ndef qc():\n    return qml.state()\n\n\nqc()\n\ntensor([1.+0.j, 0.+0.j], requires_grad=True)\n\n\n\\[\n\\ket{\\psi}=\\ket{1}\n\\]\n\ndev = qml.device(\"default.qubit\", wires=1)\n@qml.qnode(dev)\ndef qc():\n    qml.X(wires=0)\n    return qml.state()\n\n\nqc()\n\ntensor([0.+0.j, 1.+0.j], requires_grad=True)\n\n\n\\[\n\\ket{\\psi}=\\frac{1}{\\sqrt{2}} (\\ket{0} + \\ket{1} )\n\\]\n\ndev = qml.device(\"default.qubit\", wires=1)\n@qml.qnode(dev)\ndef qc():\n    qml.Hadamard(wires=0)\n    return qml.state()\n\nqc()\n\ntensor([0.70710678+0.j, 0.70710678+0.j], requires_grad=True)"
  },
  {
    "objectID": "labs/PennyLane_version/cw1.html#stany-dwu-kubitowe",
    "href": "labs/PennyLane_version/cw1.html#stany-dwu-kubitowe",
    "title": "Pennylane wprowadzenie",
    "section": "STANY DWU KUBITOWE",
    "text": "STANY DWU KUBITOWE\n\\[\n\\ket{\\psi}=\\ket{00}\n\\] \\[\n\\ket{\\psi}=\\ket{01}\n\\] \\[\n\\ket{\\psi}=\\ket{10}\n\\] \\[\n\\ket{\\psi}=\\ket{11}\n\\]\n\ndev = qml.device(\"default.qubit\", wires=2)\n@qml.qnode(dev)\ndef qc():\n    #qml.X(wires=1)\n    #qml.X(wires=0)\n    return qml.state()\n\nqc()\n\ntensor([1.+0.j, 0.+0.j, 0.+0.j, 0.+0.j], requires_grad=True)\n\n\n\\[\n\\ket{\\psi}=\\frac{1}{2}\\left( \\ket{00} + \\ket{01} + \\ket{10} + \\ket{11} \\right)\n\\]\n\ndev = qml.device(\"default.qubit\", wires=2)\n@qml.qnode(dev)\ndef qc():\n    qml.Hadamard(wires=0)\n    qml.Hadamard(wires=1)\n    return qml.state()\n\nqc()\n\ntensor([0.5+0.j, 0.5+0.j, 0.5+0.j, 0.5+0.j], requires_grad=True)"
  },
  {
    "objectID": "labs/cw2.html",
    "href": "labs/cw2.html",
    "title": "Bramki jednokubitowe",
    "section": "",
    "text": "Bramka X\nBramka X-gate reprezentowana jest przez macierz Pauli-X :\n\\[\nX = \\begin{pmatrix}\n0 & 1 \\\\\n1 & 0 \\\\\n\\end{pmatrix}\n\\]\nBramka X obraca kubit w kierunku osi na sferze Bloch’a o \\(\\pi\\) radianów. Zmienia \\(|0\\rangle\\) na \\(|1\\rangle\\) oraz \\(|1\\rangle\\) na \\(|0\\rangle\\). Jest często nazywana kwantowym odpowiednikiem bramki NOT lub określana jako bit-flip.\n\nfrom qiskit import QuantumCircuit, Aer, execute\n\nx_gate = QuantumCircuit(1)\nx_gate.x(0)\nx_gate.draw(output='mpl')\n\n\n\n\n\n\n\n\n\nfrom qiskit.visualization import plot_bloch_multivector\nbackend = Aer.get_backend('statevector_simulator')\nstate = execute(x_gate, backend).result().get_statevector()\nstate.draw('latex')\nplot_bloch_multivector(state)\n\n\n\n\n\n\n\n\n\nx_gate2 = QuantumCircuit(1)\nx_gate2.x(0)\nx_gate2.x(0)\nx_gate2.draw('mpl')\n\n\n\n\n\n\n\n\n\nbackend = Aer.get_backend('statevector_simulator')\nstate = execute(x_gate2, backend).result().get_statevector()\nstate.draw('latex')\nplot_bloch_multivector(state)\n\n\n\n\n\n\n\n\n\n\nbramka SX\nBramka SX jest pierwiastkiem kwadratowym bramki X. Dwukrotne zastosowanie powinno reazlizowac bramkę X.\n\\[\nSX = \\frac{1}{2}\\begin{pmatrix}\n1+i & 1-i \\\\\n1-i & 1+i \\\\\n\\end{pmatrix}\n\\]\n\nsx_gate = QuantumCircuit(1)\nsx_gate.sx(0)  \nsx_gate.draw(output='mpl')\n\n\n\n\n\n\n\n\n\nbackend = Aer.get_backend('statevector_simulator')\nresult = execute(sx_gate, backend).result().get_statevector()\nplot_bloch_multivector(result)\n\n\n\n\n\n\n\n\n\nsx_gate2 = QuantumCircuit(1)\nsx_gate2.sx(0)\nsx_gate2.sx(0)\nsx_gate2.draw(output='mpl')\n\n\n\n\n\n\n\n\n\nbackend = Aer.get_backend('statevector_simulator')\nresult = execute(sx_gate2, backend).result().get_statevector()\nplot_bloch_multivector(result)\n\n\n\n\n\n\n\n\n\n\nZ gate\n\\[\nZ = \\begin{pmatrix}\n1 & 0 \\\\\n0 & -1 \\\\\n\\end{pmatrix}\n\\]\n\nz_gate = QuantumCircuit(1)\nz_gate.z(0)  \nz_gate.draw(output='mpl')\n\n\n\n\n\n\n\n\n\nbackend = Aer.get_backend('statevector_simulator')\nresult = execute(z_gate, backend).result().get_statevector()\nplot_bloch_multivector(result)\n\n\n\n\n\n\n\n\n\n\nRZ gate\n\\[\nRZ = \\begin{pmatrix}\n1 & 0 \\\\\n0 & e ^{i \\phi } \\\\\n\\end{pmatrix}\n\\]\n\nimport numpy as np\npi = np.pi\nrz_gate = QuantumCircuit(1)\nrz_gate.rz(pi/2, 0)\nrz_gate.draw(output='mpl')\n\n\n\n\n\n\n\n\n\nbackend = Aer.get_backend('statevector_simulator')\nresult = execute(rz_gate, backend).result().get_statevector()\nplot_bloch_multivector(result)\n\n\n\n\n\n\n\n\n\nrz_gate2 = QuantumCircuit(1)\nrz_gate2.sx(0)\nrz_gate2.rz(pi/2, 0)\nrz_gate2.draw(output='mpl')\n\n\n\n\n\n\n\n\n\nbackend = Aer.get_backend('statevector_simulator')\nresult = execute(rz_gate2, backend).result().get_statevector()\nplot_bloch_multivector(result)\n\n\n\n\n\n\n\n\n\n\nHadamard gate\nBramka Hadamarda przetwarza stan \\(|0\\rangle\\) na kombinacje liniowa (superpozycje) \\(\\frac{|0\\rangle + |1\\rangle}{\\sqrt{2}}\\), co oznacza, że pomiar zwróci z takim samym prawdopodobieństwem stanu 1 lub 0. Stan ten często oznaczany jest jako: \\(|+\\rangle\\).\n\\[\nH = \\frac{1}{\\sqrt{2}}\\begin{pmatrix}\n1 & 1 \\\\\n1 & -1 \\\\\n\\end{pmatrix}\n\\]\n\nh_gate = QuantumCircuit(1)\nh_gate.h(0)\nh_gate.draw(output='mpl')\n\n\n\n\n\n\n\n\n\nbackend = Aer.get_backend('statevector_simulator')\nresult = execute(h_gate, backend).result().get_statevector()\nplot_bloch_multivector(result)\n\n\n\n\n\n\n\n\n\nh_gate2 = QuantumCircuit(1)\nh_gate2.h(0)\nh_gate2.h(0)\nh_gate2.draw('mpl')\n\n\n\n\n\n\n\n\n\nbackend = Aer.get_backend('statevector_simulator')\nstate = execute(h_gate2, backend).result().get_statevector()\ndisplay(state.draw('latex'))\nplot_bloch_multivector(state)\n\n\\[ |0\\rangle\\]\n\n\n\n\n\n\n\n\n\n\n\nBramka parametryzowana Ry\n\\[\nR(\\alpha) = \\begin{pmatrix}\n\\cos{\\alpha} & -\\sin{\\alpha}\\\\\n\\sin{\\alpha} & \\cos{\\alpha} \\\\\n\\end{pmatrix}\n\\]\n\nry_gate = QuantumCircuit(1)\npi = np.pi\nry_gate.ry(pi/2,0)\nry_gate.draw(output='mpl')\n\n\n\n\n\n\n\n\n\nbackend = Aer.get_backend('statevector_simulator')\nresult = execute(ry_gate, backend).result().get_statevector()\nplot_bloch_multivector(result)\n\n\n\n\n\n\n\n\n\n\nCX gate (CNOT gate)\nThe controlled NOT (or CNOT or CX) gate acts on two qubits. It performs the NOT operation (equivalent to applying an X gate) on the second qubit only when the first qubit is \\(\\ket{1}\\) and otherwise leaves it unchanged.\nNote: Qiskit numbers the bits in a string from right to left.\n\\[\nCX = \\begin{pmatrix}\n1 & 0 & 0 & 0  \\\\\n0 & 1 & 0 & 0 \\\\\n0 & 0 & 0 & 1 \\\\\n0 & 0 & 1 & 0 \\\\\n\\end{pmatrix}\n\\]\n\ncx_gate = QuantumCircuit(2)\ncx_gate.cx(0,1)\ncx_gate.draw(output='mpl')\n\n\n\n\n\n\n\n\n\nZadanie 1 - Sprawdź działanie bramki - CZ na dwukubitowym układzie. Następnie zbuduj drugi obwód złożony z bramek: H(1) (na drugim kubicie) CX(0,1) i H(1) - co możesz zaobserwować?\nZadanie 2 - zbuduj obwod kwantowy złożony z 10 kubitów, zastosuj bramkę H(0) do kubitu 0 i 9 bramek CNOT gdzie kubitem kontrolnym jest kubit 0 a targety to kubity od 1 do 9. Mozesz uzyć do pętli albo listy.\nZadanie 3 - zbuduj obwod kwantowy złożony z 10 kubitów. Zastosuj bramkę H do całego rejestru kwantowego.Następnie dodaj bramkę CNOT gdzie kubitami kontrolnymi sa kubity 1-9 a target to kubit 0. Następnie dodaj bramkę H do każdego kubitu.\n\nPrzydatne definicje dla obwodów\n\nfrom qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit\n\nq = QuantumRegister(10)\nc = ClassicalRegister(10)\nci = QuantumCircuit(q,c)\nci.h(q)\nci.draw('mpl')\n\n\n\n\n\n\n\n\n\n# CCCH gate\nfrom qiskit.circuit.library.standard_gates import HGate\n\nCCCH = HGate().control(3)\n\nci.append(CCCH, [0,1,3,2])\nci.draw('mpl')"
  },
  {
    "objectID": "labs/pytorch_classical_models.html",
    "href": "labs/pytorch_classical_models.html",
    "title": "Wstęp do kwantowego uczenia maszynowego",
    "section": "",
    "text": "X, y = make_regression(n_samples=500, n_features=1, random_state=0, noise=10.0)\nplot_regression(X, y)\n\n\nsk_model = LinearRegression().fit(X, y)\nplot_regression(X, y, sk_model.predict(X))\n\n\nclass linearRegression(nn.Module):  # our class inherits from nn.Module and we can call it anything we like\n    def __init__(self, input_size, output_size):\n        super().__init__()                                # super().__init__() makes our class inherit everything from torch.nn.Module\n        self.linear = nn.Linear(input_size, output_size)  # this is a simple linear layer: wX + b\n\n    def forward(self, x):\n        out = self.linear(x)\n        return out\n\n\nmodel = linearRegression(input_size=1, output_size=1)\n\n\nprint(model)"
  },
  {
    "objectID": "labs/cw3.html",
    "href": "labs/cw3.html",
    "title": "Bramki wielokubitowe",
    "section": "",
    "text": "from qiskit import (QuantumCircuit, QuantumRegister, ClassicalRegister, \n                    execute, Aer, __qiskit_version__)\nfrom qiskit.visualization import plot_bloch_multivector\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport warnings\nwarnings.filterwarnings('ignore')\ndef obwod(strategia):\n    qc = QuantumCircuit(QuantumRegister(1, name='qGra'))\n    for bramka in strategia:\n        if bramka == 'I':\n            qc.id(0)\n        elif bramka == 'H':\n            qc.h(0)\n        elif bramka == 'X':\n            qc.x(0)\n    return qc\n\n%matplotlib inline\ndef animacja(strategia):\n    qc = QuantumCircuit(QuantumRegister(1, name=\"q0\"))\n    symulator = Aer.get_backend('statevector_simulator')\n    wynik = execute(qc, backend=symulator).result()\n    stan = wynik.get_statevector()\n    display(stan)\n    print(\"stan poczatkowy:\")\n    display(plot_bloch_multivector(stan))\n    plt.show()\n    for it, bramka in enumerate(strategia):\n        if bramka == 'I':\n            qc.id(0)\n        elif bramka == 'H':\n            qc.h(0)\n        elif bramka == 'X':\n            qc.x(0)\n        wynik = execute(qc, backend=symulator).result()\n        stan = wynik.get_statevector()\n        print(\"stan po bramce\", bramka)\n        display(plot_bloch_multivector(stan))\n        plt.show()\nstrategia = 'XXX'\ndisplay(obwod(strategia).draw('mpl'))\nanimacja(strategia)\n\n\n\n\n\n\n\n\nStatevector([1.+0.j, 0.+0.j],\n            dims=(2,))\nstan poczatkowy:\n\n\n\n\n\n\n\n\n\nstan po bramce X\n\n\n\n\n\n\n\n\n\nstan po bramce X\n\n\n\n\n\n\n\n\n\nstan po bramce X\ndef sedzia(obwod):\n    qr = QuantumRegister(1)\n    cr = ClassicalRegister(1)\n    ob = QuantumCircuit(qr, cr)\n    ob.append(obwod, qr)\n    ob.measure(0, 0)\n    return  execute(ob, backend=Aer.get_backend('qasm_simulator'), shots=1000).result()\nstrategia = 'XXX'\nstats = sedzia(obwod(strategia)).get_counts()\nprint(stats)\n\n{'1': 1000}\nstrategia = 'HXH'\nstats = sedzia(obwod(strategia)).get_counts()\nprint(stats)\n\n{'0': 1000}\ndef klasycze_strategie():\n    wyniki = []\n    for ruch_1 in ['I','X']:\n        for ruch_2 in ['I','X']:\n            for ruch_3 in ['I','X']:\n                strategia = ruch_1 + ruch_2 + ruch_3\n                print(\"strategia\",strategia)\n                ob = obwod(strategia)\n                display(ob.draw('mpl'))\n                plt.show()\n                stats = sedzia(ob).get_counts()\n                print(\"statystyka\", stats)\n                wyniki.append((strategia, stats))\nklasycze_strategie()\n\nstrategia III\n\n\n\n\n\n\n\n\n\nstatystyka {'0': 1000}\nstrategia IIX\n\n\n\n\n\n\n\n\n\nstatystyka {'1': 1000}\nstrategia IXI\n\n\n\n\n\n\n\n\n\nstatystyka {'1': 1000}\nstrategia IXX\n\n\n\n\n\n\n\n\n\nstatystyka {'0': 1000}\nstrategia XII\n\n\n\n\n\n\n\n\n\nstatystyka {'1': 1000}\nstrategia XIX\n\n\n\n\n\n\n\n\n\nstatystyka {'0': 1000}\nstrategia XXI\n\n\n\n\n\n\n\n\n\nstatystyka {'0': 1000}\nstrategia XXX\n\n\n\n\n\n\n\n\n\nstatystyka {'1': 1000}\ndef kwantowe_strategie():\n    wyniki = []\n    for ruch_1 in ['H']:\n        for ruch_2 in ['I','X']:\n            for ruch_3 in ['H']:\n                strategia = ruch_1 + ruch_2 + ruch_3\n                print(\"strategia\",strategia)\n                ob = obwod(strategia)\n                display(ob.draw('mpl'))\n                plt.show()\n                stats = sedzia(ob).get_counts()\n                print(\"statystyka\", stats)\n                wyniki.append((strategia, stats))\nkwantowe_strategie()\n\nstrategia HIH\n\n\n\n\n\n\n\n\n\nstatystyka {'0': 1000}\nstrategia HXH\n\n\n\n\n\n\n\n\n\nstatystyka {'0': 1000}"
  },
  {
    "objectID": "labs/cw3.html#losowy-bajt",
    "href": "labs/cw3.html#losowy-bajt",
    "title": "Bramki wielokubitowe",
    "section": "Losowy bajt",
    "text": "Losowy bajt\n\n# generator liczb losowych\nfrom random import randrange\n''.join([str(randrange(2)) for i in range(8)])\n\n'00011001'\n\n\n\n# mozna takze zrealizowac jako rzut monetą \n\nimport random\nfor n in range(5):\n    if random.random()&lt;0.5:       #if the random number is less than 0.5 print heads\n        print('HEADS')\n    else:\n        print('TAILS')\n\nHEADS\nTAILS\nTAILS\nHEADS\nTAILS\n\n\n\n# LOSOWY BAJT \nfrom qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister, execute, Aer\nq = QuantumRegister(8)\nc = ClassicalRegister(8)\n\nqc = QuantumCircuit(q,c)\n# tutaj kod losowania \nfor i in range(8):\n    if randrange(2) == 0:\n        qc.x(q[i])\n        \nqc.barrier()\nqc.measure(q,c)\nqc.draw('mpl')\n\n\n\n\n\n\n\n\n\njob = execute(qc, Aer.get_backend('qasm_simulator'), shots=10)\ncounts = job.result().get_counts()\n\n\ncounts\n\n{'00100100': 10}\n\n\n\nprint(list(counts)[0], \"wynosi: \", int(list(counts)[0],2))\n\n00100100 wynosi:  36\n\n\n\n# losowy kwantowo bajt \n# LOSOWY BAJT \nfrom qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister, execute, Aer\nq = QuantumRegister(8)\nc = ClassicalRegister(8)\n\nqc = QuantumCircuit(q,c)\n# tutaj kod losowania \nqc.h(q)        \nqc.barrier()\nqc.measure(q,c)\ndisplay(qc.draw('mpl'))\njob = execute(qc, Aer.get_backend('qasm_simulator'), shots=10)\ncounts = job.result().get_counts()\ncounts\n\n\n\n\n\n\n\n\n{'01000110': 1,\n '00001001': 1,\n '00100100': 1,\n '11000000': 1,\n '01000011': 1,\n '11010001': 1,\n '11100110': 1,\n '11100100': 1,\n '10101011': 1,\n '11001100': 1}\n\n\n\nfor el in counts:\n    print(int(el,2))\n\n70\n9\n36\n192\n67\n209\n230\n228\n171\n204\n\n\n\n# losowanie z zakresu liczb 0-15 \nn = 4\nq = QuantumRegister(n)\nc = ClassicalRegister(n)\ncircuit = QuantumCircuit(q, c)\n\nfor j in range(n):\n    circuit.h(q[j])\n    \ncircuit.measure(q,c)\n\njob = execute(circuit,  Aer.get_backend('qasm_simulator'), shots=1000)\n\n# get the histogram of bit string results, convert it to one of integers and plot it\nbit_counts = job.result().get_counts()\nint_counts = {}\nfor bitstring in bit_counts:\n    int_counts[ int(bitstring,2) ] = bit_counts[bitstring]\n\nfrom qiskit.tools.visualization import plot_histogram    \nplot_histogram(int_counts)"
  },
  {
    "objectID": "labs/cw3.html#swap-gate",
    "href": "labs/cw3.html#swap-gate",
    "title": "Bramki wielokubitowe",
    "section": "SWAP GATE",
    "text": "SWAP GATE\n\\[\n\\text{SWAP}\\ket{01} = \\ket{10}\n\\]\n\nqc = QuantumCircuit(2)\nqc.x(0)\nqc.swap(0,1)\nqc.measure_all()\nqc.draw('mpl')\n\n\n\n\n\n\n\n\n\ncounts = execute(qc, Aer.get_backend('qasm_simulator'), shots=1).result()\ncounts.get_counts()"
  },
  {
    "objectID": "labs/cw3.html#stany-splątane",
    "href": "labs/cw3.html#stany-splątane",
    "title": "Bramki wielokubitowe",
    "section": "Stany splątane",
    "text": "Stany splątane\n\nqr = QuantumRegister(2)\nqc = QuantumCircuit(qr)\nqc.h(qr[0])\nqc.cx(0,1)\nbackend = Aer.get_backend('statevector_simulator')\njob = execute(qc, backend)\nresult = job.result()\nstate = result.get_statevector()\n\n\ndisplay(qc.draw('mpl'))\nstate.draw('latex')\n\n\n\n\n\n\n\n\n\\[\\frac{\\sqrt{2}}{2} |00\\rangle+\\frac{\\sqrt{2}}{2} |11\\rangle\\]\n\n\n\nqr = QuantumRegister(2)\nqc = QuantumCircuit(qr)\nqc.h(qr[0])\nqc.cx(0,1)\nqc.x(1)\nbackend = Aer.get_backend('statevector_simulator')\njob = execute(qc, backend)\nresult = job.result()\nstate = result.get_statevector()\ndisplay(qc.draw('mpl'))\nstate.draw('latex')\n\n\n\n\n\n\n\n\n\\[\\frac{\\sqrt{2}}{2} |01\\rangle+\\frac{\\sqrt{2}}{2} |10\\rangle\\]\n\n\n\nqr = QuantumRegister(2)\nqc = QuantumCircuit(qr)\nqc.h(qr[0])\nqc.cx(0,1)\nqc.z(1)\nbackend = Aer.get_backend('statevector_simulator')\njob = execute(qc, backend)\nresult = job.result()\nstate = result.get_statevector()\ndisplay(qc.draw('mpl'))\nstate.draw('latex')\n\n\n\n\n\n\n\n\n\\[\\frac{\\sqrt{2}}{2} |00\\rangle- \\frac{\\sqrt{2}}{2} |11\\rangle\\]\n\n\n\nqr = QuantumRegister(2)\nqc = QuantumCircuit(qr)\nqc.h(qr[0])\nqc.cx(0,1)\nqc.x(1)\nqc.z(1)\nbackend = Aer.get_backend('statevector_simulator')\njob = execute(qc, backend)\nresult = job.result()\nstate = result.get_statevector()\ndisplay(qc.draw('mpl'))\nstate.draw('latex')\n\n\n\n\n\n\n\n\n\\[\\frac{\\sqrt{2}}{2} |01\\rangle- \\frac{\\sqrt{2}}{2} |10\\rangle\\]"
  },
  {
    "objectID": "labs/cw3.html#half-adder-cirquit",
    "href": "labs/cw3.html#half-adder-cirquit",
    "title": "Bramki wielokubitowe",
    "section": "Half adder cirquit",
    "text": "Half adder cirquit\n\nNapisz operator 1+1 na układzie 4 kubitów\n\\[\n0+0 = 00\n\\] \\[\n0+1 = 01\n\\] \\[\n1+0 = 01\n\\] \\[\n1+1 = 10\n\\]\nzauwaz, ze mamy dwa typy rozwiązań:\n\ndwa bity wejsciowe są takie same (00, 11) i dają na prawym bicie odpowiedzi 0.\ndwa bity wejsciowe są rózne (10,01) i dają na prawym bicie odpowiedzi 1.\n\nAby napisać prawidłowe rozwiązanie musimy stworzyć bramki, które będą rozpoznawać czy dwa kubity są takie same czy tez rózne. Dla przypomnienia - klasycznie rolę taką pełni bramka XOR.\n\n\n\nInput 1\nInput 2\nXOR\n\n\n\n\n0\n0\n0\n\n\n0\n1\n1\n\n\n1\n1\n1\n\n\n1\n0\n0\n\n\n\nPodobnie działa bramka CNOT\n\nqc  = QuantumCircuit(2)\nqc.cx(0,1)\nqc.draw(output='mpl')\n\n\n\n\n\n\n\n\n\nqc = QuantumCircuit(4,2)\n# zakodowanie danych wejściowych do kubitu 1 i 2 \nqc.x(0) \nqc.x(1) # bo chcemy policzyc 1+1 \n# uzyjemy CNOT - bramka XOR dla porownania kubitow 1 i 2\nqc.cx(0,2)\nqc.cx(1,2)\nqc.measure(2,0) # wydobycie wyniku XOR\nqc.measure(3,1) # wydobycie wyniku AND\nqc.draw(output='mpl')\n\n\n\n\n\n\n\n\nZastosowanie dwóch CNOT do inputów rozwiązuje nam problem prawego bitu odpowiedzi.\nCo z pierszym bitem odpowiedzi otrzymywanym po pomiarzze q3 ?\n\njego wartość dla pierwszych trzech równań zawsze wynosi 0.\n\nJednak dla równania 1+1 powinniśmy otrzymać 1.\nDo rozwiązania tego problemu mozna wykorzystać bramkę operującą na 3 kubitach. Bramka ta to bramka Toffoli.\n\nqc = QuantumCircuit(4,2)\n# zakodowanie danych wejściowych do kubitu 1 i 2 \nqc.x(0) \nqc.x(1) # bo chcemy policzyc 1+1 \n# uzyjemy CNOT\nqc.cx(0,2)\nqc.cx(1,2)\nqc.ccx(0,1,3) # AND\nqc.measure(2,0) # wydobycie wyniku XOR\nqc.measure(3,1) # wydobycie wyniku AND\nqc.draw(output='mpl')\n\n\n\n\n\n\n\n\n\nfrom qiskit.visualization import plot_histogram\ncounts = execute(qc,Aer.get_backend('qasm_simulator'),shots=1).result().get_counts()\nplot_histogram(counts)\n\n\n\n\n\n\n\n\nDla przypomnienia:\n\nprint(\"wynik 1+1 =\",int('10',2))\n\nwynik 1+1 = 2\n\n\nsprawdźmy wszystkie mozliwe wyniki\n\nfor input in ['00','01','10','11']:\n    \n    mycircuit1 = QuantumCircuit(4,2)\n    \n    #Initialization - Note qiskit order\n    if input[0] == '1':\n        mycircuit1.x(1)\n    if input[1] == '1':\n        mycircuit1.x(0)\n\n    mycircuit1.cx(0,2)\n    mycircuit1.cx(1,2)\n    mycircuit1.ccx(0,1,3)\n\n    mycircuit1.measure(2,0)\n    mycircuit1.measure(3,1)\n\n    job = execute(mycircuit1,Aer.get_backend('qasm_simulator'),shots=1)\n    counts = job.result().get_counts(mycircuit1)\n    print(\"Input:\", input, \"Output:\", counts)\n\nInput: 00 Output: {'00': 1}\nInput: 01 Output: {'01': 1}\nInput: 10 Output: {'01': 1}\nInput: 11 Output: {'10': 1}\n\n\n\nZadanie - czy potrafisz utworzyć 3 kubitową wersję bramki OR"
  },
  {
    "objectID": "labs/titanic.html",
    "href": "labs/titanic.html",
    "title": "Titanic data",
    "section": "",
    "text": "Dane mozna pobrać po utworzeniu (darmowego) konta na portalu Kaggle.\nPobierz dane: interesują nas tylko pliki zbiorów train.csv i test.csv.\nZobaczmy jak wyglądają nasze dane:\nimport pandas as pd\n\ntrain = pd.read_csv('../data/train.csv')\ntest = pd.read_csv('../data/test.csv')\n\nprint(\"train ma {} wierszy i {} kolumn\".format(*train.shape))\nprint(\"test ma {} wierszy i {} kolumn\".format(*test.shape))\n\nprint(f\"train to obiekt typu {type(train)}\")\n\ntrain ma 891 wierszy i 12 kolumn\ntest ma 418 wierszy i 11 kolumn\ntrain to obiekt typu &lt;class 'pandas.core.frame.DataFrame'&gt;\ntrain.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\nMetoda info() zwraca informacje o: - nazyach kolumn, - ich indeksy, - liczbę niepustych (null) elementów dla kazdej kolumny,\n- typy danych.\ntest.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 418 entries, 0 to 417\nData columns (total 11 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  418 non-null    int64  \n 1   Pclass       418 non-null    int64  \n 2   Name         418 non-null    object \n 3   Sex          418 non-null    object \n 4   Age          332 non-null    float64\n 5   SibSp        418 non-null    int64  \n 6   Parch        418 non-null    int64  \n 7   Ticket       418 non-null    object \n 8   Fare         417 non-null    float64\n 9   Cabin        91 non-null     object \n 10  Embarked     418 non-null    object \ndtypes: float64(2), int64(4), object(5)\nmemory usage: 36.0+ KB\nDla zbioru testowego mamy jedną kolumnę (Survived) mniej, dlaczego?\nZe względu, iz nie planujemy wrzucać wyników modeli na kaggle zbiór test nie jest nam potrzebny.\nInformacje z metody info() przedstawiają tylko ogólne rzeczy, zobaczmy jak zbiór train wygląda w środku.\ntrain.head()\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n0\n1\n0\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\nNaN\nS\n\n\n1\n2\n1\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.9250\nNaN\nS\n\n\n3\n4\n1\n1\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\nfemale\n35.0\n1\n0\n113803\n53.1000\nC123\nS\n\n\n4\n5\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.0500\nNaN\nS\nKazda kolumna reprezentuje jedną zmienną naszych danych. Identyfikatorem, bądź kluczem naszej tabeli jest PassengerId, która przyjmuje rózną wartość dla kazdego wiersza. Czy taka zmienna moze być dobra do modelowania? Zmienna Survived realizuje zmienną celu naszego zadania - pasazer przezyl (1) lub nie (0). Pclass to zmienna opisująca klasę pokładu zgodnie z biletem."
  },
  {
    "objectID": "labs/titanic.html#klasyfikatory",
    "href": "labs/titanic.html#klasyfikatory",
    "title": "Titanic data",
    "section": "Klasyfikatory",
    "text": "Klasyfikatory\n\nimport random\nrandom.seed(42)\n\n# losowa funkcja klasyfikująca\ndef classify(passanger):\n    return random.randint(0,1)\n\n# pomocnicza funkcja\ndef run(f_classufy, x):\n    return list(map(f_classufy, x))\n\ndef evaluate(predictions, actual):\n    correct = list(filter(\n        lambda item: item[0] == item[1],\n        list(zip(predictions, actual))\n    ))\n    return f\"{len(correct)} poprawnych przewidywan z {len(actual)}. Accuracy ({len(correct)/len(actual)*100:.0f}%)\"\n\n\nevaluate(run(classify, tr_input.values), tr_labels.values)\n\n'348 poprawnych przewidywan z 711. Accuracy (49%)'\n\n\n\ndef kill_bill(item):\n    return 0\n\n\nevaluate(run(kill_bill, tr_input.values), tr_labels.values)\n\n'440 poprawnych przewidywan z 711. Accuracy (62%)'\n\n\n\nfrom sklearn.metrics import confusion_matrix\n\npredictions = run(kill_bill, tr_input.values)\nconfusion_matrix(tr_labels.values, predictions)\n# TN, FP, FN, TP\n\narray([[440,   0],\n       [271,   0]])\n\n\n\nfrom sklearn.metrics import precision_score, recall_score, f1_score\n\nprint(precision_score(tr_labels.values, predictions))\nprint(recall_score(tr_labels.values, predictions))\nprint(f1_score(tr_labels.values, predictions))\n\n# specificity = \\sum TrueNegatives / \\sum ALLActualNegatives\n# npv = \\sum TrueNegatives / \\sum AllPredictedNegatives\n\ndef specificity(matrix):\n    return matrix[0,0]/(matrix[0][0]+matrix[0][1]) if (matrix[0][0]+matrix[0][1] &gt; 0) else 0\n\ndef npv(matrix):\n    return matrix[0,0]/(matrix[0][0]+matrix[1][0]) if (matrix[0][0]+matrix[1][0] &gt; 0) else 0\n\ncm = confusion_matrix(tr_labels.values, predictions)\nprint(\"specificity\",specificity(cm))\nprint(\"npv\",npv(cm))\n\n0.0\n0.0\n0.0\nspecificity 1.0\nnpv 0.6188466947960619\n\n\n/Users/air/Desktop/quarto_projects/intro_to_qml/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n\n\n\nZrob obliczenia dla losowego klasyfikatora!\n\n\ndef raport(name, run, classify, input, labels):\n    cr_predictions = run(classify, input.values)\n    cr_cm = confusion_matrix(labels.values, cr_predictions)\n    cr_prcision  = precision_score(labels.values, cr_predictions)\n    cr_recall = recall_score(labels.values, cr_predictions)\n    cr_scpecificity = specificity(cr_cm)\n    cr_npv = npv(cr_cm)\n    cr_level = 0.25*(cr_prcision + cr_recall + cr_scpecificity + cr_npv)\n    print(f\"{name} precision {cr_prcision:.2f} recall {cr_recall:.2f} specificity {cr_scpecificity:.2f} npv {cr_npv:.2f} level {cr_level:.2f}\")\n    \n\n\nraport(\"losowy\", run, classify, tr_input, tr_labels)\nraport(\"kill bill\", run, kill_bill, tr_input, tr_labels)\n\nlosowy precision 0.38 recall 0.53 specificity 0.47 npv 0.62 level 0.50\nkill bill precision 0.00 recall 0.00 specificity 1.00 npv 0.62 level 0.40\n\n\n/Users/air/Desktop/quarto_projects/intro_to_qml/venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n\n\n\nimport qiskit\nqiskit.__qiskit_version__\n\n{'qiskit-terra': '0.25.1', 'qiskit': '0.44.1', 'qiskit-aer': '0.12.2', 'qiskit-ignis': '0.7.1', 'qiskit-ibmq-provider': '0.20.2', 'qiskit-nature': None, 'qiskit-finance': '0.3.4', 'qiskit-optimization': '0.5.0', 'qiskit-machine-learning': '0.6.1'}\n\n\n\nfrom qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister, execute, Aer\nfrom math import sqrt\n\nqc = QuantumCircuit(1)\ninitial_state = [1/sqrt(2), 1/sqrt(2)]\nqc.initialize(initial_state, 0)\nqc.measure_all()\n\nPowyzszy obwód realizuje stan superpozycji i zwraca w losowy sposób wynik \\(0\\) lub \\(1\\). Oznacza to, ze moze byc kandydatem na klasyfikator binarny.\nZdefiniujmy powyzszy obwód tak aby realizowany był jako funkcja, którą mozemy wykorzystać w naszym problemie klasyfikacji.\n\nfrom qiskit import execute, Aer, QuantumCircuit\nfrom math import sqrt \nfrom sklearn.metrics import confusion_matrix, precision_score, recall_score \n\ndef pqc_classify(backend, passenger_state):\n    qc = QuantumCircuit(1)\n    qc.initialize(passenger_state, 0)\n    qc.measure_all()\n    result = execute(qc, backend, shots=1).result()\n    counts = result.get_counts()\n    return int(list(map(lambda item: item[0], counts.items()))[0])\n\nbackend = Aer.get_backend('qasm_simulator')\ninitial_state = [1/sqrt(2), 1/sqrt(2)]\n\n\nraport(\"Random PQC\", run, lambda x: pqc_classify(backend, initial_state), \n       tr_input, tr_labels)\n\nRandom PQC precision 0.36 recall 0.47 specificity 0.47 npv 0.59 level 0.47\n\n\nPowyzsze kody realizują klasyfikatory, które nie zalezą od naszych danych pasazerów.\n\nPreprocessing - przetworznie danych wejściowych do postaci przetwarzanej przez nasz obwód kwantowy. Wykorzystamy PQC. Ta część jest związana z klasycznym przetworzeniem danych i utworzeniem embeddingu.\nPQC\nPostprocessing - Nasz klasyfikator powinien zwracać wartość 0 lub 1. Tutaj powinien odbywać się proces przetłumaczenia wyniku realizowanego przez jakiś obwód kwanotwy na binarny wynik klasyfikacji. Tutaj równiez uzyjemy PQC do klasycznego przetworzenia.\n\nTylko druga część będzie w pełni realizowała obwód kwantowy. Łącząc wszystko razem otrzymujemy Wariacyjny hybrydowy klasyczno-kwantowy algorytm. Jest to jedno z najczęściej uzywanych podejść do modelowania danych klasycznych.\n\n# 1 preprocessing\ndef pre_process(passanger):\n    quantum_state = [1/sqrt(2), 1/sqrt(2)]\n    return quantum_state\n\n# 2. pqc\n\ndef pqc(beckend, quantum_state):\n    qc = QuantumCircuit(1)\n    qc.initialize(quantum_state, 0)\n    qc.measure_all()\n    result = execute(qc, backend, shots=1).result()\n    counts = result.get_counts(qc)\n    return counts\n\n# 3. postprocessing\ndef post_process(counts):\n    return int(list(map(lambda item: item[0], counts.items()))[0])\n\nbackend = Aer.get_backend('qasm_simulator')\n\nraport(\"Variational Classifier\", run, lambda passenger: post_process(pqc(backend, pre_process(passenger))), \n       tr_input, tr_labels)\n\nVariational Classifier precision 0.41 recall 0.56 specificity 0.51 npv 0.65 level 0.54\n\n\nDane kazdego pasazera składają się z 7 zmiennych. Ze względu, iz nie chcemy (na razie) zmieniać ostatniego kroku musimy znaleźć jakąś metodę pozwalającą przypisać 7 zmiennym prawdopodobieństwo przezycia i śmierci. W ostatnim kroku odczytujemy po pomiarze tylko te dwie wielkości.\nZnalezienie prawdopodobieństwa dla 7 zmiennych nie jest prostym zadaniem (w końcu to robią nasze klasyczne modele ML). Jendak mozemy zacząć od bardzo statystycznego podejścia. Zakładamy, ze zmienne są od siebie niezalezne i kazda zmienna z jakąś wagą przyczynia się do wartości prawdopodobieństwa przezycia. \\[\nP(survival) = \\sum (F \\mu_F)\n\\]\n\ndef waga_zmiennej(feature, weight):\n    return feature*weight\n\nfrom functools import reduce\n\ndef get_overall_probablity(features, weights):\n    return reduce(lambda result, data: result + waga_zmiennej(*data), \n                  zip(features, weights),\n                  0\n                  )\n\nJak zbudować wektor wag?\nZacznijmy od współczynnika korelacji.\n\nfrom scipy.stats import spearmanr\n\ncolumns = [list(map(lambda passneger: passneger[i], tr_input.values)) for i in range(0,7)]\n\n\ncorrelations = list(map(lambda col: spearmanr(col, tr_labels.values)[0], columns))\n\n\ncorrelations\n\n[-0.33362848376406934,\n -0.5327583106581802,\n -0.03158046336028065,\n 0.0688875885695018,\n 0.12641683959850614,\n 0.3105976636091728,\n -0.16652847475942076]\n\n\nZastosujmy to do pre-processingu\n\nfrom math import pi, sin, cos \n\ndef get_state(theta):\n    return [cos(theta/2), sin(theta/2)]\n\ndef pre_process_weighted(passenger):\n    mu = get_overall_probablity(passenger, correlations)\n    # theta między 0 i pi  0 = |0&gt; a pi = |1&gt;\n    quantum_state = get_state((1-mu)*pi)\n    return quantum_state\n\n\nbackend = Aer.get_backend('statevector_simulator')\n\nraport(\"Variational Classifier - train\", run, lambda passenger: post_process(pqc(backend, pre_process_weighted(passenger))), \n       tr_input, tr_labels)\nraport(\"Variational Classifier- test\", run, lambda passenger: post_process(pqc(backend, pre_process_weighted(passenger))), \n       test_input, test_labels)\n\nVariational Classifier - train precision 0.28 recall 0.35 specificity 0.45 npv 0.53 level 0.40\nVariational Classifier- test precision 0.33 recall 0.39 specificity 0.50 npv 0.56 level 0.44"
  },
  {
    "objectID": "labs/qaoa_penny.html",
    "href": "labs/qaoa_penny.html",
    "title": "Wstęp do kwantowego uczenia maszynowego",
    "section": "",
    "text": "!pip install pennylane --quiet\n\n\nimport pennylane as qml\nfrom pennylane import qaoa\nimport networkx as nx\nfrom pennylane import numpy as np \n\n\ngraph = nx.Graph([(0,1),(1,2),(2,0)])\n\ncost_h, mixer_h = qaoa.maxcut(graph) # Tworzy hamiltioniany problemu \n\n\ndef qaoa_layer(gamma, alpha):\n    qaoa.cost_layer(gamma, cost_h)\n    qaoa.mixer_layer(alpha, mixer_h)\n\n\ndev = qml.device('default.qubit', wires=3)\n\n@qml.qnode(dev)\ndef circuit(params):\n    for i in range(len(params)// 2) :\n        qaoa_layer(params[i], params[i+len(params)//2])\n    return qml.expval(qaoa.maxcut(graph)[0]) # cost_h\n\nopt = qml.GradientDescentOptimizer()\nparams = np.array([0.01]*2, requires_grad=True)\n\nfor i in range(100):\n    params = opt.step(lambda v: -circuit(v), params)\n\nprint(\"Optymalizowane parametry\", params)\n\nprint(\"wartość oczekiwana\",circuit(params))\n\nOptymalizowane parametry [1.00000000e-02 2.80761286e-08]\nwartość oczekiwana -4.551914400963142e-15"
  },
  {
    "objectID": "sylabus.html",
    "href": "sylabus.html",
    "title": "Sylabus",
    "section": "",
    "text": "Nazwa przedmiotu: Wstęp do kwantowego uczenia maszynowego\nJednostka: SGH Szkoła Główna Handlowa w Warszawie\nKod przedmiotu: 232530-D, 232530-S\nPunkty ECTS: 3\nJęzyk prowadzenia: polski\nPoziom przedmiotu: średnio-zaawansowany\nProwadzący: Sebastian Zając, sebastian.zajac@sgh.waw.pl\nWebsite: https://sebkaz-teaching.github.io/qml2024/\nSupport Program realizowany jest ze wsparciem firmy Xanadu.\nXanadu is a Canadian quantum computing company with the mission to build quantum computers that are useful and available to people everywhere. Xanadu is one of the world’s leading quantum hardware and software companies and also leads the development of PennyLane.\nPennyLane is an open-source software framework for quantum machine learning, quantum chemistry, and quantum computing, with the ability to run on all hardware.\nSupport and additional resources:"
  },
  {
    "objectID": "sylabus.html#cel-przedmiotu",
    "href": "sylabus.html#cel-przedmiotu",
    "title": "Sylabus",
    "section": "Cel Przedmiotu",
    "text": "Cel Przedmiotu\nJeszcze do niedawna rozwój technologiczny oparty był na zmniejszaniu rozmiaru tranzystorów i zwiększaniu mocy obliczeniowej procesorów. Ze względu na fizyczne aspekty natury proces ten, od pewnego momentu, musi uwzględniać ograniczenia fizyki kwantowej. Przyszłość może jednak wykorzystać inne narzędzia, których możliwości wykraczają poza klasyczne moce obliczeniowe. Mimo, iż konstrukcja komputerów kwantowych to wciąż etap inżynierski, to okazuje się, że można już wskazać i wykorzystać je do tworzenia algorytmów, które można wykorzystać w dziedzinie uczenia maszynowego. Wykorzystanie algorytmów kwantowych pozwala zmniejszyć czas przetwarzania dużej ilości danych, a tym samym rozszerza możliwości przetwarzania i modelowania danych. Przedstawione na zajęciach biblioteki - IBM qiskit czy Pennylane (python) pozwalają na prostą i szybką konstrukcje dowolnego algorytmu kwantowego. Algorytmy te, jak np. algorytm Grovera wykorzystać można do wielu problemów obliczeniowych uczenia maszynowego bądź do konstrukcji kwantowych sieci neuronowych."
  },
  {
    "objectID": "sylabus.html#program-przedmiotu",
    "href": "sylabus.html#program-przedmiotu",
    "title": "Sylabus",
    "section": "Program przedmiotu",
    "text": "Program przedmiotu\n\nKomputery klasyczne i kwantowe\nKlasyczne bramki logiczne - Algebra Boola\nPrzestrzenie wektorowe, stany kwantowe, reprezentacja klasycznych i kwantowych bitów\nKwantowe bramki logiczne w prostych algorytmach i obwodach kwantowych\nAlgorytmy kwantowego uczenia maszynowego\nBiblioteka Qiskit, Pennylane wprowadzenie\nBramki jednokubitowe\nBramki wielokubitowe\nAlgorytm Deutscha, szyfrowanie kwantowe\nParametryzowane obwody kwantowe\nWariacyjne algorytmy kwantowe\nKlasyfikacja binarna na przykładzie danych Titanic\nQAOA - jako przykład wariacyjnego algorytmu\nKwantowe sieci neuronowe cz.1\nkwantowe sieci neuronowe cz.2"
  },
  {
    "objectID": "sylabus.html#efekty-kształcenia",
    "href": "sylabus.html#efekty-kształcenia",
    "title": "Sylabus",
    "section": "Efekty kształcenia",
    "text": "Efekty kształcenia\n\nWiedza:\n\n\nZna i rozumie koncepcje działania komputera klasycznego i kwantowego\nZna metody kwantowego uczenia maszynowego możliwe do wykorzystania w biznesie\nRozumie potrzebę i możliwości zastosowania komputerów kwantowych\n\n\nUmiejętności:\n\n\nPotrafi stworzyć proste algorytmy z wykorzystaniem kwantowych bramek logicznych\nUmie wykorzystać biblioteki pythonowe do generowania kodów obliczeń kwantowych\nPotrafi wykorzystać metody nadzorowane wykorzystywane w kwantowym uczeniu maszynowym\nPotrafi wykorzystać metody nienadzorowane wykorzystywane w kwantowym uczeniu maszynowym\nUmie stworzyć prostą kwantową sieć neuronową\n\n\nKompetencje społeczne:\n\n\nformułuje problem biznesowy wraz z jego informatycznym rozwiązaniem\nuzupełniania wiedzę teoretyczną jak i praktyczną, w zakresie teorii, programowania, modelowania, nowych technologii informatycznych z wykorzystaniem kwantowego uczenia maszynowego"
  },
  {
    "objectID": "sylabus.html#realizacja-przedmiotu",
    "href": "sylabus.html#realizacja-przedmiotu",
    "title": "Sylabus",
    "section": "Realizacja przedmiotu",
    "text": "Realizacja przedmiotu\n\negzamin testowy: 40%\nkolokwium: 20%\nreferaty/eseje: 40%"
  },
  {
    "objectID": "sylabus.html#literatura",
    "href": "sylabus.html#literatura",
    "title": "Sylabus",
    "section": "Literatura",
    "text": "Literatura\n\nS. Zajac - Modelowanie dla Biznesu. Analiza danych w czasie rzeczywistym. Oficyna Wydawnicza SGH. 2021\nCybulski, J.L., Zając, S. (2024). Design Considerations for Denoising Quantum Time Series Autoencoder. Computational Science – ICCS 2024. ICCS 2024. Lecture Notes in Computer Science, vol 14837. Springer, Cham. https://doi.org/10.1007/978-3-031-63778-0_18\nM. Schuld, F. Petruccione - Supervised Learning with Quantum Computers, Quantum Science and Technology. Springer 2018 https://doi.org/10.1007/978-3-319-96424-9\nC. Bernhardt - Obliczenia kwantowe dla każdego, Wydawnictwo Naukowe PWN 2020\nP. Gawron, M. Cholewa, … Rewolucja stanu. Fantastyczne wprowadzenie do informatyki kwantowej. Quantumz.io 2021\nA. Saxena, J. Mancilla, I. Montalban, C. Pere, Financial Modeling Using Quantum Computing. Packt 2023\nA. Jacquier, O. Kondratyev, Quantum Machine Learning and Optimisation in Finance. On the Road to Quantum Advantage."
  },
  {
    "objectID": "sylabus.html#literatura-uzupełniająca",
    "href": "sylabus.html#literatura-uzupełniająca",
    "title": "Sylabus",
    "section": "Literatura uzupełniająca",
    "text": "Literatura uzupełniająca\n\nMichael A. Nielsen & Isaac L. Chuang - Quantum Computation and Quantum Information, Cambridge University Press, 2010\nK. Przanowski, S. Zając - Modelowanie dla Biznesu. Metody Machine learning, Modele portfela consumer finance, modelek rekurencyjne analizy przeżycia, modele scoringowe. Oficyna Wydawnicza SGH. 2020\nE. Frątczak - Modelowanie dla Biznesu. Regresja Logistyczna, Regresja Poissona, Survival Data Mining, CRM, Credit Scoring. Oficyna Wydawnicza SGH. 2019"
  },
  {
    "objectID": "other/pennylane.html",
    "href": "other/pennylane.html",
    "title": "Pennylane",
    "section": "",
    "text": "Codebook\nPennyLane Challenges"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Informacje ogólne",
    "section": "",
    "text": "Witajcie wszyscy! Dziś chiałbym poruszyć temat nowego kursu z zakresu kwantowego uczenia maszynowego. Kurs ten będzie skupiał się na wykorzystaniu biblioteki pennylane, która jest jedną z najpopularniejszych bibliotek do tworzenia modeli kwantowych. W ramach kursu będziemy uczyć się podstaw kwantowego uczenia maszynowego, a także zastosowania tej wiedzy w praktyce. W trakcie kursu będziemy mieli okazję zapoznać się z różnymi narzędziami i technikami, które pozwolą nam na tworzenie skomplikowanych modeli kwantowych. W trakcie kursu będziemy również mieli okazję zapoznać się z różnymi algorytmami kwantowymi. Bardziej szczegółowo przetwarzać będziemy parametryzowane obwody kwantowe, które będą podstawowym elementem naszych modeli kwantowego uczenia maszynowego. Wszystko to pozwoli nam na lepsze zrozumienie zasad rządzących światem kwantowym i na wykorzystanie tej wiedzy w praktyce.",
    "crumbs": [
      "Sylabus",
      "Informacje ogólne"
    ]
  },
  {
    "objectID": "index.html#section",
    "href": "index.html#section",
    "title": "Informacje ogólne",
    "section": "Wstęp do kwantowego uczenia maszynowego",
    "text": "Wstęp do kwantowego uczenia maszynowego\nKod: 232530-D\nSemestr zimowy 2024/2025,\nSGH Szkoła Główna Handlowa w Warszawie\nPodstawowe informacje znajdziesz w sylabusie.\nCiekawe książki i strony internetowe zamieszczone zostały w zakładce książki. Jeśli chciał(a)byś coś dodać prześlij informację przez MS teams.",
    "crumbs": [
      "Sylabus",
      "Informacje ogólne"
    ]
  },
  {
    "objectID": "index.html#kalendarz",
    "href": "index.html#kalendarz",
    "title": "Informacje ogólne",
    "section": "Kalendarz",
    "text": "Kalendarz\n\nWykład\nWykład jest realizowany w trybie hybrydowym. Jest on NIEOBOWIĄZKOWY i odbywa się w sali C4D.\n\n\n30-09-2024 (poniedziałek) 11:40-13:20 - Wykład 1\n\n\n07-10-2024 (poniedziałek) 11:40-13:20 - Wykład 2\n\n\n14-10-2024 (poniedziałek) 11:40-13:20 - Wykład 3\n\n21-10-2023 (poniedziałek) 11:40-13:20 - Wykład 4\n28-10-2023 (poniedziałek) 11:40-13:20 - Wykład 5\n\n\n\nLaboratoria\nWszystkie laboratoria odbywają się w sali C5D.\n\n04-11-2024 (poniedziałek) 11:40-13:20 - Lab1\n13-11-2023 (poniedziałek) 11:40-13:20 - Lab2\n20-11-2023 (poniedziałek) 11:40-13:20 - Lab3\n27-11-2023 (poniedziałek) 11:40-13:20 - Lab4\n04-12-2023 (poniedziałek) 11:40-13:20 - Lab5\n11-12-2023 (poniedziałek) 11:40-13:20 - Lab6\n18-12-2023 (poniedziałek) 11:40-13:20 - Lab7\n08-01-2024 (poniedziałek) 11:40-13:20 - Lab8\n15-01-2024 (poniedziałek) 11:40-13:20 - Lab9\n22-01-2024 (poniedziałek) 11:40-13:20 - Lab10",
    "crumbs": [
      "Sylabus",
      "Informacje ogólne"
    ]
  },
  {
    "objectID": "index.html#sobota-niedziela",
    "href": "index.html#sobota-niedziela",
    "title": "Informacje ogólne",
    "section": "Sobota-Niedziela",
    "text": "Sobota-Niedziela\n\n\n12.10.2024 11:40-13:20 - Wykład 1\n\n26.10.2024 11:40-13:20 - Wykład 2",
    "crumbs": [
      "Sylabus",
      "Informacje ogólne"
    ]
  },
  {
    "objectID": "index.html#technologie",
    "href": "index.html#technologie",
    "title": "Informacje ogólne",
    "section": "Technologie",
    "text": "Technologie\nUczestnicząc w zajęciach musisz opanować i przynajmniej w podstawowym zakresie posługiwać się następującymi technologiami informatycznymi:\n\nAlgebra liniowa - wektory, macierze, baza, iloczyn skalarny, iloczyn tensorowy\nPython, Jupyter notebook, Jupyter lab, Colab\nAlgorytmy sieci neuronowych i uczenia maszynowego w procesie klasyfikacji binarnej",
    "crumbs": [
      "Sylabus",
      "Informacje ogólne"
    ]
  },
  {
    "objectID": "index.html#qpoland",
    "href": "index.html#qpoland",
    "title": "Informacje ogólne",
    "section": "QPoland",
    "text": "QPoland\nQPoland jest cześcią międzynarodowej sieci QWorld.",
    "crumbs": [
      "Sylabus",
      "Informacje ogólne"
    ]
  },
  {
    "objectID": "lectures/cw_w3.html",
    "href": "lectures/cw_w3.html",
    "title": "Wstęp do kwantowego uczenia maszynowego",
    "section": "",
    "text": "Wejdz na stronę codebook. Zarejestruj się i zaloguj.\n\nIQC: Introduction to Quantum Computing\nWykonaj pierwsze trzy ćwiczenia z sekcji wprowadzenie do obliczeń kwantowych.\nSolution l.1.1\n\nimport numpy as np\n\nket_0 = np.array([1, 0])\nket_1 = np.array([0, 1])\n\n\ndef normalize_state(alpha, beta):\n    \"\"\"Compute a normalized quantum state given arbitrary amplitudes.\n\n    Args:\n        alpha (complex): The amplitude associated with the |0&gt; state.\n        beta (complex): The amplitude associated with the |1&gt; state.\n\n    Returns:\n        np.array[complex]: A vector (numpy array) with 2 elements that represents\n        a normalized quantum state.\n    \"\"\"\n    ##################\n    # YOUR CODE HERE #\n    ##################\n    kappa = alpha * np.conj(alpha) + beta * np.conj(beta)\n    N = 1/(np.sqrt(kappa))\n    \n\n    # CREATE A VECTOR [a', b'] BASED ON alpha AND beta SUCH THAT |a'|^2 + |b'|^2 = 1\n    solution = np.array([alpha * N, beta * N])\n    # RETURN A VECTOR\n    return solution \n\nstate = np.array([0.8, 0.6])\nnormalize_state(state[0],state[1])\n\narray([0.8, 0.6])\n\n\nSolution l.1.2\n\nimport numpy as np\n\ndef inner_product(state_1, state_2):\n    \"\"\"Compute the inner product between two states.\n\n    Args:\n        state_1 (np.array[complex]): A normalized quantum state vector\n        state_2 (np.array[complex]): A second normalized quantum state vector\n\n    Returns:\n        complex: The value of the inner product &lt;state_1 | state_2&gt;.\n    \"\"\"\n\n    solution = state_2[0] * np.conj(state_1[0]) +  state_2[1] * np.conj(state_1[1])\n\n    # COMPUTE AND RETURN THE INNER PRODUCT\n\n    return solution\n\n\n# Test your results with this code\nket_0 = np.array([1, 0])\nket_1 = np.array([0, 1])\n\nprint(f\"&lt;0|0&gt; = {inner_product(ket_0, ket_0)}\")\nprint(f\"&lt;0|1&gt; = {inner_product(ket_0, ket_1)}\")\nprint(f\"&lt;1|0&gt; = {inner_product(ket_1, ket_0)}\")\nprint(f\"&lt;1|1&gt; = {inner_product(ket_1, ket_1)}\")\n\n&lt;0|0&gt; = 1\n&lt;0|1&gt; = 0\n&lt;1|0&gt; = 0\n&lt;1|1&gt; = 1"
  },
  {
    "objectID": "lectures/wyklad2.html",
    "href": "lectures/wyklad2.html",
    "title": "Klasyczne bramki logiczne - Algebra Boola",
    "section": "",
    "text": "\\[\n\\newcommand{\\bra}[1]{\\left \\langle #1 \\right \\rvert}\n\\newcommand{\\ket}[1]{\\left \\rvert #1 \\right \\rangle}\n\\newcommand{\\braket}[2]{\\left \\langle #1 \\middle \\rvert #2 \\right \\rangle}\n\\]\nObliczenia (przetwarzanie) wykonywane przez komputer możemy zdefiniować jako transformacje jednego stanu pamięci na inny. Z matematycznego punktu widzenia oznacza to, że obliczenia to funkcje, które przekształcają informacje.\nW przypadku klasycznych komputerów podstawową jednostką pamięci jest bit (ang. binary digit). Funkcje, które operują na bitach nazywamy bramkami logicznymi (ang. logic gates).",
    "crumbs": [
      "Sylabus",
      "Wykłady",
      "Klasyczne bramki logiczne - Algebra Boola"
    ]
  },
  {
    "objectID": "lectures/wyklad2.html#bramki-logiczne",
    "href": "lectures/wyklad2.html#bramki-logiczne",
    "title": "Klasyczne bramki logiczne - Algebra Boola",
    "section": "Bramki logiczne",
    "text": "Bramki logiczne\nBramki logiczne to funkcje Boolowskie, które możemy składać w bardziej złożone układy (ang. circuits). Stworzone przez George’a Boole’a w 1854 roku, algebra boola jest matematyczną strukturą, która opisuje zachowanie się obiektów, które mogą przyjmować tylko jedną z dwóch wartości: prawda lub fałsz. Zdolne są one do wykonywania np. dodawania, mnożenia czy też innych bardziej skomplikowanych operacji.\nW latach trzydziestych XX wieku Claude Shannon zastosował algebrę boola do analizy i projektowania układów elektrycznych. Co oznacza, że zareprezentował on funkcje boolowskie za pomocą przełączników elektrycznych. Dlatego też komponenty elektroniczne odpowiadające funkcjom boolowskim nazywamy bramkami logicznymi.\n\nCiekawostka. Richard Feynman wykładał teorię obliczeń na Kalifornijskim Instytucie Technologii. Wykład ten prezentowany jest obecnie jako Feynmana wykłady o obliczeniach (ang. Feynman Lectures on Computation).\n\n\nZ pozoru obliczenia przedstawione w ten sposób wyglądają jako abstrakcjny matematyczny koncept. Jednak jego realizacja zawsze wymaga jakiegoś układu fizycznego realizującego wykonywanie funkcji. Nie ma znaczenia jak ten układ zostanie zrealizowany: kule bilardowe, przełączniki elektroniczne, tranzystory, czy cokolwiek innego.\n\nLogika obliczeń jest niezależna od realizacji bramek logicznych.\n\nZ punktu widzenia realizacji zawsze chodzi nam o kontrolowany sposób zmiany stanu układu.\nNa wykładzie postaramy się wskazać jak i kiedy logika klasycznych obliczeń może być uogólniona przez logikę obliczeń kwantowych. Jasne jest, że przypadek klasyczny powinien być szczególnym przypadkiem kwantowego.\nobwody klasyczne\nZobaczmy jakie bramki możemy określić dla jednego bitu.\n\nBramki logiczne dla jednego bitu\nIle bramek mamy gdy input = 1 bit, output = 1 bit? Ile funkcji możemy zdefiniować dla odwzorowania jednego bitu w jeden bit?\nWszystkie cztery operatory działające na jednym bicie możemy określić jako:\n\nIdentyczność (ang. identity) - \\(I(0)=0\\), \\(I(1)=1\\)\nNegacja (ang. negation, NOT, filps) - \\(NOT(0)=1\\), \\(NOT(1)=0\\)\nStałe zero \\(ZERO(0)=0\\), \\(ZERO(1)=0\\)\nStałe jeden \\(ONE(0)=1\\), \\(ONE(1)=1\\)\n\nPo zastosowaniu operatora \\(I\\) oraz \\(NOT\\), z otrzymanego wyniku możemy wyznaczyc wartości początkowe. Jednak po zastosowaniu dwóch pozostałych operacji \\(ZERO\\) i \\(ONE\\) nie jesteśmy w stanie określic jaki był stan początkowy, który wygenerował określony wynik.\nTe dwie własności pozwalają nam sklasyfikowac operatory jako:\n\nOdwracalne - możemy odtworzyc wartośc początkową z wartości końcowej\nNieodwracalne - NIE możemy odtworzyc wartości początkowej z wartości końcowej.\n\nJak pokażemy później, wszystkie operatory reprezentujące kwantowe bramki będą odwracalne.\n\n\nInne bramki i operacje logiczne\n\nZróbmy krótkie przedstawienie niektórych, klasycznych bramek logicznych.\nBramka logiczna jest implementacją funkcji boolowskiej. Operacją logiczną przeprowadzaną na jednym lub kilku binarnych wejściach produkującą jedną binarną wartość wyjściową. \\[f: \\{0,1\\}^{n} \\to \\{0,1\\} \\]\nKażdy element algebry boola (Boolean Statements) musi być określony jako prawda albo fałsz.\nBramki logiczne możemy wyrazić za pomocą tablicy prawdy (ang. truth table). Tablica ta posiada jedną kolumnę dla każdej zmiennej wejściowej oraz jedną kolumnę dla zmiennej wyjściowej. Kolumna wyjściowa przedstawia wszystkie możliwe wyniki przedstawianej logicznej operacji reprezentowanej przez tablicę. Każdy wiersz tablicy prawdy reprezentuje jedną możliwą kombinację (konfiguracje) danych wejściowych oraz wyniku.\nPodstawowe bramki, które znasz to:\n\nAND - koniunkcja\nOR - alternatywa\nNOT - negacja\nNAND - not and\nXOR - alternatywa wykluczająca (Exclusive OR) - dodawanie modulo 2\n\n\nZadanie: zapisz tablicę prawdy dla każdej bramki.\n\n\nNOT gate\n\n\n\nA\nnot A\n\n\n\n\n0\n\n\n\n1\n\n\n\n\n\n\nAND gate\n\n\n\nA\nB\nC\n\n\n\n\n0\n0\n\n\n\n1\n0\n\n\n\n0\n1\n\n\n\n1\n1\n\n\n\n\n\n\nOR gate\n\n\n\nA\nB\nC\n\n\n\n\n0\n0\n\n\n\n1\n0\n\n\n\n0\n1\n\n\n\n1\n1\n\n\n\n\n\n\nNAND\n\n\n\nA\nB\nC\n\n\n\n\n0\n0\n\n\n\n1\n0\n\n\n\n0\n1\n\n\n\n1\n1\n\n\n\n\n\n\nXOR\n\n\n\nA\nB\nC\n\n\n\n\n0\n0\n\n\n\n1\n0\n\n\n\n0\n1\n\n\n\n1\n1\n\n\n\n\nPowyższe bramki pozwalają łączyć poszczególne elementy algebry boola ze sobą.\n\nZadanie: Porównaj AND oraz OR z potocznym znaczeniem tych słów.\n\n\nZadanie: Dlaczego Algebra boola nazywana jest algebrą zbiorów?\n\n\nZadanie: Czy składanie podzbiorów zbioru również generuje algebrę boola ?\n\n\nZadanie: ile bramek logicznych możemy stworzyć dla jednego bitu, dwóch bitów, trzech bitów?\n\n\n\n\nUniweralne bramki logiczne - NAND\nTak jak widzieliśmy dla 1-bitu informacji mieliśmy 4 bramki logiczne. Dla 2-bitów mieliśmy 16 bramek logicznych. Dla 3-bitów mamy już 256 możliwości.\nW przypadku 2-bitów nie wypisaliśmy wszystkich bramek, dlaczego?\nCzy musimy realizować wszystkie?\n\nNa szczęście odpowiedź jest negatywna.\n\nIstnieją tzw. zbiory bramek uniwersalnych dzięki którym możemy zrealizować dowolną funkcję boolowską.\n\nNOT, AND, OR\nNAND, AND\nNAND\nNOT, OR\nNOR",
    "crumbs": [
      "Sylabus",
      "Wykłady",
      "Klasyczne bramki logiczne - Algebra Boola"
    ]
  },
  {
    "objectID": "lectures/wyklad2.html#szyfrowanie-z-wykorzystaniem-bramki-xor",
    "href": "lectures/wyklad2.html#szyfrowanie-z-wykorzystaniem-bramki-xor",
    "title": "Klasyczne bramki logiczne - Algebra Boola",
    "section": "Szyfrowanie z wykorzystaniem bramki XOR",
    "text": "Szyfrowanie z wykorzystaniem bramki XOR\nWeźmy dwie sekwencje bitów:\nsekwencja A - przedstawiająca naszą zakodowaną wiadomośc: \\[1 0 1 1 0 1 1 1 0 0 0\\]\nlosowa sekwencja B: \\[0 1 1 0 1 1 0 1 1 0 1\\]\ni obliczmy XOR między dwoma sekwencjami (dla poszczególnych kolumn) \\(A\\) XOR \\(B\\).\nZgodnie z tablicą prawdy dla XOR otrzymujemy: \\[1 1 0 1 1 0 1 0 1 0 1\\]\nNa otrzymanym wyniku jeszcze raz zastosuj bramkę XOR.\nCo możesz zauważyć?\n\nOblicz A XOR B XOR B.\n\nZamień wiadomość, którą chcesz zaszyfrować na binarną postać (czyli jako sekwencję zer i jedynek).\nWeź losową sekwencję bitów (klucz szyfrujący), którą zna tylko nadawca i odbiorca.\n\\(1001011010...\\) - wiadomość\n\\(0110101010...\\) - klucz szyfrujący, czyli losowa sekwencja bitów\nZaszyfruj wiadomość wykonując operację XOR na każdym bicie wiadomości i klucza szyfrującego. Tak otrzymaną wiadomość (zaszyfrowaną) wyślij do odbiorcy.\n\ndecyrpting message\nOdbiorca otrzymuje zaszyfrowaną wiadomość (posiada klucz szyfrujący).\nMessage XOR SecretSequence = EncryptedMessage\nMessage XOR SecretSequence XOR SecretSequence = Message\nNie powinniśmy używać SecretSequence więcej niż raz. Jeśli użyjemy jej więcej niż raz, to łatwo jest złamać szyfrowanie.\n\nDlaczego nie powinno się używać szyfru więcej niż jeden raz? Podpowiedź: Zakodowana wiadomość przestaje być losowa.",
    "crumbs": [
      "Sylabus",
      "Wykłady",
      "Klasyczne bramki logiczne - Algebra Boola"
    ]
  },
  {
    "objectID": "lectures/wyklad1.html",
    "href": "lectures/wyklad1.html",
    "title": "Komputery klasyczne i kwantowe",
    "section": "",
    "text": "Nature isn’t classical, dammit, and if you want to make a simulation of Nature, you’d better make it quantum mechanical, and by golly it’s a wonderful problem because it doesn’t look so easy. Richard Feynman",
    "crumbs": [
      "Sylabus",
      "Wykłady",
      "Komputery klasyczne i kwantowe"
    ]
  },
  {
    "objectID": "lectures/wyklad1.html#zanim-zaczniemy",
    "href": "lectures/wyklad1.html#zanim-zaczniemy",
    "title": "Komputery klasyczne i kwantowe",
    "section": "Zanim zaczniemy",
    "text": "Zanim zaczniemy\n\nCo oznacza termin kwantowe uczenie maszynowe?\n\n\nCo wiesz o obliczeniach kwantowych?\n\n\nJakie masz oczekiwania i dlaczego interesujesz się QML?",
    "crumbs": [
      "Sylabus",
      "Wykłady",
      "Komputery klasyczne i kwantowe"
    ]
  },
  {
    "objectID": "lectures/wyklad1.html#podstawowe-pojęcia",
    "href": "lectures/wyklad1.html#podstawowe-pojęcia",
    "title": "Komputery klasyczne i kwantowe",
    "section": "Podstawowe pojęcia",
    "text": "Podstawowe pojęcia\nUczenie maszynowe (w tym także uczenie głębokie) to dziedzina, która łączy naukę i technikę, pozwalając komputerom uczyć się na podstawie danych. Dzięki temu mogą one rozwiązywać problemy, których tradycyjne programowanie nie byłoby w stanie efektywnie rozwiązać – ze względu na złożoność, brak wzorców lub dynamicznie zmieniające się dane. Zamiast ręcznie programować konkretne rozwiązania, algorytmy uczą się na podstawie dostępnych danych, aby samodzielnie znaleźć wzorce i optymalne odpowiedzi. Więcej na ten temat znajdziesz w książce\nObliczenia kwantowe to metoda przetwarzania informacji na urządzeniach, które operują zgodnie z zasadami mechaniki kwantowej.\n\nWarto zauważyć, że klasyczne komputery (bazujące na tranzystorach) również działają zgodnie z prawami mechaniki kwantowej, jednak wykonywane przez nie operacje opierają się na klasycznej logice.\n\nOba podejścia – klasyczne i kwantowe – odgrywają kluczową rolę w przetwarzaniu danych zarówno dziś, jak i w niedalekiej przyszłości. Zatem nasuwa się naturalne pytanie: jak można te dwa światy ze sobą połączyć?\nXanadu link - what is quantum computing\nKwantowe uczenie maszynowe (ang. Quantum Machine Learning) to zastosowanie metod uczenia maszynowego, które mogą być realizowane na komputerach kwantowych. Wykorzystuje ono zjawiska mechaniki kwantowej, takie jak superpozycja i splątanie, aby potencjalnie przyspieszyć procesy uczenia i rozwiązywania problemów, które dla klasycznych komputerów mogą być zbyt złożone.\nXanadu link - What is QML\n\nyou start with classical mechanics and electrodynamics, solving lots of differential equations at every step. Then you learn about the “black-body paradox” and various strange experimental results, and the great crisis these things posed for physics. Next you learn a complicated patchwork of ideas that physicists invented between 1900 and 1926 to try to make the crisis go away. Then, if you’re lucky, after years of study you finally get around to the central conceptual point: that nature is described not by probabilities (which are always non-negative), but by numbers called amplitudes that can be positive, negative, or even complex. Scott Aaronson, Quantum Computing Since Democritus\n\nXanadu link - QML blog",
    "crumbs": [
      "Sylabus",
      "Wykłady",
      "Komputery klasyczne i kwantowe"
    ]
  },
  {
    "objectID": "lectures/wyklad1.html#sztuczna-inteligencja",
    "href": "lectures/wyklad1.html#sztuczna-inteligencja",
    "title": "Komputery klasyczne i kwantowe",
    "section": "Sztuczna inteligencja",
    "text": "Sztuczna inteligencja\n\nHistoria sztucznej inteligencji (AI) sięga 1950 roku, kiedy Alan Turing zaproponował swój słynny test Turinga. Od tamtej pory rozwój technologii AI przyspieszył, obejmując zarówno dane ustrukturyzowane, jak i nieustrukturyzowane. Przykłady zastosowań AI obejmują:\n\nrozpoznawanie i generowanie mowy,\n,,rozumienie’’ obrazów i filmów,\nrozgrywanie gier (np. szachy, Go),\nsystemy rekomendacji (np. w e-commerce),\ndiagnostykę (np. w medycynie),\nplanowanie i optymalizację procesów,\npodejmowanie decyzji,\nchatboty i wirtualnych asystentów.\n\nWszystkie te zadania są realizowane dzięki zastosowaniu uczenia maszynowego (Machine Learning) oraz głębokich sieci neuronowych (Deep Learning).\nDlaczego sztuczna inteligencja jest tak chętnie wykorzystywana?\n\nWykładniczy wzrost ilości danych treningowych, dostępnych m.in. dzięki mediom społecznościowym, Internetowi, aplikacjom mobilnym i urządzeniom IoT.\nWzrost mocy obliczeniowej oraz spadek kosztów sprzętu komputerowego (np. co-procesorów GPU, TPU).\nDostępność oprogramowania typu Open Source, ułatwiającego rozwój AI.\nPrzewaga konkurencyjna, jaką zyskują firmy wykorzystujące AI w porównaniu do tych, które tego nie robią.\n\n\n\nUwaga! Zakładam, że masz podstawową znajomość pojęć związanych z uczeniem maszynowym i głębokim, ale w razie potrzeby, będziemy przypominać kluczowe zagadnienia.\n\n\nKategorie uczenia maszynowego\nUczenie maszynowe (ang. Machine Learning) można podzielić na kilka głównych kategorii:\n\nUczenie nadzorowane (ang. supervised learning) – mając oznaczone dane \\((x_i, y_i)\\) , uczymy model, który znajdzie funkcję \\(f(x_i) = y_i\\) , aby poprawnie przewidywać wartości dla nowych, nieznanych danych. Przykłady obejmują decyzje o przyznaniu kredytu lub klasyfikację obrazów, takich jak rozpoznanie, czy na obrazie znajduje się kot, czy pies.\nUczenie nienadzorowane (ang. unsupervised learning) – mając nieoznaczone dane (x_i) , szukamy ukrytych struktur w danych, takich jak grupowanie (klasteryzacja) czy redukcja wymiarów. Celem jest odkrywanie zależności lub wzorców, które nie są jawnie widoczne.\nUczenie przez wzmacnianie (ang. reinforcement learning) – agent uczy się podejmować decyzje w środowisku na podstawie nagród i kar, optymalizując swoje działania w celu maksymalizacji długoterminowych korzyści. Przykłady obejmują gry komputerowe, sterowanie robotami czy optymalizację procesów biznesowych.\nUczenie transferowe (ang. transfer learning) – technika, która polega na wykorzystaniu wiedzy nabytej w jednym zadaniu do rozwiązania innych, podobnych zadań. Przykładem jest model językowy nauczony rozumienia języka naturalnego, który może być wykorzystany do innych zadań, takich jak tłumaczenie maszynowe, analiza sentymentu czy rozpoznawanie tekstu pisanego.\nUczenie pół-nadzorowane (ang. semi-supervised learning) – podejście, które łączy dane oznaczone (z etykietami) i nieoznaczone (bez etykiet) w celu trenowania modelu. Jest to przydatne, gdy dostępnych jest dużo danych nieoznaczonych, ale tylko niewielka część z nich ma przypisane etykiety.",
    "crumbs": [
      "Sylabus",
      "Wykłady",
      "Komputery klasyczne i kwantowe"
    ]
  },
  {
    "objectID": "lectures/wyklad1.html#klasyczny-model-obliczeń",
    "href": "lectures/wyklad1.html#klasyczny-model-obliczeń",
    "title": "Komputery klasyczne i kwantowe",
    "section": "Klasyczny model obliczeń",
    "text": "Klasyczny model obliczeń\nKomputer to fizyczne urządzenie, które przetwarza informacje za pomocą obwodów elektronicznych (ang. electronic circuits). Jego działanie opiera się na klasycznej logice binarnej, w której informacje są reprezentowane przez bity przyjmujące wartości \\(0\\) lub \\(1\\). Komputery klasyczne wykonują obliczenia, przetwarzając te bity za pomocą zestawu logicznych operacji, takich jak \\(AND\\), \\(OR\\), \\(NOT\\), oraz innych.\nKomputery klasyczne opierają swoje działanie na:\n\nProcesorach (CPU – Central Processing Unit), które wykonują instrukcje programu.\nPamięci (RAM – Random Access Memory), która tymczasowo przechowuje dane potrzebne do obliczeń.\nMagazynach danych, takich jak dyski twarde (HDD) lub półprzewodnikowe dyski (SSD), które służą do trwałego przechowywania danych.\nObwodach logicznych, zbudowanych na podstawie tranzystorów, które tworzą podstawowe elementy przetwarzania danych.\n\nKomputery klasyczne są niezwykle wydajne w rozwiązywaniu szerokiego spektrum problemów, zwłaszcza tych, które dają się łatwo zredukować do logicznych operacji lub operacji arytmetycznych. Jednakże, w miarę wzrostu złożoności problemów, ich wydajność może być ograniczona przez dostępne zasoby obliczeniowe i czas.\n\nAlgorytmy (programy komputerowe – ang. software) to sekwencje logicznych i matematycznych kroków, które definiują sposób rozwiązywania problemów lub wykonywania obliczeń przy użyciu komputera. Algorytmy są abstrakcyjnymi przepisami, które programy komputerowe implementują, aby przetwarzać dane i osiągać zamierzone cele. Wykorzystują one zasoby obliczeniowe komputera, takie jak procesor, pamięć i dysk, do wykonywania zadań w określonej kolejności i z określoną efektywnością.\nPrawo Moore’a\n\nPrawo Moore’a to obserwacja, że liczba tranzystorów na mikroczipie podwaja się mniej więcej co dwa lata, podczas gdy jego koszt zmniejsza się o połowę w tym samym okresie. Wzrost mocy mikroprocesorów jest wykładniczy.\n\nZwiększenie szybkości działania oraz pojemności klasycznych komputerów co dwa lata pozwala na szybsze i bardziej złożone obliczenia przy niższych kosztach. Jednak w ostatnich latach obserwujemy, że prawo Moore’a zbliża się do swoich fizycznych ograniczeń. Miniaturyzacja tranzystorów staje się coraz trudniejsza, co sugeruje, że dalszy wzrost mocy obliczeniowej komputerów tradycyjnych może być trudniejszy do osiągnięcia w dotychczasowy sposób.\n\n\nFizyczne (klasyczne) ograniczenia dla procesorów\n\nRozmiary tranzystora: Rozmiary tranzystorów zbliżają się do skali atomowej. W latach 90-tych tranzystory miały rozmiar około 500 nm, obecnie mają około 14 nm, a najnowsze technologie osiągają nawet 7 nm. Dalsze zmniejszanie rozmiarów napotyka na ograniczenia związane z fizyką materiałów.\nPrędkość światła: Jest to maksymalna prędkość przesyłu informacji w tradycyjnych układach komputerowych. Ogranicza to szybkość, z jaką dane mogą być przesyłane pomiędzy komponentami procesora i pamięci.\nWysoki koszt wytwarzania: Proces produkcji nowoczesnych układów scalonych jest bardzo kosztowny. To skłania do rozwoju układów wieloprocesorowych i rozwiązań z większą liczbą rdzeni w celu zwiększenia wydajności bez konieczności ciągłego zmniejszania tranzystorów.\nEfekty kwantowe: Gdy tranzystory stają się coraz mniejsze, pojawiają się efekty kwantowe, które mogą wpływać na ich działanie. Te efekty stają się istotne, gdy rozmiar tranzystora zbliża się do skali atomowej. Komputery kwantowe są próbą obejścia tych ograniczeń.\nWysoki pobór mocy: Zmniejszanie rozmiarów tranzystorów często prowadzi do zwiększenia gęstości obliczeniowej, co z kolei zwiększa pobór mocy i generuje więcej ciepła.\nGenerowanie ciepła: Zaawansowane komputery wykonujące intensywne obliczenia generują znaczne ilości ciepła. Problemy z chłodzeniem mogą wpływać na wydajność i niezawodność systemu, co wymaga innowacji w zakresie rozwiązań chłodzących.\nWykorzystanie rzadkich materiałów: Produkcja mikroprocesorów i układów scalonych wymaga rzadkich materiałów i zasobów, co może stanowić wyzwanie dla zrównoważonego rozwoju technologii komputerowych.\n\nDla większości praktycznych zastosowań opis makroskopowy oraz klasyczne teorie fizyczne są wystarczające do opisu właściwości prądu w obwodach elektrycznych. Jednak gdy celem jest realizacja obliczeń wykorzystujących mikroskopowe właściwości obiektów, klasyczny opis przestaje być adekwatny.\nW takich przypadkach konieczne jest zwrócenie się ku mechanice kwantowej, która jest najdokładniejszym i najbardziej powszechnie stosowanym modelem opisującym mikroświat. Komputer, który realizuje obliczenia zgodnie z zasadami mechaniki kwantowej, nazywamy komputerem kwantowym.\nDzięki zdolności do wykorzystania zjawisk kwantowych, takich jak superpozycja i splątanie, komputery kwantowe mogą rozwiązywać problemy, które są trudne lub wręcz niemożliwe do rozwiązania za pomocą klasycznych komputerów. Komputery kwantowe oferują obiecującą technologię, która otwiera nowe możliwości w dziedzinie obliczeń oraz nauki.",
    "crumbs": [
      "Sylabus",
      "Wykłady",
      "Komputery klasyczne i kwantowe"
    ]
  },
  {
    "objectID": "lectures/wyklad1.html#obliczenia-kwantowe",
    "href": "lectures/wyklad1.html#obliczenia-kwantowe",
    "title": "Komputery klasyczne i kwantowe",
    "section": "Obliczenia kwantowe",
    "text": "Obliczenia kwantowe\n\nFilm wprowadzający: link\n\n\nNie za krótkie wprowadzenie do fizyki kwantowej\nTermin Mechanika Kwantowa (MK) jest często używany zamiennie z teorią kwantową, choć istnieją również inne teorie kwantowe, takie jak Kwantowa Teoria Pola (ang. quantum field theory), które wykraczają poza zakres standardowej mechaniki kwantowej.\nMechanika Kwantowa przewiduje wyniki eksperymentów przeprowadzanych na układach kwantowych, tj. mikroskopowych obiektach fizycznych, dla których fizyka klasyczna nie jest wystarczająca do opisania ich zachowania. Przykładem może być atom wodoru. MK opisuje zachowanie takich obiektów jak fotony, elektrony oraz kwantowe bity (qubity).\nWarto zaznaczyć, że Mechanika Kwantowa jest fundamentem, na którym opiera się wiele innych teorii i dziedzin fizyki, w tym teorie kwantowe stosowane w obliczeniach kwantowych.\n\nNa naszym wykładzie nie będziemy koncentrować się na fizycznych właściwościach kubitów, lecz ograniczymy się do znajomości ich pewnych, abstrakcyjnych stanów, w jakich mogą się znajdować. Stany te będą numerowane liczbami naturalnymi.\n\nFizyka klasyczna jest zazwyczaj traktowana jako graniczny przypadek mechaniki kwantowej. Mimo to, w praktyce fizycy często oddzielają te dwie dziedziny i stosują odpowiednią teorię do odpowiednich problemów. Na przykład, w konstrukcji mostów wykorzystuje się fizykę klasyczną, a nie mechanikę kwantową.\nWarto również zaznaczyć, że wyniki mechaniki kwantowej mają charakter probabilistyczny, co może prowadzić do błędnego przekonania, że mechanika kwantowa jest teorią statystyczną. W rzeczywistości mechanikę kwantową można raczej uznać za uogólnienie klasycznej definicji prawdopodobieństwa.\n\n\nHistoria MK\nPoczątki Mechaniki Kwantowej sięgają prac Maxa Plancka (1900) i Alberta Einsteina (1905), którzy wprowadzili pojęcie kwantu - najmniejszej jednostki energii. Rozwój tej dziedziny związany jest z badaniami wielu wybitnych naukowców, takich jak Niels Bohr, Erwin Schrödinger, Louis de Broglie, Werner Heisenberg, Paul Dirac, Richard Feynman i wielu innych.\nSzczegółowe informacje na temat historii obliczeń kwantowych można znaleźć w artykule o obliczeniach kwantowych.\n\nInformatyków zazwyczaj nie interesuje, jak dokładnie fizyczne właściwości układów są wykorzystywane do przechowywania informacji w komputerze klasycznym. Podobnie, nie muszą oni zgłębiać fizycznego mechanizmu, dzięki któremu informacja kwantowa jest realizowana w komputerze kwantowym. Tak jak prowadząc samochód, nie zastanawiasz się nad działaniem każdej jego części, tak samo pisząc kod, nie musisz interesować się, jak został on zaimplementowany w bibliotece. Informatycy często koncentrują się na efektywnym wykorzystaniu technologii komputerowych, a nie na szczegółach ich fizycznej realizacji.\n\n\n\nRealizacja komputerów kwantowych\nprocesory kwantowe\n\n\n\nHistoria obliczeń kwantowych\n\n1936: Alan Turing opublikował pracę On Computable Numbers, która stanowiła istotny krok w kierunku teoretycznych podstaw obliczeń (Hilbert Problems) - universal computing machine\n1976: Roman S. Ingarden opublikował artykuł Quantum Information Theory, wprowadzając pojęcie teorii informacji kwantowej, co miało kluczowe znaczenie dla rozwoju komputerów kwantowych.\n1980: Paul Benioff przedstawił teoretyczną koncepcję komputerów kwantowych jako fizycznych systemów, otwierając drzwi do praktycznych implementacji.\n1981: Richard Feynman zwrócił uwagę na to, że klasyczne komputery nie są w stanie efektywnie symulować procesów kwantowych.\n1985: David Deutsch opracował pierwszy opis kwantowej maszyny Turinga oraz algorytmy przeznaczone do uruchamiania na komputerach kwantowych, w tym bramki kwantowe.\n1994: Peter Shor opracował algorytm faktoryzacji liczb w czasie wielomianowym, co miało znaczenie dla kryptografii i bezpieczeństwa informacji.\n1996: Lov Grover stworzył algorytm Grovera, który okazał się wyjątkowo efektywny w przeszukiwaniu stanów kwantowych.\n2000: Zbudowano pierwszy komputer kwantowy (5 qubitów) oparty na nuklearnym rezonansie magnetycznym, co stanowiło ważny krok w rozwoju fizycznych platform komputerów kwantowych.\n2001: Demonstracja algorytmu Shora potwierdziła praktyczność i znaczenie algorytmów kwantowych.\n2007: Firma D-Wave sprzedała pierwszy komercyjny komputer kwantowy, co miało wpływ na rozwój technologii komputerów kwantowych w sektorze prywatnym.\n2019: 23 października, Google ogłosił uzyskanie tzw. quantum supremacy na 53 kubitach.\n2020: Zespół Jian-Wei Pana z University of Science and Technology of China dokonał przełomu, realizując 76 fotonowych kubitów na komputerze Jiuzhang.\n2022: Firma Xanadu dokonała znaczących postępów w dziedzinie technologii komputerów kwantowych.\n2023: Pojawienie się pierwszego logicznego qubitu? (wymaga dalszych szczegółów lub aktualizacji)\n2024: Google - Pierwsze zadowalające wyniki z kwantowej korekcji błędów\n\nOd około 1990 roku fizycy i informatycy pracują nad fizyczną realizacją komputerów kwantowych. Jednym z popularnych modeli obliczeń na komputerach kwantowych jest model oparty na kwantowych obwodach (ang. quantum circuits), który wykorzystuje qubity zamiast klasycznych bitów.\nPodobnie jak w przypadku obwodów klasycznych, w modelu kwantowym definiuje się bramki kwantowe (ang. quantum gates), które umożliwiają wykonywanie operacji na qubitach.\nFizyczna konstrukcja komputera kwantowego, a właściwie qubitu, jest zadaniem nietrywialnym, ponieważ wymaga manipulacji bardzo małym układem, który jest zazwyczaj wyjątkowo wrażliwy na wszelkie oddziaływania z otoczeniem. Efektem tych oddziaływań jest pomiar układu, który prowadzi do przejścia do jego stanu własnego (co oznacza zniszczenie przygotowanego stanu, np. superpozycji). Efekt ten nazywa się dekoherencją.\n\n\n\nDlaczego chcemy używać komputerów kwantowych?\nZasadnicze pytanie brzmi: na ile komputery kwantowe mogą faktycznie poprawić jakość modeli uczenia maszynowego i czy umożliwią realizację zadań, które są poza zasięgiem klasycznych komputerów.\n\nCo o tym sądzisz?\n\nMoja i książkowa odpowiedź: To zależy:\n\njaki problem chcemy rozwiązać?\njakie dane są dostępne i jakiej są natury?\njaki typ analizy chcemy przeprowadzić?\njaki typ komputera kwantowego wykorzystujemy (np. NISQ czy pełnoskalowy komputer kwantowy)?\nco rozumiemy przez “lepiej”? Precyzja, czas obliczeń, koszt, skalowalność, zużycie energii, a może coś innego?\n\n\nKwantowa Złożoność (Quantum Complexity)\nNowy paradygmat obliczeń kwantowych wykorzystuje unikalne cechy interferencji, superpozycji i splątania do realizacji obliczeń. Obecnie realizowany jest w trzech głównych modelach:\n\nQuantum Circuits (Obwody Kwantowe) - oparty na modelu bramkowym, pozwala realizować algorytmy typu QAOA, VQA oraz metody hybrydowe.\nAdiabatyczne Obliczenia Kwantowe (D-Wave) - polegające na minimalizacji energii, wykorzystując optymalizację QUBO i analogię do modelu Isinga.\nTopologiczne Komputery Kwantowe - oparte na topologicznych kubitach.\n\nProblemy, które klasycznie są trudne do rozwiązania, takie jak optymalizacja, mogą być realizowane szybciej przez komputery kwantowe. Przykładem jest faktoryzacja liczb.\nPodstawowym faktem przewagi komputerów kwantowych nad klasycznymi jest tzw. parallelizm. Dzięki temu, że kubity mogą znajdować się w superpozycji stanów, komputer kwantowy może przeprowadzać obliczenia jednocześnie na wszystkich stanach. Co dokładnie to oznacza, poznamy w dalszej części wykładu.\nRozważmy sytuację, w której chcemy poznać działanie funkcji \\(f(x)\\) dla pewnego argumentu \\(x\\) . Aby znaleźć wynik dla dwóch liczb (np. \\(x = 0\\) i \\(x = 1\\)), klasyczny komputer musi wykonać dwie operacje. Komputer kwantowy może uzyskać ten wynik, przeprowadzając obliczenia jednocześnie dla obu wartości. Do wykonania takiej operacji wystarczy jeden kubit.\nJeśli chcemy obliczyć naszą funkcję dla kolejnych liczb \\(x = 2\\) (które binarnie reprezentowane jest jako 10 ) oraz liczby \\(x = 3\\) (binarnie 11 ), musimy dodać kolejny kubit. Dwa kubity mogą posłużyć do realizacji czterech równoległych operacji. Jeśli rozważymy 3 kubity, możemy podwoić liczbę operacji (3 kubity mają 8 stanów bazowych). Dodanie kubitu do komputera kwantowego pozwala podwoić liczbę równoległych obliczeń. W przypadku klasycznego komputera, aby uzyskać taki efekt, trzeba by podwoić liczbę bitów. Generalnie, n -kubitów może realizować 2^n równoległych obliczeń.\nDruga istotna koncepcja w obliczeniach kwantowych to pamięć.\nW klasycznych komputerach (np. 64-bitowy laptop) każda liczba może być reprezentowana w 64-bitowej formie (rozszerzenie reprezentacji 8-bitowej). Jeśli chcemy przechować 4 liczby w tej reprezentacji, potrzebujemy \\(4 \\times 64 = 256\\) bitów pamięci na twardym dysku. Generalnie, dla \\(M\\) liczb potrzebujemy \\(M \\times 64\\) bitów pamięci.\nW przypadku komputerów kwantowych operujących na \\(n\\)-kubitach, sytuacja wygląda inaczej. Możemy przechowywać \\(2^n\\) różnych współczynników, traktując taki stan jako pamięć. W odróżnieniu od klasycznej pamięci, gdzie ilość bitów pamięci jest liniowa w stosunku do liczby przechowywanych danych, pamięć realizowana na kubitach jest funkcją logarytmiczną od liczby liczb.\nPrzykładowo, dla \\(n\\)-kubitów, komputer kwantowy jest w stanie przechować \\(2^n\\) stanów, co jest równoważne \\(2^n\\) różnym współczynnikom. Tak więc, liczba kubitów potrzebnych do przechowania dużej ilości informacji rośnie znacznie wolniej niż liczba bitów w klasycznych komputerach.\nWspółczesne klasyczne komputery są bardzo zaawansowane i mogą zawierać dziesiątki terabajtów pamięci, co pozwala im na symulację niewielkich układów kwantowych. Największe klasyczne komputery są w stanie symulować układy do około 46 kubitów. Dla porównania, obecnie IBM oferuje komputery kwantowe oparte na 127 kubitach, a nawet rozwijają technologie dla układów z 1000 kubitami.\nPamięć w komputerach kwantowych jest znacznie bardziej efektywna w przechowywaniu informacji w porównaniu do klasycznych komputerów. Dzięki możliwości reprezentowania wielu stanów jednocześnie, komputery kwantowe oferują potencjalnie ogromne możliwości obliczeniowe przy znacznie mniejszych wymaganiach pamięciowych.\n\n\nKwantowa Korekcja Błędów (Quantum Error Correction)\nDekoherencja, czyli oddziaływanie kwantowego systemu z jego otoczeniem, może zniszczyć stan komputera kwantowego i wprowadzać błędy obliczeniowe. Aby zapewnić integralność obliczeń w komputerach kwantowych, konieczne jest zastosowanie technik korekcji błędów.\nKwantowa korekcja błędów (Quantum Error Correction) jest kluczowym obszarem badawczym w dziedzinie obliczeń kwantowych, który zajmuje się identyfikowaniem i korygowaniem błędów w systemach kwantowych. W przeciwieństwie do klasycznych systemów komputerowych, gdzie błędy mogą być łatwo korygowane, w przypadku komputerów kwantowych sytuacja jest bardziej złożona z powodu delikatnej natury stanów kwantowych oraz zjawisk takich jak superpozycja i splątanie.\nEra Noisy Intermediate-Scale Quantum (NISQ) oznacza, że obecne komputery kwantowe, mimo że są zaawansowane, wciąż są w fazie rozwoju i borykają się z problemami związanymi z błędami i stabilnością. Systemy NISQ są wystarczająco zaawansowane, by wykonywać pewne interesujące obliczenia kwantowe, ale nadal wymagają dalszych postępów w zakresie korekcji błędów oraz stabilności, aby mogły osiągnąć pełny potencjał.\nW praktyce, kwantowa korekcja błędów wymaga stosowania specjalnych kodów kwantowych, które pozwalają na detekcję i korekcję błędów bez bezpośredniego pomiaru stanów kwantowych. Kody te wprowadzają redundancję w reprezentacji informacji kwantowej, co pozwala na naprawę błędów i utrzymanie poprawności obliczeń.",
    "crumbs": [
      "Sylabus",
      "Wykłady",
      "Komputery klasyczne i kwantowe"
    ]
  },
  {
    "objectID": "lectures/wyklad1.html#proces-obliczeń-kwantowych",
    "href": "lectures/wyklad1.html#proces-obliczeń-kwantowych",
    "title": "Komputery klasyczne i kwantowe",
    "section": "Proces obliczeń kwantowych",
    "text": "Proces obliczeń kwantowych\nW obliczeniach kwantowych cały proces można podzielić na trzy główne etapy:\n\nPrzygotowanie\n\nPrzygotowanie stanów kwantowych kubitów to pierwszy krok w procesie obliczeń kwantowych. W tym etapie tworzymy początkowy stan kubitów, który będzie podstawą dla dalszych operacji. Stan ten może być przygotowany na różne sposoby, w zależności od problemu i algorytmu, który chcemy zaimplementować. Przykładowo, kubity mogą być przygotowane w stanach podstawowych, stanach superpozycji lub w stanach splątanych.\n\nEwolucja\n\nEwolucja polega na stosowaniu bramek kwantowych, które transformują stan kubitów zgodnie z zaplanowanym algorytmem. Bramki kwantowe to odpowiedniki operacji logicznych w klasycznych komputerach, ale operują one na stanach kwantowych, wykorzystując zjawiska takie jak superpozycja i splątanie. Bramki kwantowe są reprezentowane przez macierze unitarnie, które przekształcają stany kubitów w czasie ewolucji obliczeń.\n\nPomiar i interpretacja wyników\n\nPo przeprowadzeniu ewolucji kwantowej następuje pomiar kubitów, który kończy obliczenia. Pomiar kwantowy “zapada” stan kubitu do jednego z możliwych wyników, co powoduje kolaps stanu kwantowego. Wyniki pomiaru są klasycznymi bitami, które można analizować i interpretować, aby uzyskać końcowy wynik obliczeń. Pomiar jest kluczowy, ponieważ to właśnie na podstawie wyników pomiarów uzyskujemy informacje, które są następnie analizowane w kontekście rozwiązania problemu.\n\n\nW codziennej interakcji z komputerem nie obserwujemy bezpośrednio tych etapów, ponieważ są one zautomatyzowane i wbudowane w działanie systemów komputerowych i programów. Dlatego często nie zauważamy świadomie tego schematu działania, mimo że jest on integralną częścią procesu obliczeń, zarówno klasycznych, jak i kwantowych. Piotr Gawron, Oscar Słowik - Rewolucja Stanu, Fantastyczne wprowadzenie do informatyki kwantowej.\n\nKażdy komputer kwantowy (lub koprocesor kwantowy) musi współpracować z układem klasycznym, aby realizować pełne obliczenia i operacje. Oto, jak ta integracja zazwyczaj wygląda:\n\nInterfejs Komunikacyjny\n\nKomputer kwantowy potrzebuje interfejsu do komunikacji z klasycznym komputerem. Interfejs ten umożliwia przesyłanie danych wejściowych do komputera kwantowego oraz odbieranie wyników obliczeń. Współczesne systemy często używają standardowych protokołów komunikacyjnych, takich jak TCP/IP, do przesyłania danych między układami klasycznymi a kwantowymi.\n\nPrzygotowanie Danych\n\nKlasyczny komputer przygotowuje dane wejściowe dla komputera kwantowego. Może to obejmować kodowanie danych w formacie odpowiednim dla kwantowego algorytmu oraz przygotowanie stanów kwantowych. Proces ten często wymaga przetworzenia i dostosowania danych do specyficznych wymagań obliczeń kwantowych.\n\nWykonanie Obliczeń\n\nKomputer kwantowy realizuje obliczenia, wykorzystując swoje qubity i bramki kwantowe. Operacje te są przeprowadzane zgodnie z algorytmami kwantowymi, które mogą wymagać precyzyjnego kontrolowania stanu qubitów i przeprowadzania skomplikowanych transformacji kwantowych.\n\nPomiar i interpretacja\n\nPo zakończeniu obliczeń kwantowych, wyniki są mierzone i interpretowane. Pomiar kwantowy powoduje kolaps stanu qubitów do jednego z możliwych wyników, który jest następnie przesyłany do klasycznego komputera.\n\nPostprocessing\n\nKlasyczny komputer przeprowadza dalszą obróbkę wyników, interpretując i analizując dane uzyskane z obliczeń kwantowych. Może to obejmować interpretację wyników, porównanie z oczekiwaniami oraz podejmowanie decyzji na podstawie uzyskanych wyników.\n\nWspółpraca i Synchronizacja\n\nWspółczesne systemy kwantowe często integrują komputery kwantowe jako koprocesory, które wspierają obliczenia klasyczne. Synchronizacja między komputerami kwantowymi a klasycznymi jest kluczowa dla efektywnego wykorzystania obu typów obliczeń i osiągnięcia optymalnych wyników.\nIntegracja komputerów kwantowych z klasycznymi umożliwia korzystanie z unikalnych właściwości obliczeń kwantowych przy jednoczesnym wykorzystaniu sprawdzonych technologii klasycznych, co pozwala na efektywne i wszechstronne podejście do rozwiązywania problemów obliczeniowych.",
    "crumbs": [
      "Sylabus",
      "Wykłady",
      "Komputery klasyczne i kwantowe"
    ]
  },
  {
    "objectID": "lectures/wyklad1.html#quantum-machine-learning",
    "href": "lectures/wyklad1.html#quantum-machine-learning",
    "title": "Komputery klasyczne i kwantowe",
    "section": "Quantum Machine Learning",
    "text": "Quantum Machine Learning\n\nDane w QML\n\n\nCC - Classical data using classical computers, algorytmy inspirowane obliczeniami kwantowymi\nQC - Quantum data using classical (ML) computers. link1, link2, link3\nCQ - Classical data on qunatum computers. Na tym chcemy się skupić.\nQQ - Quantum data on quantum computers. Who knows?\n\n\n\nRealizacje problemów biznesowych na komputerach kwantowych\n\nSystemy obrony - kryptografia\nRigetti - przewidywanie pogody\nNASA (QuAIL) - Kontrola lotów kosmicznych\nAccenture - Finanse, logistyka, komunikacja i systemy bezpieczeństwa\nBASF - Obliczenia molekularne w chemii kwantowej.\nFord link\nVolkswagen link\nBMW link\nBoeing/Airbus\nGoldman Sach / JPMorgan\nDWave DWave and VW\nIBM Case study\nIBM 127 qubitów\nQuantum Natural Language Processing link\n\n\n\nDostęp do obliczeń kwantowych w chmurze\n\nIBM Quantum z wykorzystaniem biblioteki qiskit.\nPennylane z wykorzystaniem biblioteki pennylane.\nCirq Google z wykorzystaniem biblioteki cirq.\nD-Wave - Python\nXanadu - Pennylane Python library\nAmazon braket - AWS Python, Julia",
    "crumbs": [
      "Sylabus",
      "Wykłady",
      "Komputery klasyczne i kwantowe"
    ]
  },
  {
    "objectID": "lectures/wyklad5.html",
    "href": "lectures/wyklad5.html",
    "title": "Algorytmy kwantowego uczenia maszynowego",
    "section": "",
    "text": "Dziedziną łączącą klasyczne uczenie maszynowe i obliczenia kwantowe nazywamy kwantowym uczeniem maszynowym. QML powstało aby szybciej i sprawniej rozwiązywać problemu uczenia maszynowego. Do tego celu chcemy wykorzystać procesory kwantowe oraz własności algorytmów kwantowych i ich przewagi nad klasycznymi odpowiednikami."
  },
  {
    "objectID": "lectures/wyklad5.html#pqc",
    "href": "lectures/wyklad5.html#pqc",
    "title": "Algorytmy kwantowego uczenia maszynowego",
    "section": "PQC",
    "text": "PQC"
  },
  {
    "objectID": "lectures/wyklad5.html#kwantowe-algorytmy-wariacyjne",
    "href": "lectures/wyklad5.html#kwantowe-algorytmy-wariacyjne",
    "title": "Algorytmy kwantowego uczenia maszynowego",
    "section": "Kwantowe Algorytmy Wariacyjne",
    "text": "Kwantowe Algorytmy Wariacyjne\nVariational Quantum Algorithms (VQA) czyli kwantowe algorytmy wariacyjne nalezą do klasy algorytmów hybrydowych. Oznacza to, ze do ich realizacji wykorzystamy zarówno procesor kwantowy jak i klasyczne algorytmy optymalizacyjne."
  },
  {
    "objectID": "lectures/wyklad5.html#quantum-neural-networks",
    "href": "lectures/wyklad5.html#quantum-neural-networks",
    "title": "Algorytmy kwantowego uczenia maszynowego",
    "section": "Quantum Neural Networks",
    "text": "Quantum Neural Networks"
  },
  {
    "objectID": "lectures/wyklad5.html#quantum-support-vector-classification",
    "href": "lectures/wyklad5.html#quantum-support-vector-classification",
    "title": "Algorytmy kwantowego uczenia maszynowego",
    "section": "Quantum Support Vector Classification",
    "text": "Quantum Support Vector Classification"
  },
  {
    "objectID": "lectures/wyklad5.html#variational-quantum-eigensolver",
    "href": "lectures/wyklad5.html#variational-quantum-eigensolver",
    "title": "Algorytmy kwantowego uczenia maszynowego",
    "section": "Variational Quantum Eigensolver",
    "text": "Variational Quantum Eigensolver"
  },
  {
    "objectID": "lectures/wyklad5.html#qubo",
    "href": "lectures/wyklad5.html#qubo",
    "title": "Algorytmy kwantowego uczenia maszynowego",
    "section": "QUBO",
    "text": "QUBO"
  },
  {
    "objectID": "lectures/wyklad5.html#quantum-approximation-optimization-algorithm",
    "href": "lectures/wyklad5.html#quantum-approximation-optimization-algorithm",
    "title": "Algorytmy kwantowego uczenia maszynowego",
    "section": "Quantum Approximation Optimization Algorithm",
    "text": "Quantum Approximation Optimization Algorithm"
  },
  {
    "objectID": "check/cw1_old_qiskit.html",
    "href": "check/cw1_old_qiskit.html",
    "title": "Biblioteka Qiskit wprowadzenie",
    "section": "",
    "text": "import numpy as np\n\ndef measure_state(state, num_meas):\n    # assert state[0]* np.conj(state[0]) + state[1]* np.conj(state[1]) == 1\n\n    # COMPUTE THE MEASUREMENT OUTCOME PROBABILITIES\n    p_0 = state[0] * np.conj(state[0])\n    p_1 = state[1] * np.conj(state[1])\n    # RETURN A LIST OF SAMPLE MEASUREMENT OUTCOMES\n    return np.random.choice(2,num_meas, p=[p_0,p_1])\nmeasure_state(np.array([0.8, 0.6]),5)\n\nU = np.array([[1, 1], [1, -1]]) / np.sqrt(2)\nU@np.array([0.8, 0.6])\n\narray([0.98994949, 0.14142136])\nThe other important libs.\nfrom qiskit import  __qiskit_version__\nprint(__qiskit_version__)\n\nimport qiskit.tools.jupyter\n\n%qiskit_version_table\nimport numpy as np\nnp.set_printoptions(precision=3, suppress=True)"
  },
  {
    "objectID": "check/cw1_old_qiskit.html#qiskit-podstawy",
    "href": "check/cw1_old_qiskit.html#qiskit-podstawy",
    "title": "Biblioteka Qiskit wprowadzenie",
    "section": "Qiskit podstawy",
    "text": "Qiskit podstawy\nTworzenie rejestrów:\n\nkwantowego QuantumRegister - do inicjalizowania kubitów. Kubity domyślnie inicjalizowane są w stanie \\(|0\\rangle\\)\nklasycznego ClassicalRegister do przechowywania wyników pomiarów kubitów. Po pomiarze otrzymywany wynik zawsze jest binarny \\(\\{0,1\\}\\).\n\n\nfrom qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit\n\nOba rejestry wykorzystywane będą do generowania obwodów kwantowych QuantumCircuit.\nWszystkie podstawowe obiekty dostępne są bezpośrednio w bibliotece qiskit.\n\nqreq = QuantumRegister(4) # rejest kwantowy z 4 qubitami\n\n\ncreg = ClassicalRegister(4) # rejestr klasyczny z 4 bitami\n\n\ncircuit = QuantumCircuit(qreq, creg) # obwód kwantowy z 4 qubitami i 4 bitami\n\n\ncircuit.draw('mpl') # funkcja rysująca obwód\n\n\noutput = QuantumRegister(1) # inny rejestr kwantowy z 1 qubitem\n\n\ncircuit2 = QuantumCircuit(qreq, output, creg)\n\n\ncircuit2.draw(\"mpl\")\n\n\ncircuit3 = QuantumCircuit(qreq)\n\n\ncircuit3.draw('mpl')\n\n\ncircuit4 = QuantumCircuit(3,3)\ncircuit4.draw(\"mpl\")\n\n\nfrom qiskit_aer.primitives import Sampler\n\nfrom qiskit import QuantumCircuit\nfrom qiskit.visualization import plot_histogram\n\nbell = QuantumCircuit(2)\nbell.h(0)\nbell.measure_all()\n \n# execute the quantum circuit\nquasi_dists = Sampler().run(bell, shots=1000).result().quasi_dists[0]\nprint(quasi_dists)\n\n\nplot_histogram(quasi_dists)"
  },
  {
    "objectID": "check/cw1_old_qiskit.html#podstawowe-backendy",
    "href": "check/cw1_old_qiskit.html#podstawowe-backendy",
    "title": "Biblioteka Qiskit wprowadzenie",
    "section": "Podstawowe backendy",
    "text": "Podstawowe backendy\nWykonanie obwodu moze być realizowane zarówno na prawidziwym komputerze kwantowym jak i na lokalnym, klasycznym symulatorze. Większość naszych zadań przeprowadzanych będzie z wykorzystaniem symulatora Aer.\n\nfrom qiskit import Aer \n\nAer.backends()\n\nPodstawowym symulatorem na którym mozemy w pełni uruchomić kod obwodu jest qasm_simulator. Uruchamia on cały obwód i zapisuje wyniki do rejestru klasycznego. Po wielokrotnym uruchomieniu obwodu mozemy sprawdzić równiez statystyki otrzymanych wyników.\n\nPomiar w obwodzie i wielokrotne uruchamianie układu\n\nfrom qiskit import QuantumRegister, ClassicalRegister, QuantumCircuit\n\nqreg = QuantumRegister(2)\ncreg = ClassicalRegister(2)\n# utworzenie obwodu kwantowego z 2 qubitami i 2 bitami\ncircuit = QuantumCircuit(qreg, creg)\ncircuit.h(qreg[0]) # działamy jakąś bramką na pierwszym qubicie\ncircuit.measure(qreg, creg) # dokunujemy pomiaru\n\n# zdefiniowanie symulatora\nsimulator = Aer.get_backend('qasm_simulator')\n# definicja zadania do wykonania\njob = execute(circuit, simulator, shots=1000)\n\nprint(job.job_id())\n# wyciągnięcie wyników i statystyk\ncounts = job.result().get_counts(circuit)\nprint(counts)\n\nWizualizacja otrzymanych wyników realizowana metodą plot_histogram.\n\nfrom qiskit.visualization import plot_histogram\ndisplay(plot_histogram(counts))"
  },
  {
    "objectID": "check/cw1_old_qiskit.html#tworzenie-stanu-jednokubitowego",
    "href": "check/cw1_old_qiskit.html#tworzenie-stanu-jednokubitowego",
    "title": "Biblioteka Qiskit wprowadzenie",
    "section": "Tworzenie stanu jednokubitowego",
    "text": "Tworzenie stanu jednokubitowego\n\\[\n\\ket{\\psi}=\\ket{0}\n\\]\nDo inspekcji stanu układu (bez jego pomiaru) mozemy uzyć backend statevector_simulator.\n\nqr = QuantumRegister(1)\nqc = QuantumCircuit(qr)\n\n# klasyczny symulator pozwala zobaczyc stan\nbackend = Aer.get_backend('statevector_simulator')\njob = execute(qc, backend)\nresult = job.result()\nstate = result.get_statevector() # wynik w postaci wektora stanu\nprint(state)\n\n\nstate.draw('latex') # metoda wypisująca wektor stanu w latexu\n\n\nfrom qiskit.visualization import plot_bloch_multivector\nplot_bloch_multivector(result.get_statevector())\n\n\nqr = QuantumRegister(1)\nqc = QuantumCircuit(qr)\nqc.h(qr[0])\nbackend = Aer.get_backend('statevector_simulator')\njob = execute(qc, backend)\nresult = job.result()\nstate = result.get_statevector()\nstate.draw('latex')\n\n\nfrom qiskit.visualization import plot_bloch_multivector\nplot_bloch_multivector(result.get_statevector())\n\n\ninicjalizacja stanu\n\nfrom qiskit import QuantumCircuit\nqc = QuantumCircuit(1)\ninitial_state = [0,1]\nqc.initialize(initial_state, 0)\nqc.draw('mpl')\n\n\nfrom qiskit import Aer, execute\nbackend = Aer.get_backend('statevector_simulator')\nresult = execute(qc, backend).result()\nstate = result.get_statevector()\nstate.draw('latex')\n\n\ninitial_state = [1,1]\nqc = QuantumCircuit(1)\nqc.initialize(initial_state, 0)\nresult = execute(qc, backend).result().get_statevector()\nresult.draw('latex')\n\n\nfrom math import sqrt\ninitial_state = [1/sqrt(2),1/sqrt(2)]\nqc = QuantumCircuit(1)\nqc.initialize(initial_state, 0)\nresult = execute(qc, backend).result().get_statevector()\nresult.draw('latex')\n\n\nfrom math import sqrt\ninitial_state = [1/2,sqrt(3)/2]\nqc = QuantumCircuit(1)\nqc.initialize(initial_state, 0)\nresult = execute(qc, backend).result().get_statevector()\nresult.draw('latex')\n\n\nfrom math import pi, cos, sin \ndef get_state(theta):\n    return [cos(theta/2), sin(theta/2)]\n\ntheta = -pi/2\n\nqc = QuantumCircuit(1)\nqc.initialize(get_state(theta), 0)\nbackend = Aer.get_backend('statevector_simulator')\nresult = execute(qc, backend).result().get_statevector()\nresult.draw('latex')\n\n\nfrom qiskit.visualization import plot_histogram\nresult = execute(qc, backend).result().get_counts()\nplot_histogram(result)"
  },
  {
    "objectID": "check/cw1_old_qiskit.html#tworzenie-stanu-dwukubitowego",
    "href": "check/cw1_old_qiskit.html#tworzenie-stanu-dwukubitowego",
    "title": "Biblioteka Qiskit wprowadzenie",
    "section": "Tworzenie stanu dwukubitowego",
    "text": "Tworzenie stanu dwukubitowego\n\\[\n\\ket{00}, \\ket{01}, \\ket{10}, \\ket{11}\n\\]\n\nqr = QuantumRegister(2)\nqc = QuantumCircuit(qr)\nbackend = Aer.get_backend('statevector_simulator')\njob = execute(qc, backend)\nresult = job.result()\nstate = result.get_statevector()\nstate.draw('latex')\n\n\nqr = QuantumRegister(2)\nqc = QuantumCircuit(qr)\nqc.h(qr[0])\nqc.h(qr[1])\nbackend = Aer.get_backend('statevector_simulator')\njob = execute(qc, backend)\nresult = job.result()\nstate = result.get_statevector()\nstate.draw('latex')\n\n\nfrom qiskit.visualization import plot_bloch_multivector\nplot_bloch_multivector(result.get_statevector())\n\n\nqr = QuantumRegister(2)\nqc = QuantumCircuit(qr)\nqc.h(qr[0])\nqc.cx(0,1)\n\nbackend = Aer.get_backend('statevector_simulator')\njob = execute(qc, backend)\nresult = job.result()\nstate = result.get_statevector()\n\n\nqc.draw('mpl')\n\n\nstate.draw('latex')\n\n\nfrom qiskit.visualization import plot_bloch_multivector\nplot_bloch_multivector(result.get_statevector())"
  },
  {
    "objectID": "check/cw1_old_qiskit.html#tworzenie-stanu-trzy-kubitowego",
    "href": "check/cw1_old_qiskit.html#tworzenie-stanu-trzy-kubitowego",
    "title": "Biblioteka Qiskit wprowadzenie",
    "section": "Tworzenie stanu trzy-kubitowego",
    "text": "Tworzenie stanu trzy-kubitowego\n\\[\n\\ket{000}, \\ket{001}, \\ket{010}, \\ket{011}, \\ket{100}, \\ket{101}, \\ket{110}, \\ket{111}\\]\n\nqr = QuantumRegister(3)\nqc = QuantumCircuit(qr)\n# qc.x(qr[0]) \n# qc.x(qr[1])\n\n# klasyczny symulator pozwala zobaczyc stan\nbackend = Aer.get_backend('statevector_simulator')\njob=execute(qc, backend)\nresult = job.result()\nstate = result.get_statevector()\n\nUruchom powyższy kod usuwajac poszczegolne komentarze i sprawdz wynik.\n\n# uruchom w środowisku IBM Quantum Experience\nfrom qiskit_ibm_provider import IBMProvider\n\nIBMProvider.save_account(token=MY_API_TOKEN)\nprovider = IBMProvider()\n\n# Create a circuit\nqc = QuantumCircuit(2)\nqc.h(0)\nqc.cx(0, 1)\nqc.measure_all()\n\n# Select a backend.\nbackend = provider.get_backend(\"ibmq_qasm_simulator\")\n\n# Transpile the circuit\ntranspiled = transpile(qc, backend=backend)\n\n# Submit a job.\njob = backend.run(transpiled)\n# Get results.\nprint(job.result().get_counts())\n\nWięcej informacji znajdziesz tutaj\n\nfrom qiskit.tools.visualization import circuit_drawer\n\nq = QuantumRegister(1)\nc = ClassicalRegister(1)\ncircuit = QuantumCircuit(q, c)\ncircuit.measure(q, c)\ncircuit_drawer(circuit)"
  }
]