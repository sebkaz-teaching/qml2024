
## Bramki i funkcje

Napisać kod obiektowy, który pobiera string (treść do zaszyfrowania) i przekłada go na zapis bitowy. 
Dodatkowo wylosuj klucz do zaszyfrowania wiadomości (losowy ciąg 0 i 1).

Metoda 1 - szyfrowanie - Zaszyfruj wiadomość wykorzystując operacje `XOR`. 

Metoda 2 - wyświetl zaszyfrowaną wiadomość w postaci normalnej. 

Metoda 3 - odszyfruj wiadomość (ciąg zaszyfrowanego kodu binarnego)

Metoda 4 - wyświetl odszyfrowaną wiadomość


$$
\newcommand{\bra}[1]{\left \langle #1 \right \rvert}
\newcommand{\ket}[1]{\left \rvert #1 \right \rangle}
\newcommand{\braket}[2]{\left \langle #1 \middle \rvert #2 \right \rangle}
$$

### PyTorch Regresja liniowa

```{python}
import torch
import numpy as np
import matplotlib.pyplot as plt

class LinearRegression(torch.nn.Module):

    def __init__(self, inputSize, outputSize):
        super(LinearRegression, self).__init__()
        self.linear = torch.nn.Linear(inputSize, outputSize)

    def forward(self, x):
        out = self.linear(x)
        return out


inputDim = 1
outputDim = 1
learningRate = 0.01
epochs = 100

lr_model = LinearRegression(inputDim, outputDim)

x = np.arange(11)
print(f"dane: {x}")

y = [2*el - 1 for el in x]
print(f"target: {y}")

# dostosowanie do pytorch
y  = np.array(y, dtype=np.float32)
x_train = np.array(x, dtype=np.float32)
x_train, y_train = x_train.reshape(-1, 1), y.reshape(-1, 1)

inputs = torch.from_numpy(x_train)
outputs = torch.from_numpy(y_train)

criterion = torch.nn.MSELoss() 
optimizer = torch.optim.SGD(lr_model.parameters(), lr=learningRate)
# petla uczaca 
for epoch in range(epochs):
    # forward pass and loss
    y_predicted = lr_model(inputs)
    loss = criterion(y_predicted, outputs)
    
    # backward pass
    loss.backward()
    
    # updates
    optimizer.step()
    
    # zero gradients
    optimizer.zero_grad()
    
    if (epoch+1) % 10 == 0:
        print(f'epoch: {epoch+1}, loss = {loss.item():.4f}')

with torch.no_grad():
    predicted = lr_model(inputs)

plt.clf()
plt.plot(x_train, y_train, 'go', label='True data', alpha=0.5)
plt.plot(x_train, predicted, '--', label='Predictions', alpha=0.5)
plt.legend(loc='best')
plt.show()


```

### PyTorch Regresja logistyczna

```{python}
import torch
import numpy as np
from sklearn.datasets import make_classification

class LogisticRegression(torch.nn.Module):

    def __init__(self, inputSize, outputSize):
        super(LogisticRegression, self).__init__()
        self.linear = torch.nn.Linear(inputSize, outputSize)

    def forward(self, x):
        x = self.linear(x)
        y_pred = torch.sigmoid(x)
        return y_pred


# prepare dataset
X, y = make_classification(n_samples=10**4, n_features=10 ,random_state=42)

X_train = torch.from_numpy(X.astype(np.float32))
y_train = torch.from_numpy(y.astype(np.float32))

y_train = y_train.view(y_train.shape[0], 1)


model = LogisticRegression(X_train.shape[1], y_train.shape[1])

learningRate = 0.01
criterion = torch.nn.BCELoss()
optimizer = torch.optim.SGD(model.parameters(), lr=learningRate)

# petla uczaca 
num_epochs = 200

for epoch in range(num_epochs):
    # forward pass and loss
    y_predicted = model(X_train)
    loss = criterion(y_predicted, y_train)
    
    # backward pass
    loss.backward()
    
    # updates
    optimizer.step()
    
    # zero gradients
    optimizer.zero_grad()
    
    if (epoch+1) % 25 == 0:
        print(f'epoch: {epoch+1}, loss = {loss.item():.4f}')

with torch.no_grad():
    y_predicted = model(X_train)  # no need to call model.forward()
    y_predicted_cls = y_predicted.round()   # round off to nearest class
    acc = y_predicted_cls.eq(y_train).sum() / float(y_train.shape[0])  # accuracy
    print(f'accuracy = {acc:.4f}')

```